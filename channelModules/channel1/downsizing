downsizing
map all note values from xtouch to B0 CC values (00 / 7F stay the same)
don't need some filters - add to beginning of files

//SendMIDIThruOnCh

// if phrase and arp are off, notes will be passed through as expected
// Exit only exits handler - does not exit loops
// GetNoteState, SetNoteState
// still don't think these would be helpful... since need to sort by note value as well as order pressed and it wouldn't be more efficient to iterate all the way through
// could set j array hex indices to constants

//stuff to learn from - spacing in style

fix padMode

      N9 24 = XA 41 // remap 36 to 65 for channel 10 volca sample pt 6
      N9 25 = XA 42 // remap 37 to 66 for channel 10 volca sample pt 7
      N9 26 = XA 43 // remap 38 to 67 for channel 10 volca sample pt 8
      N9 27 = XA 44 // remap 39 to 68 for channel 10 volca sample pt 9
      N9 28 = XA 3C // remap 40 to 60 for channel 10 volca sample pt 1
      N9 29 = XA 3D // remap 41 to 61 for channel 10 volca sample pt 2
      N9 2A = XA 3E // remap 42 to 62 for channel 10 volca sample pt 3
      N9 2B = XA 3F // remap 43 to 63 for channel 10 volca sample pt 4
      N9 2C = XA 45 // remap 44 to 69 for channel 10 volca sample pt 10
      N9 30 = XA 40 // remap 48 to 64 for channel 10 volca sample pt 5

      N9 24 = X9 2A // remap 36 to 40 for channel 10 cl hat
      N9 25 = X9 2E // remap 37 to 46 for channel 10 op hat
      N9 26 = X9 4B // remap 38 to 75 for channel 10 claves
      N9 27 = X9 43 // remap 39 to 67 for channel 10 agogo
      N9 28 = X9 24 // remap 40 to 36 for channel 10 bass
      N9 29 = X9 26 // remap 41 to 38 for channel 10 snare
      N9 2A = X9 2B // remap 42 to 43 for channel 10 lo tom
      N9 2B = X9 32 // remap 43 to 50 for channel 10 hi tom
      N9 2C = X9 31 // remap 44 to 49 for channel 10 crash
      N9 30 = X9 27 // remap 48 to 39 for channel 10 clap

// this instance will constantly be receiving clock, the question will be whether it responds to it or not
// there will be another service receiving note in - if arpPhraseOnOffToggle is on, notes will be processed, otherwise, they will not

// note that the assumption here is that the global array information will be used, not the local array
// the local array will just be used for storage

// possible future updates - addings 'reverse' and 'bounce' for phrase (stochastic etc. whatever)

// need to reassign arpIndex whenever mode is changed

// arpTypes
// 1: ascending one octave
// 2: ascending two octave
// 3: ascending three octave
// 4: descending one octave
// 5: descending two octave
// 6: descending three octave
// 7: random one octave
// 8: random two octave
// 9: random three octave
// 10: order pressed one octave
// 11: order pressed two octave
// 12: order pressed three octave

// channel

  // filter out messages that don't have CC or FC as their routing (FF, 11)

  // messages expected:

  // BLOCK | F0 FF 1B 00 F7 - message sent from launchkey to xtouch to reset lighting
  // ALLOW | F0 CC 1C 00 F7 - message sent from launchkey to channel to reset channel
  // BLOCK | F0 FF 1D CC F7 - message sent from launchkey to xtouch at change channel - send xtouch lights to xtouch for new channel

  // ALLOW | F0 CC    00    val  F7      numPressed                  
  // BLOCK | F0 FF/11 07    val  F7      setPhrase                
  // ALLOW | F0 CC    08    val  F7      phraseVal                
  // BLOCK | F0 FF    09    val  F7      phraseIndex              
  // ALLOW | F0 CC    0A    val  F7      phraseLengthPlusOffset   
  // BLOCK | F0 11    0C    val  F7      padMode
  // ALLOW | F0 CC/FF 19    60   F7      gateOpened               
  // ALLOW | F0 CC    index val1 val2 F7 phraseOffsetValues               
  // BLOCK | F0 11    1F    val  F7      trackingMode
  // ALLOW | F0 CC 20 val1 val2 val3 val4 val5 val6 val7 val8 val9 val10 F7 arpValues

  // filter out messages that don't have CC or C1 as their routing (01, 11, 0F)

  // messages expected:   

  // BLOCK | F0 11 1A 2E F7 - rest, sent from xtouch to launchkey
  // BLOCK | F0 0F EE M0 M1 M2 F7 - message sent from xtouch to xtouch filter to send lighting back to xtouch (CC and note messages)
  // BLOCK | F0 11 EE M0 M1 M2 F7 - message sent from xtouch to launchkey for CC output

  // ALLOW | F0 C1    01    val  F7      arpPhraseToggle
  // ALLOW | F0 C1    02    val  F7      arpPhraseOnOffToggle
  // ALLOW | F0 CC    03    val  F7      tempoPulse
  // ALLOW | F0 CC    04    val1 val2 F7 gate
  // ALLOW | F0 C1    05    val  F7      velocity
  // ALLOW | F0 C1    06    val  F7      arpValueModeMod
  // BLOCK | F0 11/FF 07    val  F7      setPhrase
  // BLOCK | F0 11    0B    val  F7      latch
  // ALLOW | F0 CC/FF 19    60   F7      gateOpened

  // BLOCK | F0 01    0D    val1 val2 F7 lfoKnob
  // BLOCK | F0 01    0E    val1 val2 F7 lfoSync
  // BLOCK | F0 01    0F    val1 val2 F7 lfoBase
  // BLOCK | F0 01    10    val1 val2 F7 lfoInvert
  // BLOCK | F0 01    11    val1 val2 F7 lfoOnOff
  // BLOCK | F0 01    12    val  F7      lfoMuteAll
  // BLOCK | F0 01    13    val1 val2 F7 lfoType
  // BLOCK | F0 01    14    val  F7      lfoReset
  // BLOCK | F0 01    15    00   F7      lfoResetAll
  // BLOCK | F0 01    16    val1 val2 F7 lfoRate
  // BLOCK | F0 01    17    val1 val2 F7 lfoDepth
  // BLOCK | F0 01    18    val1 F7      lfoTempo
  // BLOCK | F0 01    19    00   F7      lfoInit

  // CX = XX +B TODO this will be received from xtouch

// launchkey

  // filter out messages that don't have 11 or C1 as their routing (01, CC, 0F)

  // messages expected:   

  // ALLOW | F0 11 1A 2E F7 - rest, sent from xtouch to launchkey
  // BLOCK | F0 0F EE M0 M1 M2 F7 - message sent from xtouch to xtouch filter to send lighting back to xtouch (CC and note messages)
  // ALLOW | F0 11 EE M0 M1 M2 F7 - message sent from xtouch to launchkey for CC output

  // ALLOW | F0 C1    01    val  F7      arpPhraseToggle
  // ALLOW | F0 C1    02    val  F7      arpPhraseOnOffToggle
  // BLOCK | F0 CC    03    val  F7      tempoPulse
  // BLOCK | F0 CC    04    val1 val2 F7 gate
  // ALLOW | F0 C1    05    val  F7      velocity
  // ALLOW | F0 C1    06    val  F7      arpValueModeMod
  // ALLOW | F0 11/FF 07    val  F7      setPhrase
  // ALLOW | F0 11    0B    val  F7      latch
  // BLOCK | F0 CC/FF 19    60   F7      gateOpened

  // BLOCK | F0 01    0D    val1 val2 F7 lfoKnob
  // BLOCK | F0 01    0E    val1 val2 F7 lfoSync
  // BLOCK | F0 01    0F    val1 val2 F7 lfoBase
  // BLOCK | F0 01    10    val1 val2 F7 lfoInvert
  // BLOCK | F0 01    11    val1 val2 F7 lfoOnOff
  // BLOCK | F0 01    12    val  F7      lfoMuteAll
  // BLOCK | F0 01    13    val1 val2 F7 lfoType
  // BLOCK | F0 01    14    val  F7      lfoReset
  // BLOCK | F0 01    15    00   F7      lfoResetAll
  // BLOCK | F0 01    16    val1 val2 F7 lfoRate
  // BLOCK | F0 01    17    val1 val2 F7 lfoDepth
  // BLOCK | F0 01    18    val1 F7      lfoTempo
  // BLOCK | F0 01    19    00   F7      lfoInit

// lfo

// sysex messages sent here:

// filter out messages that don't have 01 as their routing (0F, 11, C1, CC)

// messages expected:   

// BLOCK | F0 11 1A 2E F7 - rest, sent from xtouch to launchkey
// BLOCK | F0 0F EE M0 M1 M2 F7 - message sent from xtouch to xtouch filter to send lighting back to xtouch (CC and note messages)
// BLOCK | F0 11 EE M0 M1 M2 F7 - message sent from xtouch to launchkey for CC output

// BLOCK | F0 C1    01    val  F7      arpPhraseToggle
// BLOCK | F0 C1    02    val  F7      arpPhraseOnOffToggle
// BLOCK | F0 CC    03    val  F7      tempoPulse
// BLOCK | F0 CC    04    val1 val2 F7 gate
// BLOCK | F0 C1    05    val  F7      velocity
// BLOCK | F0 C1    06    val  F7      arpValueModeMod
// BLOCK | F0 11/FF 07    val  F7      setPhrase
// BLOCK | F0 11    0B    val  F7      latch
// BLOCK | F0 CC/FF 19    60   F7      gateOpened

// ALLOW | F0 01    0D    val1 val2 F7 lfoKnob
// ALLOW | F0 01    0E    val1 val2 F7 lfoSync
// ALLOW | F0 01    0F    val1 val2 F7 lfoBase
// ALLOW | F0 01    10    val1 val2 F7 lfoInvert
// ALLOW | F0 01    11    val1 val2 F7 lfoOnOff
// ALLOW | F0 01    12    val  F7      lfoMuteAll
// ALLOW | F0 01    13    val1 val2 F7 lfoType
// ALLOW | F0 01    14    val  F7      lfoReset
// ALLOW | F0 01    15    00   F7      lfoResetAll
// ALLOW | F0 01    16    val1 val2 F7 lfoRate
// ALLOW | F0 01    17    val1 val2 F7 lfoDepth
// ALLOW | F0 01    18    val1 F7      lfoTempo
// ALLOW | F0 01    19    00   F7      lfoInit

// CX = XX +B TODO this will be received from xtouch

// xtouch

  // filter messages that don't have FF or FC as their routing (CC, 11)

  // messages expected:

  // ALLOW | F0 FF 1B 00 F7 - message sent from launchkey to xtouch to reset lighting
  // BLOCK | F0 CC 1C 00 F7 - message sent from launchkey to channel to reset channel
  // ALLOW | F0 FF 1D CC F7 - message sent from launchkey to xtouch at change channel - send xtouch lights to xtouch for new channel

  // BLOCK | F0 CC    00    val  F7      numPressed                  
  // ALLOW | F0 FF/11 07    val  F7      setPhrase                
  // BLOCK | F0 CC    08    val  F7      phraseVal                
  // ALLOW | F0 FF    09    val  F7      phraseIndex              
  // BLOCK | F0 CC    0A    val  F7      phraseLengthPlusOffset   
  // BLOCK | F0 11    0C    val  F7      padMode
  // BLOCK | F0 CC/FF 19    60   F7      gateOpened               
  // BLOCK | F0 CC    index val1 val2 F7 phraseOffsetValues               
  // BLOCK | F0 11    1F    val  F7      trackingMode
  // BLOCK | F0 CC 20 val1 val2 val3 val4 val5 val6 val7 val8 val9 val10 F7 arpValues

// xtouch hardware

// filter out messages that don't have 0F as their routing (01, 11, C1, CC)

// messages expected:   

// BLOCK | F0 11 1A 2E F7 - rest, sent from xtouch to launchkey
// ALLOW | F0 0F EE M0 M1 M2 F7 - message sent from xtouch to xtouch filter to send lighting back to xtouch (CC and note messages)
// BLOCK | F0 11 EE M0 M1 M2 F7 - message sent from xtouch to launchkey for CC output

// BLOCK | F0 C1    01    val  F7      arpPhraseToggle
// BLOCK | F0 C1    02    val  F7      arpPhraseOnOffToggle
// BLOCK | F0 CC    03    val  F7      tempoPulse
// BLOCK | F0 CC    04    val1 val2 F7 gate
// BLOCK | F0 C1    05    val  F7      velocity
// BLOCK | F0 C1    06    val  F7      arpValueModeMod
// BLOCK | F0 11/FF 07    val  F7      setPhrase
// BLOCK | F0 11    0B    val  F7      latch
// BLOCK | F0 CC/FF 19    60   F7      gateOpened

// BLOCK | F0 01    0D    val1 val2 F7 lfoKnob
// BLOCK | F0 01    0E    val1 val2 F7 lfoSync
// BLOCK | F0 01    0F    val1 val2 F7 lfoBase
// BLOCK | F0 01    10    val1 val2 F7 lfoInvert
// BLOCK | F0 01    11    val1 val2 F7 lfoOnOff
// BLOCK | F0 01    12    val  F7      lfoMuteAll
// BLOCK | F0 01    13    val1 val2 F7 lfoType
// BLOCK | F0 01    14    val  F7      lfoReset
// BLOCK | F0 01    15    00   F7      lfoResetAll
// BLOCK | F0 01    16    val1 val2 F7 lfoRate
// BLOCK | F0 01    17    val1 val2 F7 lfoDepth
// BLOCK | F0 01    18    val1 F7      lfoTempo
// BLOCK | F0 01    19    00   F7      lfoInit
