# xtouch test code

# TEST NOTES
# TODO / NOTE - likely easier to actually have push control be via a button as opposed to the knob buttons










# xtouch mini

# full explanation:
# this file builds out the arpeggiator / drum roll for each channel
# because tempo will be determined by ableton link midi clock, the first knob will determine which clock messages are heeded and which are ignored
# link runs clock at 24 ppqn, or 24 pulses per quarter note / beat
# there are multiple tempos, determined by knob 1 on the xtouch:
#
# 0. full range - this is as many tempos as we can fit
# 8/1 - 48
# 6/1 - 36
# 4/1 - 24
# 3/1 - 18
# 2/1 - 12
# 3/2 - 9
# 1/1 - 6
# 2/3 - 4
# 1/2 - 3
# 1/3 - 2
# 1/6 - 1
#
# 1. beatmaker - based on the default tempos of the drum roll in beatmaker pro - slightly fewer options than full range
# 4/1 - 24
# 2/1 - 12
# 3/2 - 9
# 1/1 - 6
# 2/3 - 4
# 1/2 - 3
#
# 2. factor of two - any tempo that is a factor of 2 of a 4/4 beat
# 16/1 - 96
# 8/1 - 48
# 4/1 - 24
# 2/1 - 12
# 1/1 - 6
# 1/2 - 3
#
# 3. factor of three - any tempo that is a factor of 3 of a 4/4 beat
# 12/1 - 72
# 6/1 - 36
# 3/1 - 18
# 3/2 - 9
# 2/3 - 4
# 1/3 - 2
#
# For the first, we have 11 modes, which translates to around 11.5 per
# 12 11 11 12 12 12 12 12 11 11 12
# For the second, we have 6 modes, which translates to around 21 per
# 22 21 21 21 21 22
# button 1 will decrease arp type / turn on set phrase mode
# button 9 will increase arp type / add rest as part of phrase
# button 2 will toggle arp / phrase
# button 10 will turn arp / phrase on or off

# J is the local storage array (database)

IF LOAD

  # constant
  ALIAS 00 channelVal

  # local
  ALIAS I0 tempoMode
  ALIAS I1 arpValueMode
  ALIAS I2 previousDrumVal
  ALIAS I3 gateMode
  ALIAS I4 gateFactor
  ALIAS I5 resetIndex
  ALIAS I6 resetIndexMinusOne
  ALIAS I7 gateTemp # TODO
  ALIAS I8 knob1Push # TODO
  ALIAS I9 knob1Turn # TODO
  ALIAS IA knob2Push # TODO
  ALIAS IB knob2Turn # TODO
  ALIAS IC knob3Push # TODO
  ALIAS ID knob3Turn # TODO
  ALIAS IE knob4Push # TODO
  ALIAS IF knob4Turn # TODO
  ALIAS I10 knob5Push # TODO
  ALIAS I11 knob5Turn # TODO
  ALIAS I12 knob6Push # TODO
  ALIAS I13 knob6Turn # TODO
  ALIAS I14 knob7Push # TODO
  ALIAS I15 knob7Turn # TODO
  ALIAS I16 knob8Push # TODO
  ALIAS I17 knob8Turn # TODO
  ALIAS I18 knobTemp # TODO
  ALIAS I1A channelCC # TODO
  ALIAS I1B channelNoteOn # TODO
  ALIAS I1C channelNoteOff # TODO
  ALIAS I1D lfoRate # TODO
  ALIAS I1E lfoDepth # TODO

  ALIAS J0 currentChannel # TODO in all files - deprecated
  ALIAS J2 arpPhraseToggle
  ALIAS J3 arpPhraseOnOffToggle
  ALIAS J4 tempoModeMod
  ALIAS J5 tempoPulse
  ALIAS J6 gateModeMod
  ALIAS J7 gate
  ALIAS J8 velocity
  ALIAS J9 arpValueModeMod
  ALIAS JA setPhrase
  ALIAS JC phraseIndex
  ALIAS JE arpModeSwitched # NOTE gateOpened
  ALIAS JF waveguideToggle
  ALIAS J10 drumParams
  ALIAS J14 isLatch # TODO
  ALIAS J15 pitchQuantize # TODO
  ALIAS J16 padMode # TODO

  ALIAS K0 select1
  ALIAS K1 select2
  ALIAS K2 selectBoth
  ALIAS K3 level1
  ALIAS K4 level2
  ALIAS K5 levelBoth
  ALIAS K6 attack1
  ALIAS K7 attack2
  ALIAS K8 attackBoth
  ALIAS K9 release1
  ALIAS KA release2
  ALIAS KB releaseBoth
  ALIAS KC pitch1
  ALIAS KD pitch2
  ALIAS KE pitchBoth
  ALIAS KF modAmount1
  ALIAS K10 modAmount2
  ALIAS K11 modAmountBoth
  ALIAS K12 modRate1
  ALIAS K13 modRate2
  ALIAS K14 modRateBoth
  ALIAS K15 waveguideDecay
  ALIAS K16 waveguideBody
  ALIAS K17 waveguideTune

  # assign local

  # these are only defined here, since they are essentially constants - will not change past this
  ASS channelCC = B0 + channelVal
  ASS channelNoteOn = 90 + channelVal
  ASS channelNoteOff = 80 + channelVal

  # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
  ASS tempoMode = 0
  # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
  ASS gateMode = 0
  # NOTE if this isn't reset on each 'install', then it's technically possible it could decrease/increase to the value min/max
  ASS arpValueMode = 8004
  # NOTE this is set to 'select' on initial load
  ASS previousDrumVal = 04
  ASS gateFactor = 1
  ASS lfoRate = 0
  ASS lfoDepth = 0

  ASS knob1Push = 0
  ASS knob1Turn = 0
  ASS knob2Push = 0
  ASS knob2Turn = 0
  ASS knob3Push = 0
  ASS knob3Turn = 0
  ASS knob4Push = 0
  ASS knob4Turn = 0
  ASS knob5Push = 0
  ASS knob5Turn = 0
  ASS knob6Push = 0
  ASS knob6Turn = 0
  ASS knob7Push = 0
  ASS knob7Turn = 0
  ASS knob8Push = 0
  ASS knob8Turn = 0

  ASS K0 = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  ASS L0 = 0E 00 64 00 00 00 00 00

END

# sysex reception

IF M0 == F0

  IF M2 == 00
    ASS currentChannel = M3
    # TEST
    # ensure xtouch receives currentChannel
    LOG currentChannel_SYSEX_RECEIVED J0
    # END TEST
    BLOCK
    EXIT
  END

  IF M2 == 0A
    ASS setPhrase = M3
    # TEST
    # ensure xtouch receives setPhrase
    LOG setPhrase_SYSEX_RECEIVED JA
    # END TEST
    # Turn off setPhrase light when sysex received
    IF setPhrase == 0
      SEND F0 0F FF 90 00 00 F7 +F
    END
    BLOCK
    EXIT
  END

  IF M2 == 0E
    ASS arpModeSwitched = M3
    # TEST
    # ensure xtouch receives gateOpened
    LOG gateOpened_SYSEX_RECEIVED JE
    # END TEST
    BLOCK
    EXIT
  END

  # Turn off lights when init sysex received
  # NOTE M1 used due to SB limiting comparisons to four indices
  IF M1 == FF FF 00 00
    # reset necessary local variables
    # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
    ASS tempoMode = 0
    # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
    ASS gateMode = 0
    # NOTE if this isn't reset on each 'install', then it's technically possible it could decrease/increase to the value min/max
    ASS arpValueMode = 8004
    # NOTE this is set to 'select' on initial load
    ASS previousDrumVal = 04
    ASS gateFactor = 1
    ASS lfoRate = 0
    ASS lfoDepth = 0

    ASS knob1Push = 0
    ASS knob1Turn = 0
    ASS knob2Push = 0
    ASS knob2Turn = 0
    ASS knob3Push = 0
    ASS knob3Turn = 0
    ASS knob4Push = 0
    ASS knob4Turn = 0
    ASS knob5Push = 0
    ASS knob5Turn = 0
    ASS knob6Push = 0
    ASS knob6Turn = 0
    ASS knob7Push = 0
    ASS knob7Turn = 0
    ASS knob8Push = 0
    ASS knob8Turn = 0

    ASS K0 = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    ASS L0 = 0E 00 64 00 00 00 00 00
    # TEST
    # uncomment to turn on all lights on xtouch
    # IF LOAD
    #   ALIAS I0 resetIndex
    #   ALIAS I1 resetIndexMinusOne
    #   ASS resetIndex = 1
    #   WHILE resetIndex < 11
    #     MATH resetIndexMinusOne = resetIndex - 1
    #     # these should only go up to eight
    #     IF resetIndex < 9
    #       # reset lighting on knobs
    #       SEND F0 0F FF BA resetIndex 7F F7 +F
    #     END
    #     # reset button lighting
    #     SEND F0 0F FF 90 resetIndexMinusOne 01 F7 +F
    #     MATH resetIndex = resetIndex + 1
    #   END
    # END
    # END TEST
    ASS resetIndex = 1
    # loop until this is done for all sixteen buttons
    WHILE resetIndex < 11
      MATH resetIndexMinusOne = resetIndex - 1
      # these should only go up to eight
      IF resetIndex < 9
        # reset lighting on knobs
        SEND F0 0F FF BA resetIndex 00 F7 +F
        # set lighting to 'pan'
        SEND F0 0F FF B0 resetIndex 02 F7 +F
      END
      # reset button lighting
      SEND F0 0F FF 90 resetIndexMinusOne 00 F7 +F
      MATH resetIndex = resetIndex + 1
    END
    ASS J0 = 00 # currentChannel
    ASS J1 = 00 # numPressed
    ASS J2 = 00 # arpPhraseToggle
    ASS J3 = 00 # arpPhraseOnOffToggle
    ASS J4 = 00 # tempoModeMod
    ASS J5 = 24 # tempoPulse
    ASS J6 = 00 # gateModeMod
    ASS J7 = 00 # gate
    ASS J8 = 64 # velocity
    ASS J9 = 00 # arpValueModeMod
    ASS JA = 00 # setPhrase
    ASS JB = 3C # phraseVal
    ASS JC = 2A # phraseindex
    ASS JD = 2A # phraseLengthPlusOffset
    ASS JE = 00 # gateOpened
    ASS JF = 00 # waveguideToggle
    ASS J10 = 0E # drumParams (Part 1)
    ASS J11 = 0F # drumParams (Part 2)
    ASS J12 = 10 # drumParams (Part 1+2)
    ASS J13 = 67 # drumParams (wg send) (103) # TODO - this goes for every file if we are removing
    ASS J14 = 00 # isLatch
    ASS J20 = 00 00 00 00 00 00 00 00 00 00 # arp values (J10 J11 J12 J13 J14 J15 J16 J17 J18 J19)
    ASS J2A = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 # phrase sequence (J2A J2B J2C J2D J2E J2F J30 J31 J32 J33 J34 J35 J36 J37 J38 J39 ETC.)
    # send init tempo lighting
    SEND F0 0F FF BA 01 $26 F7 +F
    # send init velocity lighting
    SEND F0 0F FF BA 03 $100 F7 +F
    # send init drum lighting
    SEND F0 0F FF 90 04 01 F7 +F

    # TEST
    # ensure lights turn off on init
    LOG LIGHTS_OFF_SYSEX_RECEIVED
    LOG RESET_SYSEX_RECEIVED
    # END TEST
    BLOCK
    EXIT
  END

  # Send lights when channel change sysex received
  # NOTE M1 used due to SB limiting comparisons to four indices
  IF M1 == FF FF CC CC

    ASS resetIndex = 0
    # need to reset lights from other channel
    # loop until this is done for all sixteen buttons
    WHILE resetIndex < 10
      # reset button lighting
      SEND F0 0F FF 90 resetIndex 00 F7 +F
      MATH resetIndex = resetIndex + 1
    END

    IF setPhrase == 1
      SEND F0 0F FF 90 00 01 F7 +F
    END
    IF arpPhraseToggle == 1
      SEND F0 0F FF 90 01 01 F7 +F
    END
    IF arpPhraseOnOffToggle == 1
      SEND F0 0F FF 90 09 01 F7 +F
    END
    IF isLatch == 1 # TODO change from isLatch to latch?
      SEND F0 0F FF 90 02 01 F7 +F
    END
    # TODO not implemented
    # IF lfo == 1
    # END
    # TODO not implemented
    # IF groupKnobPush == 1
    # END
    IF padMode == 1
      SEND F0 0F FF 90 03 01 F7 +F
    END

    # send tempo lighting
    IF tempoModeMod == 0
      IF tempoPulse == 48
        SEND F0 0F FF BA 01 $0 F7 +F
      END
      IF tempoPulse == 36
        SEND F0 0F FF BA 01 $13 F7 +F
      END
      IF tempoPulse == 24
        SEND F0 0F FF BA 01 $26 F7 +F
      END
      IF tempoPulse == 18
        SEND F0 0F FF BA 01 $39 F7 +F
      END
      IF tempoPulse == 12
        SEND F0 0F FF BA 01 $52 F7 +F
      END
      IF tempoPulse == 9
        SEND F0 0F FF BA 01 $65 F7 +F
      END
      IF tempoPulse == 6
        SEND F0 0F FF BA 01 $78 F7 +F
      END
      IF tempoPulse == 4
        SEND F0 0F FF BA 01 $91 F7 +F
      END
      IF tempoPulse == 3
        SEND F0 0F FF BA 01 $104 F7 +F
      END
      IF tempoPulse == 2
        SEND F0 0F FF BA 01 $117 F7 +F
      END
      IF tempoPulse == 1
        SEND F0 0F FF BA 01 $127 F7 +F
      END
    END
    IF tempoModeMod == 1
      IF tempoPulse == 24
        SEND F0 0F FF BA 01 00 F7 +F
      END
      IF tempoPulse == 12
        SEND F0 0F FF BA 01 $25 F7 +F
      END
      IF tempoPulse == 9
        SEND F0 0F FF BA 01 $50 F7 +F
      END
      IF tempoPulse == 6
        SEND F0 0F FF BA 01 $75 F7 +F
      END
      IF tempoPulse == 4
        SEND F0 0F FF BA 01 $100 F7 +F
      END
      IF tempoPulse == 3
        SEND F0 0F FF BA 01 $127 F7 +F
      END
    END
    IF tempoModeMod == 2
      IF tempoPulse == 96
        SEND F0 0F FF BA 01 00 F7 +F
      END
      IF tempoPulse == 48
        SEND F0 0F FF BA 01 $25 F7 +F
      END
      IF tempoPulse == 24
        SEND F0 0F FF BA 01 $50 F7 +F
      END
      IF tempoPulse == 12
        SEND F0 0F FF BA 01 $75 F7 +F
      END
      IF tempoPulse == 6
        SEND F0 0F FF BA 01 $100 F7 +F
      END
      IF tempoPulse == 3
        SEND F0 0F FF BA 01 $127 F7 +F
      END
    END
    IF tempoModeMod == 3
      IF tempoPulse == 72
        SEND F0 0F FF BA 01 00 F7 +F
      END
      IF tempoPulse == 36
        SEND F0 0F FF BA 01 $25 F7 +F
      END
      IF tempoPulse == 18
        SEND F0 0F FF BA 01 $50 F7 +F
      END
      IF tempoPulse == 9
        SEND F0 0F FF BA 01 $75 F7 +F
      END
      IF tempoPulse == 4
        SEND F0 0F FF BA 01 $100 F7 +F
      END
      IF tempoPulse == 2
        SEND F0 0F FF BA 01 $127 F7 +F
      END
    END

    # send gate lighting # TODO
    MATH gateTemp = gate / gateFactor
    SEND F0 0F FF BA 02 gateTemp F7 +F
    
    # send velocity lighting
    SEND F0 0F FF BA 03 velocity F7 +F

    # send lfo rate lighting
    SEND F0 0F FF BA 04 lfoRate F7 +F

    # send lfo depth lighting
    SEND F0 0F FF BA 05 lfoDepth F7 +F

    # channel specific # TODO add more of these tags throughout

    # send drum lighting
    SEND F0 0F FF 90 previousDrumVal 01 F7 +F

    IF drumParams = $14
      SEND F0 0F FF BA 06 select1 F7 +F
      SEND F0 0F FF BA 07 select2 F7 +F
      SEND F0 0F FF BA 08 selectBoth F7 +F
    END
    IF drumParams = $17
      SEND F0 0F FF BA 06 level1 F7 +F
      SEND F0 0F FF BA 07 level2 F7 +F
      SEND F0 0F FF BA 08 levelBoth F7 +F
    END
    IF drumParams = $20
      SEND F0 0F FF BA 06 attack1 F7 +F
      SEND F0 0F FF BA 07 attack2 F7 +F
      SEND F0 0F FF BA 08 attackBoth F7 +F
    END
    IF drumParams = $23
      SEND F0 0F FF BA 06 release1 F7 +F
      SEND F0 0F FF BA 07 release2 F7 +F
      SEND F0 0F FF BA 08 releaseBoth F7 +F
    END
    IF drumParams = $26
      SEND F0 0F FF BA 06 pitch1 F7 +F
      SEND F0 0F FF BA 07 pitch2 F7 +F
      SEND F0 0F FF BA 08 pitchBoth F7 +F
    END
    IF drumParams = $29
      SEND F0 0F FF BA 06 modAmount1 F7 +F
      SEND F0 0F FF BA 07 modAmount2 F7 +F
      SEND F0 0F FF BA 08 modAmountBoth F7 +F
    END
    IF drumParams = $46
      SEND F0 0F FF BA 06 modRate1 F7 +F
      SEND F0 0F FF BA 07 modRate2 F7 +F
      SEND F0 0F FF BA 08 modRateBoth F7 +F
    END
    IF drumParams = $117
      SEND F0 0F FF BA 06 waveguide1 F7 +F
      SEND F0 0F FF BA 07 waveguide2 F7 +F
      SEND F0 0F FF BA 08 waveguideBoth F7 +F
    END

    # end channel specific

    # TEST
    # ensure lights change on channel change
    LOG LIGHTS_SYSEX_RECEIVED
    LOG CHANNEL_CHANGE_SYSEX_RECEIVED
    # END TEST
    BLOCK
    EXIT
  END

END

# end sysex reception

# if it is a button push
IF MT == 90

  # assign knob1Push to true when knob1 is pushed - for push control
  IF M1 == 0 
    ASS knob1Push = 1
    # TEST
    # ensure knobPush turned on accordingly
    LOG knob1Push knob1Push
    # END TEST
  END

  # assign knob2Push to true when knob2 is pushed - for push control
  IF M1 == 1 
    ASS knob2Push = 1
    # TEST
    # ensure knobPush turned on accordingly
    LOG knob2Push knob2Push
    # END TEST
  END

  # assign knob3Push to true when knob3 is pushed - for push control
  IF M1 == 2
    ASS knob3Push = 1
    # TEST
    # ensure knobPush turned on accordingly
    LOG knob3Push knob3Push
    # END TEST
  END

  # assign knob4Push to true when knob4 is pushed - for push control
  IF M1 == 3
    ASS knob4Push = 1
    # TEST
    # ensure knobPush turned on accordingly
    LOG knob4Push knob4Push
    # END TEST
  END

  # assign knob5Push to true when knob5 is pushed - for push control
  IF M1 == 4
    ASS knob5Push = 1
    # TEST
    # ensure knobPush turned on accordingly
    LOG knob5Push knob5Push
    # END TEST
  END

  # assign knob6Push to true when knob6 is pushed - for push control
  IF M1 == 5
    ASS knob6Push = 1
    # TEST
    # ensure knobPush turned on accordingly
    LOG knob6Push knob6Push
    # END TEST
  END

  # assign knob7Push to true when knob7 is pushed - for push control
  IF M1 == 6
    ASS knob7Push = 1
    # TEST
    # ensure knobPush turned on accordingly
    LOG knob7Push knob7Push
    # END TEST
  END

  # assign knob8Push to true when knob8 is pushed - for push control
  IF M1 == 7
    ASS knob8Push = 1
    # TEST
    # ensure knobPush turned on accordingly
    LOG knob8Push knob8Push
    # END TEST
  END

  # if it is a button 1 push
  IF M0 == 9A 08 7F
    # if arp then increase variable
    IF arpPhraseToggle == 0
      MATH arpValueMode = arpValueMode + 1
      # set value mode to variable modulo 12
      MATH arpValueModeMod = arpValueMode % C
      # SEND SYSEX
      SEND F0 C1 09 arpValueModeMod F7 +F
      # END SYSEX
      # NOTE uncommenting this and adding sysex makes clockNum, isOctave, and arpIndex reset whenever the arpMode changes
      # ASS arpModeSwitched = 1
    # if phrase then toggle setPhrase
    ELSE
      IF setPhrase == 0
        ASS setPhrase = 1
        # SEND SYSEX
        SEND F0 11 0A setPhrase F7 +F
        # END SYSEX
      ELSE
        ASS setPhrase = 0
        # SEND SYSEX
        SEND F0 11 0A setPhrase F7 +F
        # END SYSEX
        ASS phraseIndex = 2A
      END
    END
    # TEST
    # ensure arpValueModeMod changes accordingly or setPhrase changes
    LOG arpValueMode arpValueModeMod
    LOG setPhrase setPhrase
    # END TEST
  END

  # if it is a button 9 push
  IF M0 == 9A 10 7F
    # if arp then decrease variable
    IF arpPhraseToggle == 0
      MATH arpValueMode = arpValueMode - 1
      # set value mode to variable modulo 12
      MATH arpValueModeMod = arpValueMode % C
      # SEND SYSEX
      SEND F0 C1 09 arpValueModeMod F7 +F
      # END SYSEX
    # if phrase then add rest to phrase sequence
    ELSE
      IF setPhrase == 1
        SEND F0 11 FF 2E 57 F7 +F
        # NOTE not currently planning on handling this, but there may is likely a race condition between rest and note that could cause issues
        # TEST
        # ensure rest sent
        LOG REST_SYSEX_SENT
        # END TEST
      END
    END
    # TEST
    # ensure arpValueModeMod changes accordingly
    LOG arpValueMode arpValueModeMod
    # END TEST
  END

  # if it is a button 2 push toggle arp / phrase
  IF M1 == 09 7F
    IF arpPhraseToggle == 0
      ASS arpPhraseToggle = 1
      # SEND SYSEX
      SEND F0 C1 02 arpPhraseToggle F7 +F
      # END SYSEX
    ELSE
      ASS arpPhraseToggle = 0
      # SEND SYSEX
      SEND F0 C1 02 arpPhraseToggle F7 +F
      # END SYSEX
      IF setPhrase == 1
        ASS setPhrase = 0
        # SEND SYSEX
        SEND F0 11 0A setPhrase F7 +F
        # END SYSEX
        ASS phraseIndex = 2A
      END
    END
    # TEST
    # ensure arp and phrase are toggling and setPhrase is turned off (if on) when switched to arp
    IF arpPhraseToggle == 0
      LOG IS_ARP
    END
    IF arpPhraseToggle == 1
      LOG IS_PHRASE
    END
    LOG setPhrase setPhrase
    # END TEST
  END

  # if it is a button 10 push toggle button 2 selection on / off
  IF M1 == 11 7F
    IF arpPhraseOnOffToggle == 0
      ASS arpPhraseOnOffToggle = 1
      # SEND SYSEX
      SEND F0 C1 03 arpPhraseOnOffToggle F7 +F
      # END SYSEX
    ELSE
      ASS arpPhraseOnOffToggle = 0
      # SEND SYSEX
      SEND F0 C1 03 arpPhraseOnOffToggle F7 +F
      # END SYSEX
    END
    # TEST
    # ensure arp/phrase module is turned off or on
    IF arpPhraseOnOffToggle == 0
      LOG MODULE_OFF
    END
    IF arpPhraseOnOffToggle == 1
      LOG MODULE_ON
    END
    # END TEST
  END

  # if it is a button 3 push toggle latch
  IF M1 == 0A 7F
    IF isLatch == 0
      ASS isLatch = 1
      # SEND SYSEX
      SEND F0 11 14 isLatch F7 +F
      # END SYSEX
    ELSE
      ASS isLatch = 0
      # SEND SYSEX
      SEND F0 11 14 isLatch F7 +F
      # END SYSEX
    END
    # TEST
    # ensure latch is toggling
    IF isLatch == 0
      LOG LATCH_OFF
    END
    IF isLatch == 1
      LOG LATCH_ON
    END
    # END TEST
  END

  # if it is a button 4 push toggle padMode
  IF M1 == 0B 7F
    # isBeats
    IF padMode == 0
      ASS padMode = 1
      # # SEND SYSEX
      # SEND XX XX padMode F7 +F
      # # END SYSEX
    # isSample
    ELSE
      ASS padMode = 0
      # # SEND SYSEX
      # SEND F0 XX XX padMode F7 +F
      # # END SYSEX
    END
    # TEST
    # ensure padMode is toggling
    IF padMode == 0
      LOG BEATS_PAD
    END
    IF padMode == 1
      LOG SAMPLE_PAD
    END
    # END TEST
  END

  # if it is channel 1-6
  IF currentChannel < 6

    # 
    IF M1 == 13 7F
      IF waveguideToggle == 0
        ASS waveguideToggle = 1
        # NOTE unsure if this is correct as of now
        SEND F0 11 FF channelCC $116 7F F7
      ELSE
        ASS waveguideToggle = 0
        # NOTE unsure if this is correct as of now
        SEND F0 11 FF channelCC $116 00 F7
      END
      # TEST
      # ensure waveguide is toggled properly
      IF waveguideToggle == 0
        LOG WAVEGUIDE_STRING
      END
      IF waveguideToggle == 1
        LOG WAVEGUIDE_TUBE
      END
      # END TEST
    END

    # if knob is pressed and a drumParam is changed, the value in the L array will not match up correctly
    # NOTE monitor for actions that this may be blocking that are unrelated to drum
    IF knob6Push == 1
      BLOCK
      EXIT
    END
    IF knob7Push == 1
      BLOCK
      EXIT
    END
    IF knob8Push == 1
      BLOCK
      EXIT
    END

    # for all except the last, order is part 1, part 2, part 1 and 2
    # if it is button 5 - knobs control 'select'
    IF M1 == 0C 7F
      ASS drumParams = $14 $15 $16
      IF previousDrumVal != 04
        SEND F0 0F FF 90 previousDrumVal 00 F7 +F
      END
      SEND F0 0F FF BA 06 select1 F7 +F
      ASS L5 = select1
      # TEST
      LOG L5 L5
      # END TEST
      SEND F0 0F FF BA 07 select2 F7 +F
      ASS L6 = select2
      # TEST
      LOG L6 L6
      # END TEST
      SEND F0 0F FF BA 08 selectBoth F7 +F
      ASS L7 = selectBoth
      # TEST
      LOG L7 L7
      # END TEST
      # TEST
      # ensure drumparams are assigned according to correct buttons
      # ensure 'select' lighting sent to knobs
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 6 - knobs control 'level'
    IF M1 == 0D 7F
      ASS drumParams = $17 $18 $19
      IF previousDrumVal != 05
        SEND F0 0F FF 90 previousDrumVal 00 F7 +F
      END
      SEND F0 0F FF BA 06 level1 F7 +F
      ASS L5 = level1
      # TEST
      LOG L5 L5
      # END TEST
      SEND F0 0F FF BA 07 level2 F7 +F
      ASS L6 = level2
      # TEST
      LOG L6 L6
      # END TEST
      SEND F0 0F FF BA 08 levelBoth F7 +F
      ASS L7 = levelBoth
      # TEST
      LOG L7 L7
      # END TEST
      # TEST
      # ensure drumparams are assigned according to correct buttons
      # ensure 'level' lighting sent to knobs
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 7 - knobs control 'attack'
    IF M1 == 0E 7F
      ASS drumParams = $20 $21 $22
      IF previousDrumVal != 06
        SEND F0 0F FF 90 previousDrumVal 00 F7 +F
      END
      SEND F0 0F FF BA 06 attack1 F7 +F
      ASS L5 = attack1
      # TEST
      LOG L5 L5
      # END TEST
      SEND F0 0F FF BA 07 attack2 F7 +F
      ASS L6 = attack2
      # TEST
      LOG L6 L6
      # END TEST
      SEND F0 0F FF BA 08 attackBoth F7 +F
      ASS L7 = attackBoth
      # TEST
      LOG L7 L7
      # END TEST
      # TEST
      # ensure drumparams are assigned according to correct buttons
      # ensure 'attack' lighting sent to knobs
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 8 - knobs control 'release'
    IF M1 == 0F 7F
      ASS drumParams = $23 $24 $25
      IF previousDrumVal != 07
        SEND F0 0F FF 90 previousDrumVal 00 F7 +F
      END
      SEND F0 0F FF BA 06 release1 F7 +F
      ASS L5 = release1
      # TEST
      LOG L5 L5
      # END TEST
      SEND F0 0F FF BA 07 release2 F7 +F
      ASS L6 = release2
      # TEST
      LOG L6 L6
      # END TEST
      SEND F0 0F FF BA 08 releaseBoth F7 +F
      ASS L7 = releaseBoth
      # TEST
      LOG L7 L7
      # END TEST
      # TEST
      # ensure drumparams are assigned according to correct buttons
      # ensure 'release' lighting sent to knobs
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 13 - knobs control 'pitch'
    IF M1 == 14 7F
      ASS drumParams = $26 $27 $28
      IF previousDrumVal != 0C
        SEND F0 0F FF 90 previousDrumVal 00 F7 +F
      END
      SEND F0 0F FF BA 06 pitch1 F7 +F
      ASS L5 = pitch1
      # TEST
      LOG L5 L5
      # END TEST
      SEND F0 0F FF BA 07 pitch2 F7 +F
      ASS L6 = pitch2
      # TEST
      LOG L6 L6
      # END TEST
      SEND F0 0F FF BA 08 pitchBoth F7 +F
      ASS L7 = pitchBoth
      # TEST
      LOG L7 L7
      # END TEST
      # TEST
      # ensure drumparams are assigned according to correct buttons
      # ensure 'pitch' lighting sent to knobs
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 14 - knobs control 'modAmount'
    IF M1 == 15 7F
      ASS drumParams = $29 $30 $31
      IF previousDrumVal != 0D
        SEND F0 0F FF 90 previousDrumVal 00 F7 +F
      END
      SEND F0 0F FF BA 06 modAmount1 F7 +F
      ASS L5 = modAmount1
      # TEST
      LOG L5 L5
      # END TEST
      SEND F0 0F FF BA 07 modAmount2 F7 +F
      ASS L6 = modAmount2
      # TEST
      LOG L6 L6
      # END TEST
      SEND F0 0F FF BA 08 modAmountBoth F7 +F
      ASS L7 = modAmountBoth
      # TEST
      LOG L7 L7
      # END TEST
      # TEST
      # ensure drumparams are assigned according to correct buttons
      # ensure 'modAmount' lighting sent to knobs
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 15 - knobs control 'modRate'
    IF M1 == 16 7F
      ASS drumParams = $46 $47 $48
      IF previousDrumVal != 0E
        SEND F0 0F FF 90 previousDrumVal 00 F7 +F
      END
      SEND F0 0F FF BA 06 modRate1 F7 +F
      ASS L5 = modRate1
      # TEST
      LOG L5 L5
      # END TEST
      SEND F0 0F FF BA 07 modRate2 F7 +F
      ASS L6 = modRate2
      # TEST
      LOG L6 L6
      # END TEST
      SEND F0 0F FF BA 08 modRateBoth F7 +F
      ASS L7 = modRateBoth
      # TEST
      LOG L7 L7
      # END TEST
      # TEST
      # ensure drumparams are assigned according to correct buttons
      # ensure 'modRate' lighting sent to knobs
      LOG drumParams drumParams
      # END TEST
    END
    # order is decay, body, tune, send
    # if it is button 16 - knobs control 'waveguide'
    IF M1 == 17 7F
      ASS drumParams = $117 $118 $119
      IF previousDrumVal != 0F
        SEND F0 0F FF 90 previousDrumVal 00 F7 +F
      END
      SEND F0 0F FF BA 06 waveguideDecay F7 +F
      ASS L5 = waveguideDecay
      # TEST
      LOG L5 L5
      # END TEST
      SEND F0 0F FF BA 07 waveguideBody F7 +F
      ASS L6 = waveguideBody
      # TEST
      LOG L6 L6
      # END TEST
      SEND F0 0F FF BA 08 waveguideTune F7 +F
      ASS L7 = waveguideTune
      # TEST
      LOG L7 L7
      # END TEST
      # TEST
      # ensure drumparams are assigned according to correct buttons
      # ensure 'waveguide' lighting sent to knobs
      LOG drumParams drumParams
      # END TEST
    END
  END
END

# if it is a button note-off (important for lighting)
IF MT == 80

  # push control
  # NOTE / TODO if we add a button which will set global push control (for all knobs), we'll need to likely copy the if statements below into a large if statement on press/release
  # additionally, when the button is pressed it will just set all 8 knob pushes to on, and send lighting on release if on
  # NOTE does not function for knobs 4 and 5 (lfo) because there's no action to change L3 and L4

  # TODO may be able to turn this into a while loop
  IF M1 == 00 00
    IF knob1Turn == 1
      MATH knobTemp = M1 + 1
      # injection makes sure the parameters are changed correctly
      SEND BA knobTemp LM1 +I
      # no need to send lighting here, since tempo sends its own on injection
      ASS knob1Push = 0
      ASS knob1Turn = 0
      # TEST
      # ensure push control release handled correctly
      # ensure lighting matches with L array
      # ensure L array matches with previous value
      # ensure parameter associated with knob lighting also changed
      # tempoPulse
      LOG M1 M1
      LOG LM1 LM1
      LOG knob1Push knob1Turn
      LOG knob1Turn knob1Turn
      # END TEST
      # if using push control, releasing the knob button should not have any effect
      BLOCK
      EXIT
    ELSE
      ASS knob1Push = 0
      # TEST
      LOG knob1Push_RESET
      # END TEST
    END
  END

  IF M1 == 01 00
    IF knob2Turn == 1
      MATH knobTemp = M1 + 1
      # injection makes sure the parameters are changed correctly
      SEND BA knobTemp LM1 +I
      # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
      SEND F0 0F FF BA knobTemp LM1 F7 +F
      ASS knob2Push = 0
      ASS knob2Turn = 0
      # TEST
      # ensure push control release handled correctly
      # ensure lighting matches with L array
      # ensure L array matches with previous value
      # ensure parameter associated with knob lighting also changed
      # gate
      LOG M1 M1
      LOG LM1 LM1
      LOG knob2Push knob2Turn
      LOG knob2Turn knob2Turn
      # END TEST
      # if using push control, releasing the knob button should not have any effect
      BLOCK
      EXIT
    ELSE
      ASS knob2Push = 0
      # TEST
      LOG knob2Push_RESET
      # END TEST
    END
  END

  IF M1 == 02 00
    IF knob3Turn == 1
      MATH knobTemp = M1 + 1
      # injection makes sure the parameters are changed correctly
      SEND BA knobTemp LM1 +I
      # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
      SEND F0 0F FF BA knobTemp LM1 F7 +F
      ASS knob3Push = 0
      ASS knob3Turn = 0
      # TEST
      # ensure push control release handled correctly
      # ensure lighting matches with L array
      # ensure L array matches with previous value
      # ensure parameter associated with knob lighting also changed
      # velocity
      LOG M1 M1
      LOG LM1 LM1
      LOG knob3Push knob3Turn
      LOG knob3Turn knob3Turn
      # END TEST
      # if using push control, releasing the knob button should not have any effect
      BLOCK
      EXIT
    ELSE
      ASS knob3Push = 0
      # TEST
      LOG knob3Push_RESET
      # END TEST
    END
  END

  IF M1 == 03 00
    IF knob4Turn == 1
      MATH knobTemp = M1 + 1
      # injection makes sure the parameters are changed correctly
      SEND BA knobTemp LM1 +I
      # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
      SEND F0 0F FF BA knobTemp LM1 F7 +F
      ASS knob4Push = 0
      ASS knob4Turn = 0
      # TEST
      # ensure push control release handled correctly
      # ensure lighting matches with L array
      # ensure L array matches with previous value
      # ensure parameter associated with knob lighting also changed
      # lfo rate
      LOG M1 M1
      LOG LM1 LM1
      LOG knob4Push knob4Turn
      LOG knob4Turn knob4Turn
      # END TEST
      # if using push control, releasing the knob button should not have any effect
      BLOCK
      EXIT
    ELSE
      ASS knob4Push = 0
      # TEST
      LOG knob4Push_RESET
      # END TEST
    END
  END

  IF M1 == 04 00
    IF knob5Turn == 1
      MATH knobTemp = M1 + 1
      # injection makes sure the parameters are changed correctly
      SEND BA knobTemp LM1 +I
      # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
      SEND F0 0F FF BA knobTemp LM1 F7 +F
      ASS knob5Push = 0
      ASS knob5Turn = 0
      # TEST
      # ensure push control release handled correctly
      # ensure lighting matches with L array
      # ensure L array matches with previous value
      # ensure parameter associated with knob lighting also changed
      # lfo depth
      LOG M1 M1
      LOG LM1 LM1
      LOG knob5Push knob5Turn
      LOG knob5Turn knob5Turn
      # END TEST
      # if using push control, releasing the knob button should not have any effect
      BLOCK
      EXIT
    ELSE
      ASS knob5Push = 0
      # TEST
      LOG knob5Push_RESET
      # END TEST
    END
  END

  IF M1 == 05 00
    IF knob6Turn == 1
      MATH knobTemp = M1 + 1
      # injection makes sure the parameters are changed correctly
      SEND BA knobTemp LM1 +I
      # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
      SEND F0 0F FF BA knobTemp LM1 F7 +F
      ASS knob6Push = 0
      ASS knob6Turn = 0
      # TEST
      # ensure push control release handled correctly
      # ensure lighting matches with L array
      # ensure L array matches with previous value
      # ensure parameter associated with knob lighting also changed
      # drumParam1
      LOG M1 M1
      LOG LM1 LM1
      LOG knob6Push knob6Turn
      LOG knob6Turn knob6Turn
      # END TEST
      # if using push control, releasing the knob button should not have any effect
      BLOCK
      EXIT
    ELSE
      ASS knob6Push = 0
      # TEST
      LOG knob6Push_RESET
      # END TEST
    END
  END

  IF M1 == 06 00
    IF knob7Turn == 1
      MATH knobTemp = M1 + 1
      # injection makes sure the parameters are changed correctly
      SEND BA knobTemp LM1 +I
      # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
      SEND F0 0F FF BA knobTemp LM1 F7 +F
      ASS knob7Push = 0
      ASS knob7Turn = 0
      # TEST
      # ensure push control release handled correctly
      # ensure lighting matches with L array
      # ensure L array matches with previous value
      # ensure parameter associated with knob lighting also changed
      # drumParam2
      LOG M1 M1
      LOG LM1 LM1
      LOG knob7Push knob7Turn
      LOG knob7Turn knob7Turn
      # END TEST
      # if using push control, releasing the knob button should not have any effect
      BLOCK
      EXIT
    ELSE
      ASS knob7Push = 0
      # TEST
      LOG knob7Push_RESET
      # END TEST
    END
  END

  IF M1 == 07 00
    IF knob8Turn == 1
      MATH knobTemp = M1 + 1
      # injection makes sure the parameters are changed correctly
      SEND BA knobTemp LM1 +I
      # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
      SEND F0 0F FF BA knobTemp LM1 F7 +F
      ASS knob8Push = 0
      ASS knob8Turn = 0
      # TEST
      # ensure push control release handled correctly
      # ensure lighting matches with L array
      # ensure L array matches with previous value
      # ensure parameter associated with knob lighting also changed
      # drumParam3
      LOG M1 M1
      LOG LM1 LM1
      LOG knob8Push knob8Turn
      LOG knob8Turn knob8Turn
      # END TEST
      # if using push control, releasing the knob button should not have any effect
      BLOCK
      EXIT
    ELSE
      ASS knob8Push = 0
      # TEST
      LOG knob8Push_RESET
      # END TEST
    END
  END

  # end push control

  # if it is a knob 1 button release, increase tempo mode
  # if variable is too high, reset
  IF M1 == 00 00
    MATH tempoMode = tempoMode + 1
    # set tempo mode to variable modulo 4
    MATH tempoModeMod = tempoMode % 4
    IF tempoModeMod == 0
      ASS tempoPulse = $24
      # SEND SYSEX
      SEND F0 CC 05 tempoPulse F7 +F
      # END SYSEX
      SEND F0 0F FF BA 01 $26 F7 +F
      ASS L0 = $14
      # TEST
      LOG L0 L0
      # END TEST
    END
    # set each tempoPulse to default value on switching
    # also send data to xtouch to reflect this
    IF tempoModeMod == 1
      ASS tempoPulse = $24
      # SEND SYSEX
      SEND F0 CC 05 tempoPulse F7 +F
      # END SYSEX
      SEND F0 0F FF BA 01 00 F7 +F
      ASS L0 = 00
      # TEST
      LOG L0 L0
      # END TEST
    END
    IF tempoModeMod == 2
      ASS tempoPulse = $24
      # SEND SYSEX
      SEND F0 CC 05 tempoPulse F7 +F
      # END SYSEX
      SEND F0 0F FF BA 01 $50 F7 +F
      ASS L0 = $26
      # TEST
      LOG L0 L0
      # END TEST
    END
    IF tempoModeMod == 3
      ASS tempoPulse = $18
      # SEND SYSEX
      SEND F0 CC 05 tempoPulse F7 +F
      # END SYSEX
      SEND F0 0F FF BA 01 $50 F7 +F
      ASS L0 = $26
      # TEST
      LOG L0 L0
      # END TEST
    END
    # TEST
    # ensure tempoModeMod changes accordingly and tempoPulse correlates
    LOG tempoMode tempoModeMod
    LOG tempoPulse tempoPulse
    # END TEST
  END

  # if it is a knob 2 button release, increase gate mode
  # if variable is too high, reset
  IF M1 == 01 00
    MATH gateMode = gateMode + 1
    # set tempo mode to variable modulo 6
    # NOTE preventing the light from sending will change the length more quickly, more easily
    # NOTE will be testing with live to see best setup here
    MATH gateModeMod = gateMode % 6
    IF gateModeMod == 0
      ASS gateFactor = 1
      SEND F0 0F FF BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    IF gateModeMod == 1
      ASS gateFactor = 2
      SEND F0 0F FF BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    IF gateModeMod == 2
      ASS gateFactor = 5
      SEND F0 0F FF BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    IF gateModeMod == 3
      ASS gateFactor = 10
      SEND F0 0F FF BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    IF gateModeMod == 4
      ASS gateFactor = 20
      SEND F0 0F FF BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    IF gateModeMod == 5
      ASS gateFactor = 40
      SEND F0 0F FF BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    # TEST
    # ensure gateModeMod changes accordingly and gate correlates
    LOG gateMode gateModeMod
    LOG gate gate
    # END TEST
  END

  IF M1 == 08 00
    IF arpPhraseToggle == 1
      IF setPhrase == 1
        SEND F0 0F FF 90 00 01 F7 +F
      END
    END
  END

  IF M1 == 09 00
    IF arpPhraseToggle == 1
      SEND F0 0F FF 90 01 01 F7 +F
    ELSE
      # NOTE this sends even when light is off
      # TODO is the if statement necessary?
      IF setPhrase == 0
        SEND F0 0F FF 90 00 00 F7 +F
      END
    END
  END

  IF M1 == 0A 00
    IF isLatch == 1
      SEND F0 0F FF 90 02 01 F7 +F
    END
  END

  IF M1 == 0B 00
    IF padMode == 1
      SEND F0 0F FF 90 03 01 F7 +F
    END
  END

  IF M1 == 11 00
    IF arpPhraseOnOffToggle == 1
      SEND F0 0F FF 90 09 01 F7 +F
    END
  END

  # if it is channel 1-6
  IF currentChannel < 6

    IF M1 == 13 00
      IF waveguideToggle == 1
        SEND F0 0F FF 90 0B 01 F7 +F
      END
    END

    IF M1 == 07 00 # TODO fix this - should be sending to launchkey, not xtouch
      IF pitchQuantize == 0
        ASS pitchQuantize = 1
        SEND F0 0F FF B0 $53 7F F7 +F
      ELSE
        ASS pitchQuantize = 0
        SEND F0 0F FF B0 $53 00 F7 +F
      END
      # TEST
      # ensure pitchQuantize is toggled properly
      IF pitchQuantize == 0
        LOG PITCH_NOT_QUANTIZED
      END
      IF pitchQuantize == 1
        LOG PITCH_QUANTIZED
      END
      # END TEST
    END

    # if knob is pressed and a drumParam is changed, the value in the L array will not match up correctly
    # NOTE monitor for actions that this may be blocking that are unrelated to drum
    IF knob6Push == 1
      BLOCK
      EXIT
    END
    IF knob7Push == 1
      BLOCK
      EXIT
    END
    IF knob8Push == 1
      BLOCK
      EXIT
    END

    IF M1 == 0C 00
      SEND F0 0F FF 90 04 01 F7 +F
      ASS previousDrumVal = 04
    END
    IF M1 == 0D 00
      SEND F0 0F FF 90 05 01 F7 +F
      ASS previousDrumVal = 05
    END
    IF M1 == 0E 00
      SEND F0 0F FF 90 06 01 F7 +F
      ASS previousDrumVal = 06
    END
    IF M1 == 0F 00
      SEND F0 0F FF 90 07 01 F7 +F
      ASS previousDrumVal = 07
    END
    IF M1 == 14 00
      SEND F0 0F FF 90 0C 01 F7 +F
      ASS previousDrumVal = 0C
    END
    IF M1 == 15 00
      SEND F0 0F FF 90 0D 01 F7 +F
      ASS previousDrumVal = 0D
    END
    IF M1 == 16 00
      SEND F0 0F FF 90 0E 01 F7 +F
      ASS previousDrumVal = 0E
    END
    IF M1 == 17 00
      SEND F0 0F FF 90 0F 01 F7 +F
      ASS previousDrumVal = 0F
    END
  END
END


# if it is a knob turn
IF MT == B0
  # set knob turn to true if using push control
  IF knob1Push == 1
    ASS knob1Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob1Turn knob1Turn
    # END TEST
  END
  IF knob2Push == 1
    ASS knob2Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob2Turn knob2Turn
    # END TEST
  END
  IF knob3Push == 1
    ASS knob3Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob3Turn knob3Turn
    # END TEST
  END
  IF knob4Push == 1
    ASS knob4Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob4Turn knob4Turn
    # END TEST
  END
  IF knob5Push == 1
    ASS knob5Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob5Turn knob5Turn
    # END TEST
  END
  IF knob6Push == 1
    ASS knob6Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob6Turn knob6Turn
    # END TEST
  END
  IF knob7Push == 1
    ASS knob7Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob7Turn knob7Turn
    # END TEST
  END
  IF knob8Push == 1
    ASS knob8Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob8Turn knob8Turn
    # END TEST
  END
  # TEST
  # ensure tempo lighting functions as expected
  # END TEST
  # if knob is 1 (tempo)
  # knob is sensitive down to one notch
  IF M1 == 1
    # if tempo mode is 0
    IF tempoModeMod == 0
      # NOTE because lighting does actually change the CC value, we need to handle this based on lighting
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= 6
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $13 F7 +F
          IF knob1Push == 0
            ASS L0 = 1
          END
        END
      END
      # if knob value is 14
      IF M2 >= $14
        IF M2 <= $19
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $26 F7 +F
          IF knob1Push == 0
            ASS L0 = $14
          END
        END
      END
      # if knob value is 27
      IF M2 >= $27
        IF M2 <= $32
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $39 F7 +F
          IF knob1Push == 0
            ASS L0 = $27
          END
        END
      END
      # if knob value is 40
      IF M2 >= $40
        IF M2 <= $45
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $52 F7 +F
          IF knob1Push == 0
            ASS L0 = $40
          END
        END
      END
      # if knob value is 53
      IF M2 >= $53
        IF M2 <= $58
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $65 F7 +F
          IF knob1Push == 0
            ASS L0 = $53
          END
        END
      END
      # if knob value is 66
      IF M2 >= $66
        IF M2 <= $71
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $78 F7 +F
          IF knob1Push == 0
            ASS L0 = $66
          END
        END
      END
      # if knob value is 79
      IF M2 >= $79
        IF M2 <= $84
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $91 F7 +F
          IF knob1Push == 0
            ASS L0 = $79
          END
        END
      END
      # if knob value is 92
      IF M2 >= $92
        IF M2 <= $97
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $104 F7 +F
          IF knob1Push == 0
            ASS L0 = $92
          END
        END
      END
      # if knob value is 105
      IF M2 >= $105
        IF M2 <= $110
          ASS tempoPulse = 2
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $117 F7 +F
          IF knob1Push == 0
            ASS L0 = $105
          END
        END
      END
      # if knob value is 118
      IF M2 >= $118
        IF M2 <= $122
          ASS tempoPulse = 1
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $127 F7 +F
          IF knob1Push == 0
            ASS L0 = $118
          END
        END
      END
      # turning down
      # if knob value is 12
      IF M2 >= 7
        IF M2 <= $12
          ASS tempoPulse = 48
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $0 F7 +F
          IF knob1Push == 0
            ASS L0 = $12
          END
        END
      END
      # if knob value is 25
      IF M2 >= $20
        IF M2 <= $25
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $13 F7 +F
          IF knob1Push == 0
            ASS L0 = $25
          END
        END
      END
      # if knob value is 38
      IF M2 >= $33
        IF M2 <= $38
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $26 F7 +F
          IF knob1Push == 0
            ASS L0 = $38
          END
        END
      END
      # if knob value is 51
      IF M2 >= $46
        IF M2 <= $51
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $39 F7 +F
          IF knob1Push == 0
            ASS L0 = $51
          END
        END
      END
      # if knob value is 64
      IF M2 >= $59
        IF M2 <= $64
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $52 F7 +F
          IF knob1Push == 0
            ASS L0 = $64
          END
        END
      END
      # if knob value is 77
      IF M2 >= $72
        IF M2 <= $77
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $65 F7 +F
          IF knob1Push == 0
            ASS L0 = $77
          END
        END
      END
      # if knob value is 90
      IF M2 >= $85
        IF M2 <= $90
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $78 F7 +F
          IF knob1Push == 0
            ASS L0 = $90
          END
        END
      END
      # if knob value is 103
      IF M2 >= $98
        IF M2 <= $103
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $91 F7 +F
          IF knob1Push == 0
            ASS L0 = $103
          END
        END
      END
      # if knob value is 116
      IF M2 >= $111
        IF M2 <= $116
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $104 F7 +F
          IF knob1Push == 0
            ASS L0 = $116
          END
        END
      END
      # if knob value is 126
      IF M2 >= $123
        IF M2 <= $126
          ASS tempoPulse = 2
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $117 F7 +F
          IF knob1Push == 0
            ASS L0 = $126
          END
        END
      END
    END

    # if tempo mode is 1
    IF tempoModeMod == 1
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= $12
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = 1
          END
        END
      END
      # if knob value is 26
      IF M2 >= $26
        IF M2 <= $37
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $26
          END
        END
      END
      # if knob value is 51
      IF M2 >= $51
        IF M2 <= $62
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $51
          END
        END
      END
      # if knob value is 76
      IF M2 >= $76
        IF M2 <= $87
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $76
          END
        END
      END
      # if knob value is 101
      IF M2 >= $101
        IF M2 <= $112
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $127 F7 +F
          IF knob1Push == 0
            ASS L0 = $101
          END
        END
      END
      # turning down
      # if knob value is 24
      IF M2 >= $13
        IF M2 <= $24
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 00 F7 +F
          ASS L0 = $24
        END
      END
      # if knob value is 49
      IF M2 >= $38
        IF M2 <= $49
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = $49
          END
        END
      END
      # if knob value is 74
      IF M2 >= $63
        IF M2 <= $74
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $74
          END
        END
      END
      # if knob value is 99
      IF M2 >= $88
        IF M2 <= $99
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $99
          END
        END
      END
      # if knob value is 126
      IF M2 >= $113
        IF M2 <= $126
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $126
          END
        END
      END
    END

    # if tempo mode is 2
    IF tempoModeMod == 2
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= $12
          ASS tempoPulse = 48
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = 1
          END
        END
      END
      # if knob value is 26
      IF M2 >= $26
        IF M2 <= $37
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $26
          END
        END
      END
      # if knob value is 51
      IF M2 >= $51
        IF M2 <= $62
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $51
          END
        END
      END
      # if knob value is 76
      IF M2 >= $76
        IF M2 <= $87
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $76
          END
        END
      END
      # if knob value is 101
      IF M2 >= $101
        IF M2 <= $112
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $127 F7 +F
          IF knob1Push == 0
            ASS L0 = $101
          END
        END
      END
      # turning down
      # if knob value is 24
      IF M2 >= $13
        IF M2 <= $24
          ASS tempoPulse = 96
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 00 F7 +F
          ASS L0 = $24
        END
      END
      # if knob value is 49
      IF M2 >= $38
        IF M2 <= $49
          ASS tempoPulse = 48
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = $49
          END
        END
      END
      # if knob value is 74
      IF M2 >= $63
        IF M2 <= $74
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $74
          END
        END
      END
      # if knob value is 99
      IF M2 >= $88
        IF M2 <= $99
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $99
          END
        END
      END
      # if knob value is 126
      IF M2 >= $113
        IF M2 <= $126
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $126
          END
        END
      END
    END

    # if tempo mode is 3
    IF tempoModeMod == 3
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= $12
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = 1
          END
        END
      END
      # if knob value is 26
      IF M2 >= $26
        IF M2 <= $37
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $26
          END
        END
      END
      # if knob value is 51
      IF M2 >= $51
        IF M2 <= $62
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $51
          END
        END
      END
      # if knob value is 76
      IF M2 >= $76
        IF M2 <= $87
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $76
          END
        END
      END
      # if knob value is 101
      IF M2 >= $101
        IF M2 <= $112
          ASS tempoPulse = 2
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $127 F7 +F
          IF knob1Push == 0
            ASS L0 = $101
          END
        END
      END
      # turning down
      # if knob value is 24
      IF M2 >= $13
        IF M2 <= $24
          ASS tempoPulse = 72
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 00 F7 +F
          ASS L0 = $24
        END
      END
      # if knob value is 49
      IF M2 >= $38
        IF M2 <= $49
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = $49
          END
        END
      END
      # if knob value is 74
      IF M2 >= $63
        IF M2 <= $74
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $74
          END
        END
      END
      # if knob value is 99
      IF M2 >= $88
        IF M2 <= $99
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $99
          END
        END
      END
      # if knob value is 126
      IF M2 >= $113
        IF M2 <= $126
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F FF BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $126
          END
        END
      END
    END
    # TEST
    # ensure tempoPulse aligns with tempoMode
    LOG tempoPulse tempoPulse
    LOG L0_SET
    LOG L0 L0
    # END TEST
  END
  # if knob is 2 (gate)
  # starting points: max will be ~5 seconds (5000), min will be .1 seconds (100)
  # 2.5 seconds should be enough to handle 96 pulses at 120 bpm,  but slower bpm's can move up to 5 seconds
  # overall: 0-127 (*2) (*5) (*10) (*20) (*40)
  IF M1 == 2
    MATH gate = M2 * gateFactor
    MATH gateTemp = gate / 100
    # SEND SYSEX
    SEND F0 CC 07 gateTemp gate F7 +F
    # END SYSEX
    IF knob2Push == 0
      ASS L1 = M2
    END
    # TEST
    # ensure gate aligns with gate
    # ensure gateFactor is correct
    LOG gate gate
    LOG gateFactor gateFactor
    LOG L1 L1
    # END TEST
  END
  # if knob is 3 (velocity)
  IF M1 == 3
    ASS velocity = M2
    # SEND SYSEX
    SEND F0 C1 08 velocity F7 +F
    # END SYSEX
    IF knob3Push == 0
      ASS L2 = M2
    END
    # TEST
    # ensure velocity aligns with velocity
    LOG velocity velocity
    LOG L2 L2
    # END TEST
  END
  # if knob is 4 (lfo rate)
  IF M1 == 4
    ASS lfoRate = M2
    # SEND SYSEX
    SEND F0 01 EE BA XX lfoRate F7 +F # TODO
    # END SYSEX
    IF knob4Push == 0
      ASS L3 = M2
    END
    # TEST
    # ensure lfoRate aligns with lfoRate
    LOG lfoRate lfoRate
    LOG L3 L3
    # END TEST
  END
  # if knob is 5 (lfo depth)
  IF M1 == 5
    ASS lfoDepth = M2
    # SEND SYSEX
    SEND F0 01 EE BA XX lfoDepth F7 +F # TODO
    # END SYSEX
    IF knob5Push == 0
      ASS L4 = M2
    END
    # TEST
    # ensure lfoDepth aligns with lfoDepth
    LOG lfoDepth lfoDepth
    LOG L4 L4
    # END TEST
  END
  # if knob is 6 (drumParam 1)
  IF M1 == 6
    # needs to be sent out
    # assign for push control
    IF knob6Push == 0
      ASS L5 = M2
    END
    # TEST
    LOG L5 L5
    # END TEST
    # if drumParams are 'select'
    IF drumParams == $14 $15 $16
      SEND F0 11 FF channelCC $14 M2 F7
      ASS select1 = M2
    END
    # if drumParams are 'level'
    IF drumParams == $17 $18 $19
      SEND F0 11 FF channelCC $17 M2 F7
      ASS level1 = M2
    END
    # if drumParams are 'attack'
    IF drumParams == $20 $21 $22
      SEND F0 11 FF channelCC $20 M2 F7
      ASS attack1 = M2
    END
    # if drumParams are 'release'
    IF drumParams == $23 $24 $25
      SEND F0 11 FF channelCC $23 M2 F7
      ASS release1 = M2
    END
    # if drumParams are 'pitch'
    IF drumParams == $26 $27 $28
      SEND F0 11 FF channelCC $26 M2 F7
      ASS pitch1 = M2
    END
    # if drumParams are 'modAmount'
    IF drumParams == $29 $30 $31
      SEND F0 11 FF channelCC $29 M2 F7
      ASS modAmount1 = M2
    END
    # if drumParams are 'modRate'
    IF drumParams == $46 $47 $48
      SEND F0 11 FF channelCC $46 M2 F7
      ASS modRate1 = M2
    END
    # if drumParams are 'waveguide'
    IF drumParams == $117 $118 $119
      SEND F0 11 FF channelCC $117 M2 F7
      ASS waveguideDecay = M2
    END
  END
  # if knob is 7 (drumParam 2)
  IF M1 == 7
    # needs to be sent out
    # assign for push control
    IF knob7Push == 0
      ASS L6 = M2
    END
    # TEST
    LOG L6 L6
    # END TEST
    # if drumParams are 'select'
    IF drumParams == $14 $15 $16
      SEND F0 11 FF channelCC $15 M2 F7
      ASS select2 = M2
    END
    # if drumParams are 'level'
    IF drumParams == $17 $18 $19
      SEND F0 11 FF channelCC $18 M2 F7
      ASS level2 = M2
    END
    # if drumParams are 'attack'
    IF drumParams == $20 $21 $22
      SEND F0 11 FF channelCC $21 M2 F7
      ASS attack2 = M2
    END
    # if drumParams are 'release'
    IF drumParams == $23 $24 $25
      SEND F0 11 FF channelCC $24 M2 F7
      ASS release2 = M2
    END
    # if drumParams are 'pitch'
    IF drumParams == $26 $27 $28
      SEND F0 11 FF channelCC $27 M2 F7
      ASS pitch2 = M2
    END
    # if drumParams are 'modAmount'
    IF drumParams == $29 $30 $31
      SEND F0 11 FF channelCC $30 M2 F7
      ASS modAmount2 = M2
    END
    # if drumParams are 'modRate'
    IF drumParams == $46 $47 $48
      SEND F0 11 FF channelCC $47 M2 F7
      ASS modRate2 = M2
    END
    # if drumParams are 'waveguide'
    IF drumParams == $117 $118 $119
      SEND F0 11 FF channelCC $118 M2 F7
      ASS waveguideBody = M2
    END
  END
  # if knob is 8 (drumParam 3)
  IF M1 == 8
    # needs to be sent out
    # assign for push control
    IF knob8Push == 0
      ASS L7 = M2
    END
    # TEST
    LOG L7 L7
    # END TEST
    # if drumParams are 'select'
    IF drumParams == $14 $15 $16
      SEND F0 11 FF channelCC $16 M2 F7
      ASS selectBoth = M2
    END
    # if drumParams are 'level'
    IF drumParams == $17 $18 $19
      SEND F0 11 FF channelCC $19 M2 F7
      ASS levelBoth = M2
    END
    # if drumParams are 'attack'
    IF drumParams == $20 $21 $22
      SEND F0 11 FF channelCC $22 M2 F7
      ASS attackBoth = M2
    END
    # if drumParams are 'release'
    IF drumParams == $23 $24 $25
      SEND F0 11 FF channelCC $25 M2 F7
      ASS releaseBoth = M2
    END
    # if drumParams are 'pitch'
    IF drumParams == $26 $27 $28
      SEND F0 11 FF channelCC $28 M2 F7
      ASS pitchBoth = M2
    END
    # if drumParams are 'modAmount'
    IF drumParams == $29 $30 $31
      SEND F0 11 FF channelCC $31 M2 F7
      ASS modAmountBoth = M2
    END
    # if drumParams are 'modRate'
    IF drumParams == $46 $47 $48
      SEND F0 11 FF channelCC $48 M2 F7
      ASS modRateBoth = M2
    END
    # if drumParams are 'waveguide'
    IF drumParams == $117 $118 $119
      SEND F0 11 FF channelCC $119 M2 F7
      ASS waveguideTune = M2
    END
  END
  # TEST
  # ensure correct drumParam sent on knob turn
  IF M1 > 5
    LOG drumParams1 J10
    LOG drumParams2 J11
    LOG drumParamsBoth J12
    LOG M1 M1
  END
  # END TEST
END

# assign values to L array for push control
IF MT == B0
  IF M1 < 9
    ASS LM1 = M2
    # TEST
    LOG LM1 LM1
    # END TEST
  END
END

BX = XX +B
NX = XX +B
