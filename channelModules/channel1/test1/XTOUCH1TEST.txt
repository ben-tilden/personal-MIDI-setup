# xtouch test code

# TEST NOTES
# TODO waveGuide send not implemented anywhere
# NOTE on first knob1Push, there may still be one unconfirmed bug where the knob lighting resets to zero when it should be reset to $14 (or whatever lighting corresponds to 24)










# xtouch mini

# this file builds out the arpeggiator / drum roll for each channel
# because tempo will be determined by ableton link midi clock, the first knob will determine which clock messages are heeded and which are ignored
# link runs clock at 24 ppqn, or 24 pulses per quarter note / beat
# there are multiple tempos, determined by knob 1 on the xtouch:
#
# 0. full range - this is as many tempos as we can fit
# 8/1 - 48
# 6/1 - 36
# 4/1 - 24
# 3/1 - 18
# 2/1 - 12
# 3/2 - 9
# 1/1 - 6
# 2/3 - 4
# 1/2 - 3
# 1/3 - 2
# 1/6 - 1
#
# 1. beatmaker - based on the default tempos of the drum roll in beatmaker pro - slightly fewer options than full range
# 4/1 - 24
# 2/1 - 12
# 3/2 - 9
# 1/1 - 6
# 2/3 - 4
# 1/2 - 3
#
# 2. factor of two - any tempo that is a factor of 2 of a 4/4 beat
# 16/1 - 96
# 8/1 - 48
# 4/1 - 24
# 2/1 - 12
# 1/1 - 6
# 1/2 - 3
#
# 3. factor of three - any tempo that is a factor of 3 of a 4/4 beat
# 12/1 - 72
# 6/1 - 36
# 3/1 - 18
# 3/2 - 9
# 2/3 - 4
# 1/3 - 2
#
# For the first, we have 11 modes, which translates to around 11.5 per
# 12 11 11 12 12 12 12 12 11 11 12
# For the second, we have 6 modes, which translates to around 21 per
# 22 21 21 21 21 22
# button 1 will decrease arp type / turn on set phrase mode
# button 9 will increase arp type / add rest as part of phrase
# button 2 will toggle arp / phrase
# button 10 will turn arp / phrase on or off

# NOTE compatible and incompatible functionality
# groupPushKnob and pushKnob:
  # with groupPushKnob on, pushKnob will not do anything
  # with pushKnob on, groupPushKnob will prevent knob release from doing anything
# groupPushKnob / pushKnob and drumParams
  # with either on (knob # 6, 7, and 8 for pushKnob), drumParams will not be able to be changed
# groupPushKnob / pushKnob and lfoNum
  # with either on (knob # 4 for pushKnob), lfoNum will not be able to be changed

IF LOAD

  # constant

  ALIAS 00 channelVal # channel specific (obviously)

  # local

  ALIAS I0 channelCC
  ALIAS I1 channelNoteOn
  ALIAS I2 channelNoteOff
  ALIAS I3 tempoMode
  ALIAS I4 tempoModeMod
  ALIAS I5 arpValueMode
  ALIAS I6 previousDrumVal
  ALIAS I7 gateMode
  ALIAS I8 gateModeMod
  ALIAS I9 gateFactor
  ALIAS IA gateTemp
  ALIAS IB setLfo
  ALIAS IC lfo1Type
  ALIAS ID lfo2Type
  ALIAS IE lfo3Type
  ALIAS IF lfo4Type
  ALIAS I10 lfoNum
  ALIAS I11 resetIndex
  ALIAS I12 resetIndexMinusOne
  ALIAS I13 knob1Push
  ALIAS I14 knob1Turn
  ALIAS I15 knob2Push
  ALIAS I16 knob2Turn
  ALIAS I17 knob3Push
  ALIAS I18 knob3Turn
  ALIAS I19 knob4Push
  ALIAS I1A knob4Turn
  ALIAS I1B knob5Push
  ALIAS I1C knob5Turn
  ALIAS I1D knob6Push
  ALIAS I1E knob6Turn
  ALIAS I1F knob7Push
  ALIAS I20 knob7Turn
  ALIAS I21 knob8Push
  ALIAS I22 knob8Turn
  ALIAS I23 knobTemp
  ALIAS I24 groupKnobPush

  # sysex

  ALIAS J1 arpPhraseToggle
  ALIAS J2 arpPhraseOnOffToggle
  ALIAS J3 tempoPulse
  ALIAS J4 gate
  ALIAS J5 velocity
  ALIAS J6 arpValueModeMod
  ALIAS J7 setPhrase
  ALIAS JB latch
  ALIAS JC padMode
  ALIAS JD lfoNumMod
  ALIAS JE lfoKnob
  ALIAS J10 lfoTypeMod
  ALIAS J15 arpModeSwitched # NOTE gateOpened
  #ALIAS J20 lfo1Type
  ALIAS J21 lfo1Rate
  ALIAS J22 lfo1Depth
  #ALIAS J23 lfo2Type
  ALIAS J24 lfo2Rate
  ALIAS J25 lfo2Depth
  #ALIAS J26 lfo3Type
  ALIAS J27 lfo3Rate
  ALIAS J28 lfo3Depth
  #ALIAS J29 lfo4Type
  ALIAS J2A lfo4Rate
  ALIAS J2B lfo4Depth

  # channel specific

  ALIAS K0 select1
  ALIAS K1 select2
  ALIAS K2 selectBoth
  ALIAS K3 level1
  ALIAS K4 level2
  ALIAS K5 levelBoth
  ALIAS K6 attack1
  ALIAS K7 attack2
  ALIAS K8 attackBoth
  ALIAS K9 release1
  ALIAS KA release2
  ALIAS KB releaseBoth
  ALIAS KC pitch1
  ALIAS KD pitch2
  ALIAS KE pitchBoth
  ALIAS KF modAmount1
  ALIAS K10 modAmount2
  ALIAS K11 modAmountBoth
  ALIAS K12 modRate1
  ALIAS K13 modRate2
  ALIAS K14 modRateBoth
  ALIAS K15 waveguideDecay
  ALIAS K16 waveguideBody
  ALIAS K17 waveguideTune
  ALIAS K18 pitchQuantize
  ALIAS K19 waveguideToggle
  ALIAS K1A drumParams

  # assign local

  # these are only defined here, since they are essentially constants - will not change past this
  MATH channelCC = B0 + channelVal
  MATH channelNoteOn = 90 + channelVal
  MATH channelNoteOff = 80 + channelVal

  # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
  ASS tempoMode = 0
  # NOTE if this isn't reset on each 'install', then it's technically possible it could decrease/increase to the value min/max
  ASS arpValueMode = 8004
  # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
  ASS gateMode = 0
  # NOTE if these aren't reset on each 'install', then it's technically possible they could increase to the value max
  ASS lfo1Type = 0
  ASS lfo2Type = 0
  ASS lfo3Type = 0
  ASS lfo4Type = 0
  # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
  ASS lfoNum = 0
  # NOTE this is set to 'select' on initial load
  ASS previousDrumVal = 04
  ASS gateFactor = 1

  ASS knob1Push = 0
  ASS knob1Turn = 0
  ASS knob2Push = 0
  ASS knob2Turn = 0
  ASS knob3Push = 0
  ASS knob3Turn = 0
  ASS knob4Push = 0
  ASS knob4Turn = 0
  ASS knob5Push = 0
  ASS knob5Turn = 0
  ASS knob6Push = 0
  ASS knob6Turn = 0
  ASS knob7Push = 0
  ASS knob7Turn = 0
  ASS knob8Push = 0
  ASS knob8Turn = 0
  ASS groupKnobPush = 0

  # NOTE L array is used for lighting storage for push control - these are init values
  ASS L0 = 0E 00 64 00 00 00 00 00 # TODO will need to change for channel specific knobs 8+

  # assign channel specific

  ASS K0 = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0E 0F 10

END

# sysex reception

IF M0 == F0

  IF M2 == 07
    ASS setPhrase = M3
    # TEST
    # ensure xtouch receives setPhrase
    LOG setPhrase_SYSEX_RECEIVED setPhrase
    # END TEST
    # Turn off setPhrase light when sysex received
    IF setPhrase == 0
      SEND F0 0F EE 90 00 00 F7 +F
    END
    BLOCK
    EXIT
  END

  IF M2 == 15
    ASS arpModeSwitched = M3
    # TEST
    # ensure xtouch receives gateOpened
    LOG gateOpened_SYSEX_RECEIVED arpModeSwitched
    # END TEST
    BLOCK
    EXIT
  END

  # Turn off lights when init sysex received
  IF M2 == 17 00
    # TEST
    # uncomment to turn on all lights on xtouch
    # IF LOAD
    #   ALIAS I0 resetIndex
    #   ALIAS I1 resetIndexMinusOne
    #   ASS resetIndex = 1
    #   WHILE resetIndex < 11
    #     MATH resetIndexMinusOne = resetIndex - 1
    #     # these should only go up to eight
    #     IF resetIndex < 9
    #       # reset lighting on knobs
    #       SEND F0 0F EE BA resetIndex 7F F7 +F
    #     END
    #     # reset button lighting
    #     SEND F0 0F EE 90 resetIndexMinusOne 01 F7 +F
    #     MATH resetIndex = resetIndex + 1
    #   END
    # END
    # END TEST
    ASS resetIndex = 1
    # loop until this is done for all sixteen buttons
    WHILE resetIndex < 11
      MATH resetIndexMinusOne = resetIndex - 1
      # these should only go up to eight
      IF resetIndex < 9
        # reset lighting on knobs
        SEND F0 0F EE BA resetIndex 00 F7 +F
        # set lighting to 'pan'
        SEND F0 0F EE B0 resetIndex 02 F7 +F
      END
      # reset button lighting
      SEND F0 0F EE 90 resetIndexMinusOne 00 F7 +F
      MATH resetIndex = resetIndex + 1
    END

    # (re)set sysex variables
    # NOTE could move this also into the init load for completeness (or remove local from init load?)

    ASS arpPhraseToggle = 0
    ASS arpPhraseOnOffToggle = 0
    ASS tempoPulse = 24
    ASS gate = 0
    ASS velocity = 64
    ASS arpValueModeMod = 0
    ASS setPhrase = 0
    ASS latch = 0
    ASS padMode = 0
    ASS lfoNumMod = 0
    ASS lfoKnob = 6
    ASS lfoTypeMod = 0
    ASS arpModeSwitched = 0
    ASS lfo1Rate = 0
    ASS lfo1Depth = 0
    ASS lfo2Rate = 0
    ASS lfo2Depth = 0
    ASS lfo3Rate = 0
    ASS lfo3Depth = 0
    ASS lfo4Rate = 0
    ASS lfo4Depth = 0

    # reset necessary local variables
    # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
    ASS tempoMode = 0
    # NOTE if this isn't reset on each 'install', then it's technically possible it could decrease/increase to the value min/max
    ASS arpValueMode = 8004
    # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
    ASS gateMode = 0
    # NOTE if these aren't reset on each 'install', then it's technically possible they could increase to the value max
    ASS lfo1Type = 0
    ASS lfo2Type = 0
    ASS lfo3Type = 0
    ASS lfo4Type = 0
    # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
    ASS lfoNum = 0
    # NOTE this is set to 'select' on initial load
    ASS previousDrumVal = 04
    ASS gateFactor = 1

    ASS knob1Push = 0
    ASS knob1Turn = 0
    ASS knob2Push = 0
    ASS knob2Turn = 0
    ASS knob3Push = 0
    ASS knob3Turn = 0
    ASS knob4Push = 0
    ASS knob4Turn = 0
    ASS knob5Push = 0
    ASS knob5Turn = 0
    ASS knob6Push = 0
    ASS knob6Turn = 0
    ASS knob7Push = 0
    ASS knob7Turn = 0
    ASS knob8Push = 0
    ASS knob8Turn = 0
    ASS groupKnobPush = 0

    # NOTE L array is used for lighting storage for push control - these are init values
    ASS L0 = 0E 00 64 00 00 00 00 00 # TODO will need to change for channel specific knobs 8+

    # reset channel specific

    ASS K0 = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0E 0F 10

    # send init tempo lighting
    SEND F0 0F EE BA 01 $26 F7 +F
    # send init velocity lighting
    SEND F0 0F EE BA 03 $100 F7 +F
    # send init drum lighting
    SEND F0 0F EE 90 04 01 F7 +F

    # TEST
    # ensure lights turn off on init
    LOG LIGHTS_OFF_SYSEX_RECEIVED
    LOG RESET_SYSEX_RECEIVED
    # END TEST
    BLOCK
    EXIT
  END

  # Send lights when channel change sysex received
  IF M2 == 19 CC

    ASS resetIndex = 0
    # need to reset lights from other channel
    # loop until this is done for all sixteen buttons
    WHILE resetIndex < 10
      # reset button lighting
      SEND F0 0F EE 90 resetIndex 00 F7 +F
      MATH resetIndex = resetIndex + 1
    END

    IF setPhrase == 1
      SEND F0 0F EE 90 00 01 F7 +F
    END
    IF arpPhraseToggle == 1
      SEND F0 0F EE 90 01 01 F7 +F
    END
    IF arpPhraseOnOffToggle == 1
      SEND F0 0F EE 90 09 01 F7 +F
    END
    IF latch == 1
      SEND F0 0F EE 90 02 01 F7 +F
    END
    # NOTE because setLFO is a temporary and restrictive state, it should reset on channel switching
    IF setLfo == 1
      ASS setLfo = 0
    END
    # NOTE knobPush in general is complicated - pushing knobs while switching channel will almost certainly break something (esp with setLFO on), since knobPush will not be reset on switch. Should resolve itself on the next knobPush for that number and channel, but might be confusing to see
    # because switching channel is designed to use two hands, hoping this won't come up
    # would be fairly simple to resolve, just possibly a little convoluted (see conditionals when groupPushKnob is turned off; these would likely just be copied and pasted here)
    IF groupKnobPush == 1
      SEND F0 0F EE 90 0B 01 F7 +F
    END
    IF padMode == 1
      SEND F0 0F EE 90 03 01 F7 +F
    END

    # TEST
    # ensure setPhrase, arpPhraseToggle, arpPhraseToggleOnOff, latch, lfo, padMode, groupKnobPush lighting resets
    LOG CHANNEL_SWITCH_LIGHTING
    LOG setPhrase setPhrase
    LOG arpPhraseToggle arpPhraseToggle
    LOG arpPhraseOnOffToggle arpPhraseOnOffToggle
    LOG latch latch
    LOG setLfo setLfo
    LOG padMode padMode
    LOG groupKnobPush groupKnobPush
    LOG previousDrumVal previousDrumVal
    # END TEST

    # send tempo lighting
    IF tempoModeMod == 0
      IF tempoPulse == 48
        SEND F0 0F EE BA 01 $0 F7 +F
      END
      IF tempoPulse == 36
        SEND F0 0F EE BA 01 $13 F7 +F
      END
      IF tempoPulse == 24
        SEND F0 0F EE BA 01 $26 F7 +F
      END
      IF tempoPulse == 18
        SEND F0 0F EE BA 01 $39 F7 +F
      END
      IF tempoPulse == 12
        SEND F0 0F EE BA 01 $52 F7 +F
      END
      IF tempoPulse == 9
        SEND F0 0F EE BA 01 $65 F7 +F
      END
      IF tempoPulse == 6
        SEND F0 0F EE BA 01 $78 F7 +F
      END
      IF tempoPulse == 4
        SEND F0 0F EE BA 01 $91 F7 +F
      END
      IF tempoPulse == 3
        SEND F0 0F EE BA 01 $104 F7 +F
      END
      IF tempoPulse == 2
        SEND F0 0F EE BA 01 $117 F7 +F
      END
      IF tempoPulse == 1
        SEND F0 0F EE BA 01 $127 F7 +F
      END
    END
    IF tempoModeMod == 1
      IF tempoPulse == 24
        SEND F0 0F EE BA 01 00 F7 +F
      END
      IF tempoPulse == 12
        SEND F0 0F EE BA 01 $25 F7 +F
      END
      IF tempoPulse == 9
        SEND F0 0F EE BA 01 $50 F7 +F
      END
      IF tempoPulse == 6
        SEND F0 0F EE BA 01 $75 F7 +F
      END
      IF tempoPulse == 4
        SEND F0 0F EE BA 01 $100 F7 +F
      END
      IF tempoPulse == 3
        SEND F0 0F EE BA 01 $127 F7 +F
      END
    END
    IF tempoModeMod == 2
      IF tempoPulse == 96
        SEND F0 0F EE BA 01 00 F7 +F
      END
      IF tempoPulse == 48
        SEND F0 0F EE BA 01 $25 F7 +F
      END
      IF tempoPulse == 24
        SEND F0 0F EE BA 01 $50 F7 +F
      END
      IF tempoPulse == 12
        SEND F0 0F EE BA 01 $75 F7 +F
      END
      IF tempoPulse == 6
        SEND F0 0F EE BA 01 $100 F7 +F
      END
      IF tempoPulse == 3
        SEND F0 0F EE BA 01 $127 F7 +F
      END
    END
    IF tempoModeMod == 3
      IF tempoPulse == 72
        SEND F0 0F EE BA 01 00 F7 +F
      END
      IF tempoPulse == 36
        SEND F0 0F EE BA 01 $25 F7 +F
      END
      IF tempoPulse == 18
        SEND F0 0F EE BA 01 $50 F7 +F
      END
      IF tempoPulse == 9
        SEND F0 0F EE BA 01 $75 F7 +F
      END
      IF tempoPulse == 4
        SEND F0 0F EE BA 01 $100 F7 +F
      END
      IF tempoPulse == 2
        SEND F0 0F EE BA 01 $127 F7 +F
      END
    END

    # send gate lighting
    MATH gateTemp = gate / gateFactor
    SEND F0 0F EE BA 02 gateTemp F7 +F
    
    # send velocity lighting
    SEND F0 0F EE BA 03 velocity F7 +F

    # send lfo rate lighting
    IF lfoNumMod == 0
      SEND F0 0F EE BA 04 lfo1Rate F7 +F
    END
    IF lfoNumMod == 1
      SEND F0 0F EE BA 04 lfo2Rate F7 +F
    END
    IF lfoNumMod == 2
      SEND F0 0F EE BA 04 lfo3Rate F7 +F
    END
    IF lfoNumMod == 3
      SEND F0 0F EE BA 04 lfo4Rate F7 +F
    END

    # send lfo depth lighting
    IF lfoNumMod == 0
      SEND F0 0F EE BA 05 lfo1Depth F7 +F
    END
    IF lfoNumMod == 1
      SEND F0 0F EE BA 05 lfo2Depth F7 +F
    END
    IF lfoNumMod == 2
      SEND F0 0F EE BA 05 lfo3Depth F7 +F
    END
    IF lfoNumMod == 3
      SEND F0 0F EE BA 05 lfo4Depth F7 +F
    END

    # TEST
    # ensure knob lighting resets
    LOG CHANNEL_SWITCH_LIGHTING
    LOG tempoPulse tempoPulse
    LOG gate gate
    LOG velocity velocity
    IF lfoNumMod == 0
      LOG lfo1Rate lfo1Rate
      LOG lfo1Depth lfo1Depth
    END
    IF lfoNumMod == 1
      LOG lfo2Rate lfo2Rate
      LOG lfo2Depth lfo2Depth
    END
    IF lfoNumMod == 2
      LOG lfo3Rate lfo3Rate
      LOG lfo3Depth lfo3Depth
    END
    IF lfoNumMod == 3
      LOG lfo4Rate lfo4Rate
      LOG lfo4Depth lfo4Depth
    END
    IF drumParams == $14
      LOG select1 select1
      LOG select2 select2
      LOG selectBoth selectBoth
    END
    IF drumParams == $17
      LOG level1 level1
      LOG level2 level2
      LOG levelBoth levelBoth
    END
    IF drumParams == $20
      LOG attack1 attack1
      LOG attack2 attack2
      LOG attackBoth attackBoth
    END
    IF drumParams == $23
      LOG release1 release1
      LOG release2 release2
      LOG releaseBoth releaseBoth
    END
    IF drumParams == $26
      LOG pitch1 pitch1
      LOG pitch2 pitch2
      LOG pitchBoth pitchBoth
    END
    IF drumParams == $29
      LOG modAmount1 modAmount1
      LOG modAmount2 modAmount2
      LOG modAmountBoth modAmountBoth
    END
    IF drumParams == $46
      LOG modRate1 modRate1
      LOG modRate2 modRate2
      LOG modRateBoth modRateBoth
    END
    IF drumParams == $117
      LOG waveguideDecay waveguideDecay
      LOG waveguideBody waveguideBody
      LOG waveguideTune waveguideTune
    END
    # END TEST

    # channel specific

    # send drum lighting
    SEND F0 0F EE 90 previousDrumVal 01 F7 +F

    IF drumParams == $14
      SEND F0 0F EE BA 06 select1 F7 +F
      SEND F0 0F EE BA 07 select2 F7 +F
      SEND F0 0F EE BA 08 selectBoth F7 +F
    END
    IF drumParams == $17
      SEND F0 0F EE BA 06 level1 F7 +F
      SEND F0 0F EE BA 07 level2 F7 +F
      SEND F0 0F EE BA 08 levelBoth F7 +F
    END
    IF drumParams == $20
      SEND F0 0F EE BA 06 attack1 F7 +F
      SEND F0 0F EE BA 07 attack2 F7 +F
      SEND F0 0F EE BA 08 attackBoth F7 +F
    END
    IF drumParams == $23
      SEND F0 0F EE BA 06 release1 F7 +F
      SEND F0 0F EE BA 07 release2 F7 +F
      SEND F0 0F EE BA 08 releaseBoth F7 +F
    END
    IF drumParams == $26
      SEND F0 0F EE BA 06 pitch1 F7 +F
      SEND F0 0F EE BA 07 pitch2 F7 +F
      SEND F0 0F EE BA 08 pitchBoth F7 +F
    END
    IF drumParams == $29
      SEND F0 0F EE BA 06 modAmount1 F7 +F
      SEND F0 0F EE BA 07 modAmount2 F7 +F
      SEND F0 0F EE BA 08 modAmountBoth F7 +F
    END
    IF drumParams == $46
      SEND F0 0F EE BA 06 modRate1 F7 +F
      SEND F0 0F EE BA 07 modRate2 F7 +F
      SEND F0 0F EE BA 08 modRateBoth F7 +F
    END
    IF drumParams == $117
      SEND F0 0F EE BA 06 waveguideDecay F7 +F
      SEND F0 0F EE BA 07 waveguideBody F7 +F
      SEND F0 0F EE BA 08 waveguideTune F7 +F
    END

    # end channel specific

    # TEST
    # ensure xtouch lighting changes properly when channel changed
    LOG LIGHTS_SYSEX_RECEIVED
    LOG CHANNEL_CHANGE_SYSEX_RECEIVED
    # END TEST
    BLOCK
    EXIT
  END

END

# end sysex reception

# if it is a button push
IF MT == 90

  # don't assign if setting lfo - this prevents push control issues when setting lfo
  # TEST
  # ensure push control does not work when setLfo is on
  IF setLfo == 1
    IF M1 < 8
      LOG NO_PUSH_CONTROL
      LOG setLfo_ON
    END
  END
  # END TEST
  IF setLfo == 0
    # assign knob1Push to true when knob1 is pushed - for push control
    IF M1 == 0
      ASS knob1Push = 1
      # TEST
      # ensure knobPush turned on accordingly
      LOG knob1Push knob1Push
      # END TEST
    END

    # assign knob2Push to true when knob2 is pushed - for push control
    IF M1 == 1 
      ASS knob2Push = 1
      # TEST
      # ensure knobPush turned on accordingly
      LOG knob2Push knob2Push
      # END TEST
    END

    # assign knob3Push to true when knob3 is pushed - for push control
    IF M1 == 2
      ASS knob3Push = 1
      # TEST
      # ensure knobPush turned on accordingly
      LOG knob3Push knob3Push
      # END TEST
    END

    # assign knob4Push to true when knob4 is pushed - for push control
    IF M1 == 3
      ASS knob4Push = 1
      # TEST
      # ensure knobPush turned on accordingly
      LOG knob4Push knob4Push
      # END TEST
    END

    # assign knob5Push to true when knob5 is pushed - for push control
    IF M1 == 4
      ASS knob5Push = 1
      # TEST
      # ensure knobPush turned on accordingly
      LOG knob5Push knob5Push
      # END TEST
    END

    # assign knob6Push to true when knob6 is pushed - for push control
    IF M1 == 5
      ASS knob6Push = 1
      # TEST
      # ensure knobPush turned on accordingly
      LOG knob6Push knob6Push
      # END TEST
    END

    # assign knob7Push to true when knob7 is pushed - for push control
    IF M1 == 6
      ASS knob7Push = 1
      # TEST
      # ensure knobPush turned on accordingly
      LOG knob7Push knob7Push
      # END TEST
    END

    # assign knob8Push to true when knob8 is pushed - for push control
    IF M1 == 7
      ASS knob8Push = 1
      # TEST
      # ensure knobPush turned on accordingly
      LOG knob8Push knob8Push
      # END TEST
    END
  END

  # if it is a button 1 push
  IF M0 == 9A 08 7F
    # if arp then increase variable
    IF arpPhraseToggle == 0
      MATH arpValueMode = arpValueMode + 1
      # set value mode to variable modulo 12
      MATH arpValueModeMod = arpValueMode % C
      # SEND SYSEX
      SEND F0 C1 06 arpValueModeMod F7 +F
      # END SYSEX
      # NOTE uncommenting this and adding sysex makes clockNum, isOctave, and arpIndex reset whenever the arpMode changes
      # ASS arpModeSwitched = 1
    # if phrase then toggle setPhrase
    ELSE
      IF setPhrase == 0
        ASS setPhrase = 1
        # SEND SYSEX
        SEND F0 11 07 setPhrase F7 +F
        # END SYSEX
      ELSE
        ASS setPhrase = 0
        # SEND SYSEX
        SEND F0 11 07 setPhrase F7 +F
        # END SYSEX
      END
    END
    # TEST
    # ensure arpValueModeMod changes accordingly or setPhrase changes
    LOG arpValueMode arpValueModeMod
    LOG setPhrase setPhrase
    # END TEST
  END

  # if it is a button 9 push
  IF M0 == 9A 10 7F
    # if arp then decrease variable
    IF arpPhraseToggle == 0
      MATH arpValueMode = arpValueMode - 1
      # set value mode to variable modulo 12
      MATH arpValueModeMod = arpValueMode % C
      # SEND SYSEX
      SEND F0 C1 06 arpValueModeMod F7 +F
      # END SYSEX
    # if phrase then add rest to phrase sequence
    ELSE
      IF setPhrase == 1
        SEND F0 11 16 2E F7 +F
        # NOTE not currently planning on handling this, but there may is likely a race condition between rest and note that could cause issues
        # TEST
        # ensure rest sent
        LOG REST_SYSEX_SENT
        # END TEST
      END
    END
    # TEST
    # ensure arpValueModeMod changes accordingly
    LOG arpValueMode arpValueModeMod
    # END TEST
  END

  # if it is a button 2 push toggle arp / phrase
  IF M1 == 09 7F
    IF arpPhraseToggle == 0
      ASS arpPhraseToggle = 1
      # SEND SYSEX
      SEND F0 C1 01 arpPhraseToggle F7 +F
      # END SYSEX
    ELSE
      ASS arpPhraseToggle = 0
      # SEND SYSEX
      SEND F0 C1 01 arpPhraseToggle F7 +F
      # END SYSEX
      IF setPhrase == 1
        ASS setPhrase = 0
        # SEND SYSEX
        SEND F0 11 07 setPhrase F7 +F
        # END SYSEX
      END
    END
    # TEST
    # ensure arp and phrase are toggling and setPhrase is turned off (if on) when switched to arp
    IF arpPhraseToggle == 0
      LOG IS_ARP
    END
    IF arpPhraseToggle == 1
      LOG IS_PHRASE
    END
    LOG setPhrase setPhrase
    # END TEST
  END

  # if it is a button 10 push toggle button 2 selection on / off
  IF M1 == 11 7F
    IF arpPhraseOnOffToggle == 0
      ASS arpPhraseOnOffToggle = 1
      # SEND SYSEX
      SEND F0 C1 02 arpPhraseOnOffToggle F7 +F
      # END SYSEX
    ELSE
      ASS arpPhraseOnOffToggle = 0
      # SEND SYSEX
      SEND F0 C1 02 arpPhraseOnOffToggle F7 +F
      # END SYSEX
    END
    # TEST
    # ensure arp/phrase module is turned off or on
    IF arpPhraseOnOffToggle == 0
      LOG MODULE_OFF
    END
    IF arpPhraseOnOffToggle == 1
      LOG MODULE_ON
    END
    # END TEST
  END

  # if it is a button 3 push toggle latch
  IF M1 == 0A 7F
    IF latch == 0
      ASS latch = 1
      # SEND SYSEX
      SEND F0 11 0B latch F7 +F
      # END SYSEX
    ELSE
      ASS latch = 0
      # SEND SYSEX
      SEND F0 11 0B latch F7 +F
      # END SYSEX
    END
    # TEST
    # ensure latch is toggling
    IF latch == 0
      LOG LATCH_OFF
    END
    IF latch == 1
      LOG LATCH_ON
    END
    # END TEST
  END

  # if it is a button 11 set lfo
  IF M1 == 12 7F
    IF setLfo == 0
      ASS setLfo = 1
    ELSE
      ASS setLfo = 0
    END
    # TEST
    # ensure setLfo is toggling
    IF setLfo == 0
      LOG LFO_SET_OFF
    END
    IF setLfo == 1
      LOG LFO_SET_ON
    END
    # END TEST
  END

  # if it is a button 4 push toggle padMode
  IF M1 == 0B 7F
    # isBeats
    IF padMode == 0
      ASS padMode = 1
      # SEND SYSEX
      SEND F0 11 0C padMode F7 +F
      # END SYSEX
    # isSample
    ELSE
      ASS padMode = 0
      # SEND SYSEX
      SEND F0 11 0C padMode F7 +F
      # END SYSEX
    END
    # TEST
    # ensure padMode is toggling
    IF padMode == 0
      LOG BEATS_PAD
    END
    IF padMode == 1
      LOG SAMPLE_PAD
    END
    # END TEST
  END

  # if it is a button 12 push toggle groupKnobPush
  IF M1 == 13 7F
    IF groupKnobPush == 0
      ASS groupKnobPush = 1
    ELSE
      ASS groupKnobPush = 0
    END
    # TEST
    # ensure groupKnobPush is toggling
    IF groupKnobPush == 0
      LOG groupKnobPush_OFF
    END
    IF groupKnobPush == 1
      LOG groupKnobPush_ON
    END
    # END TEST
    # NOTE currently when turning on and off, this exits during the following conditionals, which can be inconsistent
    # the main point is that once this action is complete, there should be no need for further action anyway
    # might be good at some point to BLOCK and EXIT out of all of the conditional statements in each section
  END

  # channel specific

  # if knob is pressed and a drumParam is changed, the value in the L array will not match up correctly
  # NOTE monitor for actions that this may be blocking that are unrelated to drum
  IF groupKnobPush == 1
    # TEST
    # ensure drumParams can't be changed when groupKnobPush on
    LOG groupKnobPush groupKnobPush
    # END TEST
    BLOCK
    EXIT
  END
  IF knob6Push == 1
    # TEST
    # ensure drumParams can't be changed when knob6Push on
    LOG knob6Push knob6Push
    # END TEST
    BLOCK
    EXIT
  END
  IF knob7Push == 1
    # TEST
    # ensure drumParams can't be changed when knob7Push on
    LOG knob7Push knob7Push
    # END TEST
    BLOCK
    EXIT
  END
  IF knob8Push == 1
    # TEST
    # ensure drumParams can't be changed when knob8Push on
    LOG knob8Push knob8Push
    # END TEST
    BLOCK
    EXIT
  END

  # for all except the last, order is part 1, part 2, part 1 and 2
  # if it is button 5 - knobs control 'select'
  IF M1 == 0C 7F
    ASS drumParams = $14 $15 $16
    IF previousDrumVal != 04
      SEND F0 0F EE 90 previousDrumVal 00 F7 +F
    END
    SEND F0 0F EE BA 06 select1 F7 +F
    ASS L5 = select1
    # TEST
    LOG L5 L5
    # END TEST
    SEND F0 0F EE BA 07 select2 F7 +F
    ASS L6 = select2
    # TEST
    LOG L6 L6
    # END TEST
    SEND F0 0F EE BA 08 selectBoth F7 +F
    ASS L7 = selectBoth
    # TEST
    LOG L7 L7
    # END TEST
    # TEST
    # ensure drumparams are assigned according to correct buttons
    # ensure 'select' lighting sent to knobs
    LOG drumParams drumParams
    # END TEST
  END
  # if it is button 6 - knobs control 'level'
  IF M1 == 0D 7F
    ASS drumParams = $17 $18 $19
    IF previousDrumVal != 05
      SEND F0 0F EE 90 previousDrumVal 00 F7 +F
    END
    SEND F0 0F EE BA 06 level1 F7 +F
    ASS L5 = level1
    # TEST
    LOG L5 L5
    # END TEST
    SEND F0 0F EE BA 07 level2 F7 +F
    ASS L6 = level2
    # TEST
    LOG L6 L6
    # END TEST
    SEND F0 0F EE BA 08 levelBoth F7 +F
    ASS L7 = levelBoth
    # TEST
    LOG L7 L7
    # END TEST
    # TEST
    # ensure drumparams are assigned according to correct buttons
    # ensure 'level' lighting sent to knobs
    LOG drumParams drumParams
    # END TEST
  END
  # if it is button 7 - knobs control 'attack'
  IF M1 == 0E 7F
    ASS drumParams = $20 $21 $22
    IF previousDrumVal != 06
      SEND F0 0F EE 90 previousDrumVal 00 F7 +F
    END
    SEND F0 0F EE BA 06 attack1 F7 +F
    ASS L5 = attack1
    # TEST
    LOG L5 L5
    # END TEST
    SEND F0 0F EE BA 07 attack2 F7 +F
    ASS L6 = attack2
    # TEST
    LOG L6 L6
    # END TEST
    SEND F0 0F EE BA 08 attackBoth F7 +F
    ASS L7 = attackBoth
    # TEST
    LOG L7 L7
    # END TEST
    # TEST
    # ensure drumparams are assigned according to correct buttons
    # ensure 'attack' lighting sent to knobs
    LOG drumParams drumParams
    # END TEST
  END
  # if it is button 8 - knobs control 'release'
  IF M1 == 0F 7F
    ASS drumParams = $23 $24 $25
    IF previousDrumVal != 07
      SEND F0 0F EE 90 previousDrumVal 00 F7 +F
    END
    SEND F0 0F EE BA 06 release1 F7 +F
    ASS L5 = release1
    # TEST
    LOG L5 L5
    # END TEST
    SEND F0 0F EE BA 07 release2 F7 +F
    ASS L6 = release2
    # TEST
    LOG L6 L6
    # END TEST
    SEND F0 0F EE BA 08 releaseBoth F7 +F
    ASS L7 = releaseBoth
    # TEST
    LOG L7 L7
    # END TEST
    # TEST
    # ensure drumparams are assigned according to correct buttons
    # ensure 'release' lighting sent to knobs
    LOG drumParams drumParams
    # END TEST
  END
  # if it is button 13 - knobs control 'pitch'
  IF M1 == 14 7F
    ASS drumParams = $26 $27 $28
    IF previousDrumVal != 0C
      SEND F0 0F EE 90 previousDrumVal 00 F7 +F
    END
    SEND F0 0F EE BA 06 pitch1 F7 +F
    ASS L5 = pitch1
    # TEST
    LOG L5 L5
    # END TEST
    SEND F0 0F EE BA 07 pitch2 F7 +F
    ASS L6 = pitch2
    # TEST
    LOG L6 L6
    # END TEST
    SEND F0 0F EE BA 08 pitchBoth F7 +F
    ASS L7 = pitchBoth
    # TEST
    LOG L7 L7
    # END TEST
    # TEST
    # ensure drumparams are assigned according to correct buttons
    # ensure 'pitch' lighting sent to knobs
    LOG drumParams drumParams
    # END TEST
  END
  # if it is button 14 - knobs control 'modAmount'
  IF M1 == 15 7F
    ASS drumParams = $29 $30 $31
    IF previousDrumVal != 0D
      SEND F0 0F EE 90 previousDrumVal 00 F7 +F
    END
    SEND F0 0F EE BA 06 modAmount1 F7 +F
    ASS L5 = modAmount1
    # TEST
    LOG L5 L5
    # END TEST
    SEND F0 0F EE BA 07 modAmount2 F7 +F
    ASS L6 = modAmount2
    # TEST
    LOG L6 L6
    # END TEST
    SEND F0 0F EE BA 08 modAmountBoth F7 +F
    ASS L7 = modAmountBoth
    # TEST
    LOG L7 L7
    # END TEST
    # TEST
    # ensure drumparams are assigned according to correct buttons
    # ensure 'modAmount' lighting sent to knobs
    LOG drumParams drumParams
    # END TEST
  END
  # if it is button 15 - knobs control 'modRate'
  IF M1 == 16 7F
    ASS drumParams = $46 $47 $48
    IF previousDrumVal != 0E
      SEND F0 0F EE 90 previousDrumVal 00 F7 +F
    END
    SEND F0 0F EE BA 06 modRate1 F7 +F
    ASS L5 = modRate1
    # TEST
    LOG L5 L5
    # END TEST
    SEND F0 0F EE BA 07 modRate2 F7 +F
    ASS L6 = modRate2
    # TEST
    LOG L6 L6
    # END TEST
    SEND F0 0F EE BA 08 modRateBoth F7 +F
    ASS L7 = modRateBoth
    # TEST
    LOG L7 L7
    # END TEST
    # TEST
    # ensure drumparams are assigned according to correct buttons
    # ensure 'modRate' lighting sent to knobs
    LOG drumParams drumParams
    # END TEST
  END
  # order is decay, body, tune, send
  # if it is button 16 - knobs control 'waveguide'
  IF M1 == 17 7F
    ASS drumParams = $117 $118 $119
    IF previousDrumVal != 0F
      SEND F0 0F EE 90 previousDrumVal 00 F7 +F
    END
    SEND F0 0F EE BA 06 waveguideDecay F7 +F
    ASS L5 = waveguideDecay
    # TEST
    LOG L5 L5
    # END TEST
    SEND F0 0F EE BA 07 waveguideBody F7 +F
    ASS L6 = waveguideBody
    # TEST
    LOG L6 L6
    # END TEST
    SEND F0 0F EE BA 08 waveguideTune F7 +F
    ASS L7 = waveguideTune
    # TEST
    LOG L7 L7
    # END TEST
    # TEST
    # ensure drumparams are assigned according to correct buttons
    # ensure 'waveguide' lighting sent to knobs
    LOG drumParams drumParams
    # END TEST
  END

  # end channel specific

END

# if it is a button note-off (important for lighting)
IF MT == 80

  # if it's a knobPush (and / or knobTurn) and we're trying to set lfo we need to ignore other associated functionality
  IF M1 < 8
    IF setLfo == 1
      ASS lfoKnob = M1
      # SEND SYSEX
      SEND F0 01 0E lfoNumMod lfoKnob F7 +F
      # END SYSEX
      ASS setLfo = 0
      SEND F0 0F EE 90 0A 00 F7 +F
      # TEST
      # ensure lfoKnob is correctly set for any knob that's pressed, and that nothing is negatively impacted by it
      # ensure sequence setLfo on, then groupKnobPush on causes no issues
        # setLfo on and buttons should function as expected
        # setLfo on and knob turns should function as expected (values change, L array values only change if groupKnobPush is off)
      # ensure sequence groupKnobPush on, then setLfo on causes no issues
        # because this has no involvement or mutation of groupKnobPush functionality, this should  function as expected
      LOG lfoKnob lfoKnob
      LOG lfoKnob_SYSEX_SENT
      # END TEST
      BLOCK
      EXIT
    END
  END

  # push control
  # NOTE these conditionals are separate from other knob push conditionals below - likely better to consolidate at some point
  # NOTE currently pushing a knob, then pressing groupKnobPush, then releasing the knob will not reset, which is expected at this point
  # NOTE if groupKnobPush is active, any knob push will result in the standard functionality, even if the knob is turned

  # ignore knobPush changes if groupKnobPush is on
  IF groupKnobPush == 0

    # TODO while loop
    IF M1 == 00 00
      IF knob1Turn == 1
        MATH knobTemp = M1 + 1
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp LM1 +I
        # no need to send lighting here, since tempo sends its own on injection
        ASS knob1Push = 0
        ASS knob1Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # tempoPulse
        LOG M1 M1
        LOG LM1 LM1
        LOG knob1Push knob1Push
        LOG knob1Turn knob1Turn
        # END TEST
        # if using push control, releasing the knob button should not have any effect
        BLOCK
        EXIT
      ELSE
        ASS knob1Push = 0
        # TEST
        LOG knob1Push_RESET
        # END TEST
      END
    END

    IF M1 == 01 00
      IF knob2Turn == 1
        MATH knobTemp = M1 + 1
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp LM1 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp LM1 F7 +F
        ASS knob2Push = 0
        ASS knob2Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # gate
        LOG M1 M1
        LOG LM1 LM1
        LOG knob2Push knob2Push
        LOG knob2Turn knob2Turn
        # END TEST
        # if using push control, releasing the knob button should not have any effect
        BLOCK
        EXIT
      ELSE
        ASS knob2Push = 0
        # TEST
        LOG knob2Push_RESET
        # END TEST
      END
    END

    IF M1 == 02 00
      IF knob3Turn == 1
        MATH knobTemp = M1 + 1
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp LM1 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp LM1 F7 +F
        ASS knob3Push = 0
        ASS knob3Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # velocity
        LOG M1 M1
        LOG LM1 LM1
        LOG knob3Push knob3Push
        LOG knob3Turn knob3Turn
        # END TEST
        # if using push control, releasing the knob button should not have any effect
        BLOCK
        EXIT
      ELSE
        ASS knob3Push = 0
        # TEST
        LOG knob3Push_RESET
        # END TEST
      END
    END

    IF M1 == 03 00
      IF knob4Turn == 1
        MATH knobTemp = M1 + 1
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp LM1 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp LM1 F7 +F
        ASS knob4Push = 0
        ASS knob4Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # lfo rate
        LOG M1 M1
        LOG LM1 LM1
        LOG knob4Push knob4Push
        LOG knob4Turn knob4Turn
        # END TEST
        # if using push control, releasing the knob button should not have any effect
        BLOCK
        EXIT
      ELSE
        ASS knob4Push = 0
        # TEST
        LOG knob4Push_RESET
        # END TEST
      END
    END

    IF M1 == 04 00
      IF knob5Turn == 1
        MATH knobTemp = M1 + 1
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp LM1 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp LM1 F7 +F
        ASS knob5Push = 0
        ASS knob5Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # lfo depth
        LOG M1 M1
        LOG LM1 LM1
        LOG knob5Push knob5Push
        LOG knob5Turn knob5Turn
        # END TEST
        # if using push control, releasing the knob button should not have any effect
        BLOCK
        EXIT
      ELSE
        ASS knob5Push = 0
        # TEST
        LOG knob5Push_RESET
        # END TEST
      END
    END

    IF M1 == 05 00
      IF knob6Turn == 1
        MATH knobTemp = M1 + 1
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp LM1 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp LM1 F7 +F
        ASS knob6Push = 0
        ASS knob6Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # drumParam1
        LOG M1 M1
        LOG LM1 LM1
        LOG knob6Push knob6Push
        LOG knob6Turn knob6Turn
        # END TEST
        # if using push control, releasing the knob button should not have any effect
        BLOCK
        EXIT
      ELSE
        ASS knob6Push = 0
        # TEST
        LOG knob6Push_RESET
        # END TEST
      END
    END

    IF M1 == 06 00
      IF knob7Turn == 1
        MATH knobTemp = M1 + 1
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp LM1 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp LM1 F7 +F
        ASS knob7Push = 0
        ASS knob7Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # drumParam2
        LOG M1 M1
        LOG LM1 LM1
        LOG knob7Push knob7Push
        LOG knob7Turn knob7Turn
        # END TEST
        # if using push control, releasing the knob button should not have any effect
        BLOCK
        EXIT
      ELSE
        ASS knob7Push = 0
        # TEST
        LOG knob7Push_RESET
        # END TEST
      END
    END

    IF M1 == 07 00
      IF knob8Turn == 1
        MATH knobTemp = M1 + 1
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp LM1 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp LM1 F7 +F
        ASS knob8Push = 0
        ASS knob8Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # drumParam3
        LOG M1 M1
        LOG LM1 LM1
        LOG knob8Push knob8Push
        LOG knob8Turn knob8Turn
        # END TEST
        # if using push control, releasing the knob button should not have any effect
        BLOCK
        EXIT
      ELSE
        ASS knob8Push = 0
        # TEST
        LOG knob8Push_RESET
        # END TEST
      END
    END
  END

  # end push control

  # if it is a knob 1 button release, increase tempo mode
  # NOTE if variable is too high, reset (not implemented)
  IF M1 == 00 00
    MATH tempoMode = tempoMode + 1
    # set tempo mode to variable modulo 4
    MATH tempoModeMod = tempoMode % 4
    IF tempoModeMod == 0
      ASS tempoPulse = $24
      # SEND SYSEX
      SEND F0 CC 03 tempoPulse F7 +F
      # END SYSEX
      SEND F0 0F EE BA 01 $26 F7 +F
      ASS L0 = $14
      # TEST
      LOG L0 L0
      # END TEST
    END
    # set each tempoPulse to default value on switching
    # also send data to xtouch to reflect this
    IF tempoModeMod == 1
      ASS tempoPulse = $24
      # SEND SYSEX
      SEND F0 CC 03 tempoPulse F7 +F
      # END SYSEX
      SEND F0 0F EE BA 01 00 F7 +F
      ASS L0 = 00
      # TEST
      LOG L0 L0
      # END TEST
    END
    IF tempoModeMod == 2
      ASS tempoPulse = $24
      # SEND SYSEX
      SEND F0 CC 03 tempoPulse F7 +F
      # END SYSEX
      SEND F0 0F EE BA 01 $50 F7 +F
      ASS L0 = $26
      # TEST
      LOG L0 L0
      # END TEST
    END
    IF tempoModeMod == 3
      ASS tempoPulse = $18
      # SEND SYSEX
      SEND F0 CC 03 tempoPulse F7 +F
      # END SYSEX
      SEND F0 0F EE BA 01 $50 F7 +F
      ASS L0 = $26
      # TEST
      LOG L0 L0
      # END TEST
    END
    # TEST
    # ensure tempoModeMod changes accordingly and tempoPulse correlates
    LOG tempoMode tempoModeMod
    LOG tempoPulse tempoPulse
    # END TEST
  END

  # if it is a knob 2 button release, increase gate mode
  # NOTE if variable is too high, reset (not implemented)
  IF M1 == 01 00
    MATH gateMode = gateMode + 1
    # set gate mode to variable modulo 6
    # NOTE preventing the light from sending will change the length more quickly, more easily
    # NOTE will be testing with live to see best setup here
    MATH gateModeMod = gateMode % 6
    IF gateModeMod == 0
      ASS gateFactor = 1
      SEND F0 0F EE BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    IF gateModeMod == 1
      ASS gateFactor = 2
      SEND F0 0F EE BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    IF gateModeMod == 2
      ASS gateFactor = 5
      SEND F0 0F EE BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    IF gateModeMod == 3
      ASS gateFactor = 10
      SEND F0 0F EE BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    IF gateModeMod == 4
      ASS gateFactor = 20
      SEND F0 0F EE BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    IF gateModeMod == 5
      ASS gateFactor = 40
      SEND F0 0F EE BA 02 00 F7 +F
      ASS L1 = 00
      # TEST
      LOG L1 L1
      # END TEST
    END
    # TEST
    # ensure gateModeMod changes accordingly and gate correlates
    LOG gateMode gateModeMod
    LOG gate gate
    # END TEST
  END

  # if it is a knob 3 button release, turn on lfo sync
  IF M1 == 02 00
    # SEND SYSEX
    SEND F0 01 0F lfoNumMod F7 +F
    # END SYSEX

    # TEST
    # ensure lfoSync sent correctly
    LOG lfoNum lfoNumMod
    LOG lfoSync_SYSEX_SENT
    # END TEST
  END

  # if it is a knob 4 button release, change lfo type
  # NOTE if variable is too high, reset (not implemented)
  # NOTE could add testing which reported the actual lfo type rather than a number
  IF M1 == 03 00

    IF lfoNumMod == 0
      MATH lfo1Type = lfo1Type + 1
      # set tempo mode to variable modulo 4
      MATH lfoTypeMod = lfo1Type % 4
      # SEND SYSEX
      SEND F0 01 10 lfoNumMod lfoTypeMod F7 +F
      # END SYSEX
      # TEST
      # ensure lfoType changes accordingly
      LOG lfo1Type lfoTypeMod
      # END TEST
    END
    IF lfoNumMod == 1
      MATH lfo2Type = lfo2Type + 1
      # set tempo mode to variable modulo 4
      MATH lfoTypeMod = lfo2Type % 4
      # SEND SYSEX
      SEND F0 01 10 lfoNumMod lfoTypeMod F7 +F
      # END SYSEX
      # TEST
      # ensure lfoType changes accordingly
      LOG lfo2Type lfoTypeMod
      # END TEST
    END
    IF lfoNumMod == 2
      MATH lfo3Type = lfo3Type + 1
      # set tempo mode to variable modulo 4
      MATH lfoTypeMod = lfo3Type % 4
      # SEND SYSEX
      SEND F0 01 10 lfoNumMod lfoTypeMod F7 +F
      # END SYSEX
      # TEST
      # ensure lfoType changes accordingly
      LOG lfo3Type lfoTypeMod
      # END TEST
    END
    IF lfoNumMod == 3
      MATH lfo4Type = lfo4Type + 1
      # set tempo mode to variable modulo 4
      MATH lfoTypeMod = lfo4Type % 4
      # SEND SYSEX
      SEND F0 01 10 lfoNumMod lfoTypeMod F7 +F
      # END SYSEX
      # TEST
      # ensure lfoType changes accordingly
      LOG lfo4Type lfoTypeMod
      # END TEST
    END

    # TEST
    # ensure lfoType changes accordingly
    LOG lfoNum lfoNumMod
    LOG lfoType_SYSEX_SENT
    # END TEST
  END

  # if it is a knob 5 button release, change lfo num (the lfo that's being edited)
  # NOTE if variable is too high, reset (not implemented)
  IF M1 == 04 00
    # this will cause issues if groupKnobPush or knob4Push is on due to the values in L array
    IF groupKnobPush == 1
      BLOCK
      EXIT
    END
    IF knob4Push == 1
      BLOCK
      EXIT
    END
    MATH lfoNum = lfoNum + 1
    # set tempo mode to variable modulo 4
    MATH lfoNumMod = lfoNum % 4

    IF lfoNumMod == 0
      # send lighting for lfo1Rate and depth
      SEND F0 0F EE BA 04 lfo1Rate F7 +F
      SEND F0 0F EE BA 05 lfo1Depth F7 +F
      ASS L3 = lfo1Rate
      ASS L4 = lfo1Depth
      # TEST
      LOG lfo1Rate lfo1Rate
      LOG lfo1Depth lfo1Depth
      # END TEST
    END
    IF lfoNumMod == 1
      # send lighting for lfo2Rate and depth
      SEND F0 0F EE BA 04 lfo2Rate F7 +F
      SEND F0 0F EE BA 05 lfo2Depth F7 +F
      ASS L3 = lfo2Rate
      ASS L4 = lfo2Depth
      # TEST
      LOG lfo2Rate lfo2Rate
      LOG lfo2Depth lfo2Depth
      # END TEST
    END
    IF lfoNumMod == 2
      # send lighting for lfo3Rate and depth
      SEND F0 0F EE BA 04 lfo3Rate F7 +F
      SEND F0 0F EE BA 05 lfo3Depth F7 +F
      ASS L3 = lfo3Rate
      ASS L4 = lfo3Depth
      # TEST
      LOG lfo3Rate lfo3Rate
      LOG lfo3Depth lfo3Depth
      # END TEST
    END
    IF lfoNumMod == 3
      # send lighting for lfo4Rate and depth
      SEND F0 0F EE BA 04 lfo4Rate F7 +F
      SEND F0 0F EE BA 05 lfo4Depth F7 +F
      ASS L3 = lfo4Rate
      ASS L4 = lfo4Depth
      # TEST
      LOG lfo4Rate lfo4Rate
      LOG lfo4Depth lfo4Depth
      # END TEST
    END

    # TEST
    # ensure lfoNum changes accordingly and lighting corresponds
    LOG lfoNum lfoNumMod
    LOG lfoNum_SYSEX_SENT
    # END TEST
  END

  # TODO add double tap to restart all lfos
  # if it is a knob 6 button release, restart current lfo
  IF M1 == 05 00
    # SEND SYSEX
    SEND F0 01 11 lfoNumMod F7 +F
    # END SYSEX

    # TEST
    # ensure lfoNum restarts accordingly
    LOG lfoNum lfoNumMod
    LOG lfo_RESTART_SYSEX_SENT
    # END TEST
  END

  IF M1 == 08 00
    IF arpPhraseToggle == 1
      IF setPhrase == 1
        SEND F0 0F EE 90 00 01 F7 +F
      END
    END
  END

  IF M1 == 09 00
    IF arpPhraseToggle == 1
      SEND F0 0F EE 90 01 01 F7 +F
    ELSE
      # NOTE this sends even when light is off
      IF setPhrase == 0
        SEND F0 0F EE 90 00 00 F7 +F
      END
    END
  END

  IF M1 == 0A 00
    IF latch == 1
      SEND F0 0F EE 90 02 01 F7 +F
    END
  END

  IF M1 == 0B 00
    IF padMode == 1
      SEND F0 0F EE 90 03 01 F7 +F
    END
  END

  IF M1 == 11 00
    IF arpPhraseOnOffToggle == 1
      SEND F0 0F EE 90 09 01 F7 +F
    END
  END

  IF M1 == 12 00
    IF setLfo == 1
      SEND F0 0F EE 90 0A 02 F7 +F
    END
  END

  IF M1 == 13 00
    IF groupKnobPush == 1
      SEND F0 0F EE 90 0B 01 F7 +F

      # turn on knobPush for all knobs
      ASS knob1Push = 1
      ASS knob2Push = 1
      ASS knob3Push = 1
      ASS knob4Push = 1
      ASS knob5Push = 1
      ASS knob6Push = 1
      ASS knob7Push = 1
      ASS knob8Push = 1

      # TEST
      # ensure knobPush turned on accordingly
      LOG knob1Push knob1Push
      LOG knob2Push knob2Push
      LOG knob3Push knob3Push
      LOG knob4Push knob4Push
      LOG knob5Push knob5Push
      LOG knob6Push knob6Push
      LOG knob7Push knob7Push
      LOG knob8Push knob8Push
      # END TEST

    # reset all knobs to L values if turning off
    ELSE
      IF knob1Turn == 1
        ASS knobTemp = 1
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp L0 +I
        # no need to send lighting here, since tempo sends its own on injection
        ASS knob1Push = 0
        ASS knob1Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # tempoPulse
        LOG L0 L0
        LOG knob1Push knob1Push
        LOG knob1Turn knob1Turn
        # END TEST
      ELSE
        ASS knob1Push = 0
        # TEST
        LOG knob1Push_RESET
        # END TEST
      END

      IF knob2Turn == 1
        ASS knobTemp = 2
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp L1 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp L1 F7 +F
        ASS knob2Push = 0
        ASS knob2Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # gate
        LOG L1 L1
        LOG knob2Push knob2Push
        LOG knob2Turn knob2Turn
        # END TEST
      ELSE
        ASS knob2Push = 0
        # TEST
        LOG knob2Push_RESET
        # END TEST
      END

      IF knob3Turn == 1
        ASS knobTemp = 3
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp L2 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp L2 F7 +F
        ASS knob3Push = 0
        ASS knob3Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # velocity
        LOG L2 L2
        LOG knob3Push knob3Push
        LOG knob3Turn knob3Turn
        # END TEST
      ELSE
        ASS knob3Push = 0
        # TEST
        LOG knob3Push_RESET
        # END TEST
      END

      IF knob4Turn == 1
        ASS knobTemp = 4
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp L3 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp L3 F7 +F
        ASS knob4Push = 0
        ASS knob4Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # lfo rate
        LOG L3 L3
        LOG knob4Push knob4Push
        LOG knob4Turn knob4Turn
        # END TEST
      ELSE
        ASS knob4Push = 0
        # TEST
        LOG knob4Push_RESET
        # END TEST
      END

      IF knob5Turn == 1
        ASS knobTemp = 5
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp L4 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp L4 F7 +F
        ASS knob5Push = 0
        ASS knob5Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # lfo depth
        LOG L4 L4
        LOG knob5Push knob5Push
        LOG knob5Turn knob5Turn
        # END TEST
      ELSE
        ASS knob5Push = 0
        # TEST
        LOG knob5Push_RESET
        # END TEST
      END

      IF knob6Turn == 1
        ASS knobTemp = 6
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp L5 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp L5 F7 +F
        ASS knob6Push = 0
        ASS knob6Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # drumParam1
        LOG L5 L5
        LOG knob6Push knob6Push
        LOG knob6Turn knob6Turn
        # END TEST
      ELSE
        ASS knob6Push = 0
        # TEST
        LOG knob6Push_RESET
        # END TEST
      END

      IF knob7Turn == 1
        ASS knobTemp = 7
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp L6 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp L6 F7 +F
        ASS knob7Push = 0
        ASS knob7Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # drumParam2
        LOG L6 L6
        LOG knob7Push knob7Push
        LOG knob7Turn knob7Turn
        # END TEST
      ELSE
        ASS knob7Push = 0
        # TEST
        LOG knob7Push_RESET
        # END TEST
      END

      IF knob8Turn == 1
        ASS knobTemp = 8
        # injection makes sure the parameters are changed correctly
        SEND BA knobTemp L7 +I
        # send ensures the lighting changes correctly (not applicable to tempo, which sends its own)
        SEND F0 0F EE BA knobTemp L7 F7 +F
        ASS knob8Push = 0
        ASS knob8Turn = 0
        # TEST
        # ensure push control release handled correctly
        # ensure lighting matches with L array
        # ensure L array matches with previous value
        # ensure parameter associated with knob lighting also changed
        # drumParam3
        LOG L7 L7
        LOG knob8Push knob8Push
        LOG knob8Turn knob8Turn
        # END TEST
      ELSE
        ASS knob8Push = 0
        # TEST
        LOG knob8Push_RESET
        # END TEST
      END
      # if using group push control, releasing the knob button should not have any effect (not that it does here)
      BLOCK
      EXIT
    END
  END

  # channel specific

  # if it is a knob 7 button release, toggle waveguide
  IF M1 == 06 00
    IF waveguideToggle == 0
      ASS waveguideToggle = 1
      # NOTE / TODO unsure if this is correct as of now
      SEND F0 11 EE channelCC $116 7F F7 +F
    ELSE
      ASS waveguideToggle = 0
      # NOTE / TODO unsure if this is correct as of now
      SEND F0 11 EE channelCC $116 00 F7 +F
    END
    # TEST
    # ensure waveguide is toggled properly
    IF waveguideToggle == 0
      LOG WAVEGUIDE_STRING
    END
    IF waveguideToggle == 1
      LOG WAVEGUIDE_TUBE
    END
    # END TEST
  END

  IF M1 == 07 00
    IF pitchQuantize == 0
      ASS pitchQuantize = 1
      # NOTE / TODO unsure if this is correct as of now
      SEND F0 11 EE channelCC $53 7F F7 +F
    ELSE
      ASS pitchQuantize = 0
      # NOTE / TODO unsure if this is correct as of now
      SEND F0 11 EE channelCC $53 00 F7 +F
    END
    # TEST
    # ensure pitchQuantize is toggled properly
    IF pitchQuantize == 0
      LOG PITCH_NOT_QUANTIZED
    END
    IF pitchQuantize == 1
      LOG PITCH_QUANTIZED
    END
    # END TEST
  END

  # if knob is pressed and a drumParam is changed, the value in the L array will not match up correctly
  # NOTE monitor for actions that this may be blocking that are unrelated to drum
  # send lighting if drumParam is the same so that the light doesn't just turn off
  IF knob6Push == 1
    IF M1 >= 0C
      IF M1 <= 17
        MATH knobTemp = M1 - previousDrumVal
        IF knobTemp == 8
          SEND F0 0F EE 90 previousDrumVal 01 F7 +F
        END
      END
    END
    BLOCK
    EXIT
  END
  IF knob7Push == 1
    IF M1 >= 0C
      IF M1 <= 17
        MATH knobTemp = M1 - previousDrumVal
        IF knobTemp == 8
          SEND F0 0F EE 90 previousDrumVal 01 F7 +F
        END
      END
    END
    BLOCK
    EXIT
  END
  IF knob8Push == 1
    IF M1 >= 0C
      IF M1 <= 17
        MATH knobTemp = M1 - previousDrumVal
        IF knobTemp == 8
          SEND F0 0F EE 90 previousDrumVal 01 F7 +F
        END
      END
    END
    BLOCK
    EXIT
  END

  IF M1 == 0C 00
    SEND F0 0F EE 90 04 01 F7 +F
    ASS previousDrumVal = 04
  END
  IF M1 == 0D 00
    SEND F0 0F EE 90 05 01 F7 +F
    ASS previousDrumVal = 05
  END
  IF M1 == 0E 00
    SEND F0 0F EE 90 06 01 F7 +F
    ASS previousDrumVal = 06
  END
  IF M1 == 0F 00
    SEND F0 0F EE 90 07 01 F7 +F
    ASS previousDrumVal = 07
  END
  IF M1 == 14 00
    SEND F0 0F EE 90 0C 01 F7 +F
    ASS previousDrumVal = 0C
  END
  IF M1 == 15 00
    SEND F0 0F EE 90 0D 01 F7 +F
    ASS previousDrumVal = 0D
  END
  IF M1 == 16 00
    SEND F0 0F EE 90 0E 01 F7 +F
    ASS previousDrumVal = 0E
  END
  IF M1 == 17 00
    SEND F0 0F EE 90 0F 01 F7 +F
    ASS previousDrumVal = 0F
  END

  # end channel specific

END


# if it is a knob turn
IF MT == B0
  # set knob turn to true if using push control
  IF knob1Push == 1
    ASS knob1Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob1Turn knob1Turn
    # END TEST
  END
  IF knob2Push == 1
    ASS knob2Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob2Turn knob2Turn
    # END TEST
  END
  IF knob3Push == 1
    ASS knob3Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob3Turn knob3Turn
    # END TEST
  END
  IF knob4Push == 1
    ASS knob4Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob4Turn knob4Turn
    # END TEST
  END
  IF knob5Push == 1
    ASS knob5Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob5Turn knob5Turn
    # END TEST
  END
  IF knob6Push == 1
    ASS knob6Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob6Turn knob6Turn
    # END TEST
  END
  IF knob7Push == 1
    ASS knob7Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob7Turn knob7Turn
    # END TEST
  END
  IF knob8Push == 1
    ASS knob8Turn = 1
    # TEST
    # ensure that if knob is turned while knob is pressed, knob turn is set to true
    LOG knob8Turn knob8Turn
    # END TEST
  END
  # TEST
  # ensure tempo lighting functions as expected
  # END TEST
  # if knob is 1 (tempo)
  # knob is sensitive down to one notch
  IF M1 == 1
    # if tempo mode is 0
    IF tempoModeMod == 0
      # NOTE because lighting does actually change the CC value, we need to handle this based on lighting
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= 6
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $13 F7 +F
          IF knob1Push == 0
            ASS L0 = 1
          END
        END
      END
      # if knob value is 14
      IF M2 >= $14
        IF M2 <= $19
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $26 F7 +F
          IF knob1Push == 0
            ASS L0 = $14
          END
        END
      END
      # if knob value is 27
      IF M2 >= $27
        IF M2 <= $32
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $39 F7 +F
          IF knob1Push == 0
            ASS L0 = $27
          END
        END
      END
      # if knob value is 40
      IF M2 >= $40
        IF M2 <= $45
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $52 F7 +F
          IF knob1Push == 0
            ASS L0 = $40
          END
        END
      END
      # if knob value is 53
      IF M2 >= $53
        IF M2 <= $58
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $65 F7 +F
          IF knob1Push == 0
            ASS L0 = $53
          END
        END
      END
      # if knob value is 66
      IF M2 >= $66
        IF M2 <= $71
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $78 F7 +F
          IF knob1Push == 0
            ASS L0 = $66
          END
        END
      END
      # if knob value is 79
      IF M2 >= $79
        IF M2 <= $84
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $91 F7 +F
          IF knob1Push == 0
            ASS L0 = $79
          END
        END
      END
      # if knob value is 92
      IF M2 >= $92
        IF M2 <= $97
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $104 F7 +F
          IF knob1Push == 0
            ASS L0 = $92
          END
        END
      END
      # if knob value is 105
      IF M2 >= $105
        IF M2 <= $110
          ASS tempoPulse = 2
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $117 F7 +F
          IF knob1Push == 0
            ASS L0 = $105
          END
        END
      END
      # if knob value is 118
      IF M2 >= $118
        IF M2 <= $122
          ASS tempoPulse = 1
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $127 F7 +F
          IF knob1Push == 0
            ASS L0 = $118
          END
        END
      END
      # turning down
      # if knob value is 12
      IF M2 >= 7
        IF M2 <= $12
          ASS tempoPulse = 48
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $0 F7 +F
          IF knob1Push == 0
            ASS L0 = $12
          END
        END
      END
      # if knob value is 25
      IF M2 >= $20
        IF M2 <= $25
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $13 F7 +F
          IF knob1Push == 0
            ASS L0 = $25
          END
        END
      END
      # if knob value is 38
      IF M2 >= $33
        IF M2 <= $38
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $26 F7 +F
          IF knob1Push == 0
            ASS L0 = $38
          END
        END
      END
      # if knob value is 51
      IF M2 >= $46
        IF M2 <= $51
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $39 F7 +F
          IF knob1Push == 0
            ASS L0 = $51
          END
        END
      END
      # if knob value is 64
      IF M2 >= $59
        IF M2 <= $64
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $52 F7 +F
          IF knob1Push == 0
            ASS L0 = $64
          END
        END
      END
      # if knob value is 77
      IF M2 >= $72
        IF M2 <= $77
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $65 F7 +F
          IF knob1Push == 0
            ASS L0 = $77
          END
        END
      END
      # if knob value is 90
      IF M2 >= $85
        IF M2 <= $90
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $78 F7 +F
          IF knob1Push == 0
            ASS L0 = $90
          END
        END
      END
      # if knob value is 103
      IF M2 >= $98
        IF M2 <= $103
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $91 F7 +F
          IF knob1Push == 0
            ASS L0 = $103
          END
        END
      END
      # if knob value is 116
      IF M2 >= $111
        IF M2 <= $116
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $104 F7 +F
          IF knob1Push == 0
            ASS L0 = $116
          END
        END
      END
      # if knob value is 126
      IF M2 >= $123
        IF M2 <= $126
          ASS tempoPulse = 2
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $117 F7 +F
          IF knob1Push == 0
            ASS L0 = $126
          END
        END
      END
    END

    # if tempo mode is 1
    IF tempoModeMod == 1
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= $12
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = 1
          END
        END
      END
      # if knob value is 26
      IF M2 >= $26
        IF M2 <= $37
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $26
          END
        END
      END
      # if knob value is 51
      IF M2 >= $51
        IF M2 <= $62
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $51
          END
        END
      END
      # if knob value is 76
      IF M2 >= $76
        IF M2 <= $87
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $76
          END
        END
      END
      # if knob value is 101
      IF M2 >= $101
        IF M2 <= $112
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $127 F7 +F
          IF knob1Push == 0
            ASS L0 = $101
          END
        END
      END
      # turning down
      # if knob value is 24
      IF M2 >= $13
        IF M2 <= $24
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 00 F7 +F
          ASS L0 = $24
        END
      END
      # if knob value is 49
      IF M2 >= $38
        IF M2 <= $49
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = $49
          END
        END
      END
      # if knob value is 74
      IF M2 >= $63
        IF M2 <= $74
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $74
          END
        END
      END
      # if knob value is 99
      IF M2 >= $88
        IF M2 <= $99
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $99
          END
        END
      END
      # if knob value is 126
      IF M2 >= $113
        IF M2 <= $126
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $126
          END
        END
      END
    END

    # if tempo mode is 2
    IF tempoModeMod == 2
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= $12
          ASS tempoPulse = 48
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = 1
          END
        END
      END
      # if knob value is 26
      IF M2 >= $26
        IF M2 <= $37
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $26
          END
        END
      END
      # if knob value is 51
      IF M2 >= $51
        IF M2 <= $62
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $51
          END
        END
      END
      # if knob value is 76
      IF M2 >= $76
        IF M2 <= $87
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $76
          END
        END
      END
      # if knob value is 101
      IF M2 >= $101
        IF M2 <= $112
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $127 F7 +F
          IF knob1Push == 0
            ASS L0 = $101
          END
        END
      END
      # turning down
      # if knob value is 24
      IF M2 >= $13
        IF M2 <= $24
          ASS tempoPulse = 96
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 00 F7 +F
          ASS L0 = $24
        END
      END
      # if knob value is 49
      IF M2 >= $38
        IF M2 <= $49
          ASS tempoPulse = 48
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = $49
          END
        END
      END
      # if knob value is 74
      IF M2 >= $63
        IF M2 <= $74
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $74
          END
        END
      END
      # if knob value is 99
      IF M2 >= $88
        IF M2 <= $99
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $99
          END
        END
      END
      # if knob value is 126
      IF M2 >= $113
        IF M2 <= $126
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $126
          END
        END
      END
    END

    # if tempo mode is 3
    IF tempoModeMod == 3
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= $12
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = 1
          END
        END
      END
      # if knob value is 26
      IF M2 >= $26
        IF M2 <= $37
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $26
          END
        END
      END
      # if knob value is 51
      IF M2 >= $51
        IF M2 <= $62
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $51
          END
        END
      END
      # if knob value is 76
      IF M2 >= $76
        IF M2 <= $87
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $76
          END
        END
      END
      # if knob value is 101
      IF M2 >= $101
        IF M2 <= $112
          ASS tempoPulse = 2
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $127 F7 +F
          IF knob1Push == 0
            ASS L0 = $101
          END
        END
      END
      # turning down
      # if knob value is 24
      IF M2 >= $13
        IF M2 <= $24
          ASS tempoPulse = 72
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 00 F7 +F
          ASS L0 = $24
        END
      END
      # if knob value is 49
      IF M2 >= $38
        IF M2 <= $49
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $25 F7 +F
          IF knob1Push == 0
            ASS L0 = $49
          END
        END
      END
      # if knob value is 74
      IF M2 >= $63
        IF M2 <= $74
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $50 F7 +F
          IF knob1Push == 0
            ASS L0 = $74
          END
        END
      END
      # if knob value is 99
      IF M2 >= $88
        IF M2 <= $99
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $75 F7 +F
          IF knob1Push == 0
            ASS L0 = $99
          END
        END
      END
      # if knob value is 126
      IF M2 >= $113
        IF M2 <= $126
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 03 tempoPulse F7 +F
          # END SYSEX
          SEND F0 0F EE BA 01 $100 F7 +F
          IF knob1Push == 0
            ASS L0 = $126
          END
        END
      END
    END
    # TEST
    # ensure tempoPulse aligns with tempoMode
    LOG tempoPulse tempoPulse
    LOG L0_SET
    LOG L0 L0
    # END TEST
  END
  # if knob is 2 (gate)
  # starting points: max will be ~5 seconds (5000), min will be .1 seconds (100)
  # 2.5 seconds should be enough to handle 96 pulses at 120 bpm,  but slower bpm's can move up to 5 seconds
  # overall: 0-127 (*2) (*5) (*10) (*20) (*40)
  IF M1 == 2
    MATH gate = M2 * gateFactor
    MATH gateTemp = gate / 100
    # SEND SYSEX
    SEND F0 CC 04 gateTemp gate F7 +F
    # END SYSEX
    IF knob2Push == 0
      ASS L1 = M2
    END
    # TEST
    # ensure gate aligns with gate
    # ensure gateFactor is correct
    LOG gate gate
    LOG gateFactor gateFactor
    LOG L1 L1
    # END TEST
  END
  # if knob is 3 (velocity)
  IF M1 == 3
    ASS velocity = M2
    # SEND SYSEX
    SEND F0 C1 05 velocity F7 +F
    # END SYSEX
    IF knob3Push == 0
      ASS L2 = M2
    END
    # TEST
    # ensure velocity aligns with velocity
    LOG velocity velocity
    LOG L2 L2
    # END TEST
  END
  # if knob is 4 (lfo rate)
  IF M1 == 4
    # needs to be sent out
    # assign for push control
    IF knob4Push == 0
      ASS L3 = M2
    END
    # TEST
    # ensure lfoRate aligns with lfoRate
    LOG lfoNum lfoNum
    LOG lfoRate M2
    LOG L3 L3
    # END TEST
    IF lfoNumMod == 0
      # SEND SYSEX
      SEND F0 01 13 lfoNumMod lfo1Rate F7 +F
      # END SYSEX
      ASS lfo1Rate = M2
    END
    IF lfoNumMod == 1
      # SEND SYSEX
      SEND F0 01 13 lfoNumMod lfo2Rate F7 +F
      # END SYSEX
      ASS lfo2Rate = M2
    END
    IF lfoNumMod == 2
      # SEND SYSEX
      SEND F0 01 13 lfoNumMod lfo3Rate F7 +F
      # END SYSEX
      ASS lfo3Rate = M2
    END
    IF lfoNumMod == 3
      # SEND SYSEX
      SEND F0 01 13 lfoNumMod lfo4Rate F7 +F
      # END SYSEX
      ASS lfo4Rate = M2
    END
  END
  # if knob is 5 (lfo depth)
  IF M1 == 5
    # needs to be sent out
    # assign for push control
    IF knob5Push == 0
      ASS L4 = M2
    END
    # TEST
    # ensure lfoDepth aligns with lfoDepth
    LOG lfoNum lfoNum
    LOG lfoDepth M2
    LOG L4 L4
    # END TEST
    IF lfoNumMod == 0
      # SEND SYSEX
      SEND F0 01 14 lfoNumMod lfo1Depth F7 +F
      # END SYSEX
      ASS lfo1Depth = M2
    END
    IF lfoNumMod == 1
      # SEND SYSEX
      SEND F0 01 14 lfoNumMod lfo2Depth F7 +F
      # END SYSEX
      ASS lfo2Depth = M2
    END
    IF lfoNumMod == 2
      # SEND SYSEX
      SEND F0 01 14 lfoNumMod lfo3Depth F7 +F
      # END SYSEX
      ASS lfo3Depth = M2
    END
    IF lfoNumMod == 3
      # SEND SYSEX
      SEND F0 01 14 lfoNumMod lfo4Depth F7 +F
      # END SYSEX
      ASS lfo4Depth = M2
    END
  END

  # channel specific

  # if knob is 6 (drumParam 1)
  IF M1 == 6
    # needs to be sent out
    # assign for push control
    IF knob6Push == 0
      ASS L5 = M2
    END
    # TEST
    LOG L5 L5
    # END TEST
    # if drumParams are 'select'
    IF drumParams == $14 $15 $16
      SEND F0 11 EE channelCC $14 M2 F7 +F
      ASS select1 = M2
    END
    # if drumParams are 'level'
    IF drumParams == $17 $18 $19
      SEND F0 11 EE channelCC $17 M2 F7 +F
      ASS level1 = M2
    END
    # if drumParams are 'attack'
    IF drumParams == $20 $21 $22
      SEND F0 11 EE channelCC $20 M2 F7 +F
      ASS attack1 = M2
    END
    # if drumParams are 'release'
    IF drumParams == $23 $24 $25
      SEND F0 11 EE channelCC $23 M2 F7 +F
      ASS release1 = M2
    END
    # if drumParams are 'pitch'
    IF drumParams == $26 $27 $28
      SEND F0 11 EE channelCC $26 M2 F7 +F
      ASS pitch1 = M2
    END
    # if drumParams are 'modAmount'
    IF drumParams == $29 $30 $31
      SEND F0 11 EE channelCC $29 M2 F7 +F
      ASS modAmount1 = M2
    END
    # if drumParams are 'modRate'
    IF drumParams == $46 $47 $48
      SEND F0 11 EE channelCC $46 M2 F7 +F
      ASS modRate1 = M2
    END
    # if drumParams are 'waveguide'
    IF drumParams == $117 $118 $119
      SEND F0 11 EE channelCC $117 M2 F7 +F
      ASS waveguideDecay = M2
    END
  END
  # if knob is 7 (drumParam 2)
  IF M1 == 7
    # needs to be sent out
    # assign for push control
    IF knob7Push == 0
      ASS L6 = M2
    END
    # TEST
    LOG L6 L6
    # END TEST
    # if drumParams are 'select'
    IF drumParams == $14 $15 $16
      SEND F0 11 EE channelCC $15 M2 F7 +F
      ASS select2 = M2
    END
    # if drumParams are 'level'
    IF drumParams == $17 $18 $19
      SEND F0 11 EE channelCC $18 M2 F7 +F
      ASS level2 = M2
    END
    # if drumParams are 'attack'
    IF drumParams == $20 $21 $22
      SEND F0 11 EE channelCC $21 M2 F7 +F
      ASS attack2 = M2
    END
    # if drumParams are 'release'
    IF drumParams == $23 $24 $25
      SEND F0 11 EE channelCC $24 M2 F7 +F
      ASS release2 = M2
    END
    # if drumParams are 'pitch'
    IF drumParams == $26 $27 $28
      SEND F0 11 EE channelCC $27 M2 F7 +F
      ASS pitch2 = M2
    END
    # if drumParams are 'modAmount'
    IF drumParams == $29 $30 $31
      SEND F0 11 EE channelCC $30 M2 F7 +F
      ASS modAmount2 = M2
    END
    # if drumParams are 'modRate'
    IF drumParams == $46 $47 $48
      SEND F0 11 EE channelCC $47 M2 F7 +F
      ASS modRate2 = M2
    END
    # if drumParams are 'waveguide'
    IF drumParams == $117 $118 $119
      SEND F0 11 EE channelCC $118 M2 F7 +F
      ASS waveguideBody = M2
    END
  END
  # if knob is 8 (drumParam 3)
  IF M1 == 8
    # needs to be sent out
    # assign for push control
    IF knob8Push == 0
      ASS L7 = M2
    END
    # TEST
    LOG L7 L7
    # END TEST
    # if drumParams are 'select'
    IF drumParams == $14 $15 $16
      SEND F0 11 EE channelCC $16 M2 F7 +F
      ASS selectBoth = M2
    END
    # if drumParams are 'level'
    IF drumParams == $17 $18 $19
      SEND F0 11 EE channelCC $19 M2 F7 +F
      ASS levelBoth = M2
    END
    # if drumParams are 'attack'
    IF drumParams == $20 $21 $22
      SEND F0 11 EE channelCC $22 M2 F7 +F
      ASS attackBoth = M2
    END
    # if drumParams are 'release'
    IF drumParams == $23 $24 $25
      SEND F0 11 EE channelCC $25 M2 F7 +F
      ASS releaseBoth = M2
    END
    # if drumParams are 'pitch'
    IF drumParams == $26 $27 $28
      SEND F0 11 EE channelCC $28 M2 F7 +F
      ASS pitchBoth = M2
    END
    # if drumParams are 'modAmount'
    IF drumParams == $29 $30 $31
      SEND F0 11 EE channelCC $31 M2 F7 +F
      ASS modAmountBoth = M2
    END
    # if drumParams are 'modRate'
    IF drumParams == $46 $47 $48
      SEND F0 11 EE channelCC $48 M2 F7 +F
      ASS modRateBoth = M2
    END
    # if drumParams are 'waveguide'
    IF drumParams == $117 $118 $119
      SEND F0 11 EE channelCC $119 M2 F7 +F
      ASS waveguideTune = M2
    END
  END
  # TEST
  # ensure correct drumParam sent on knob turn
  # ensure drumParam changed to the correct value
  IF M1 > 5
    LOG ASSIGNED_VALUE M2
    LOG drumParams1 K1A
    LOG drumParams2 K1B
    LOG drumParamsBoth K1C
    LOG M1 M1
  END
  # END TEST

  # end channel specific

END

BX = XX +B
NX = XX +B
