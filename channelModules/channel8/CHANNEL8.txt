# channel eight

# this instance will constantly be receiving clock, the question will be whether it responds to it or not
# there will be another service receiving note in - if arpPhraseOnOffToggle is on, notes will be processed, otherwise, they will not

# note that the assumption here is that the global array information will be used, not the local array
# the local array will just be used for storage

# possible future updates - addings 'reverse' and 'bounce' for phrase (stochastic etc. whatever)

# need to reassign arpIndex whenever mode is changed

# NOTE maxVal for clockNum is based off 227 * 288 = floor(65,535 / 288) * (ffff / lcm of all possible tempoPulse)

# arpTypes
# 1: ascending one octave
# 2: ascending two octave
# 3: ascending three octave
# 4: descending one octave
# 5: descending two octave
# 6: descending three octave
# 7: random one octave
# 8: random two octave
# 9: random three octave
# 10: order pressed one octave
# 11: order pressed two octave
# 12: order pressed three octave

IF LOAD

  # constant

  ALIAS 07 channelVal # channel specific (obviously)
  ALIAS F078 maxValClockNumNorm
  ALIAS FF78 maxValClockNumEdge
  ALIAS 20 arpOffset

  # local

  ALIAS I0 channelCC
  ALIAS I1 channelNoteOn
  ALIAS I2 channelNoteOff
  ALIAS I3 maxValClockNum
  ALIAS I4 clockNum
  ALIAS I5 clockNumMod
  ALIAS I6 arpIndex
  ALIAS I7 isOctave
  ALIAS I8 isOctaveMod
  ALIAS I9 arpOctaveValue
  ALIAS IA phraseValSend
  ALIAS IB phraseIndex # NOTE this phraseIndex is the playing index, not the setting index
  ALIAS IC numPressedOffset
  ALIAS ID phraseTemp
  ALIAS IE gateTemp

  # sysex

  ALIAS J0 numPressed
  ALIAS J1 arpPhraseToggle
  ALIAS J2 arpPhraseOnOffToggle
  ALIAS J3 tempoPulse
  ALIAS J4 gate
  ALIAS J5 velocity
  ALIAS J6 arpValueModeMod
  ALIAS J8 phraseVal
  ALIAS JA phraseLengthPlusOffset
  ALIAS J15 gateOpened

  # assign local

  # these are only defined here, since they are essentially constants - will not change past this
  MATH channelCC = B0 + channelVal
  MATH channelNoteOn = 90 + channelVal
  MATH channelNoteOff = 80 + channelVal

  ASS clockNum = 0
  ASS isOctave = 0
  ASS maxValClockNum = maxValClockNumNorm

END

# sysex reception

IF M0 == F0

  IF M2 == 00
    ASS numPressed = M3
    BLOCK
    EXIT
  END

  IF M2 == 01
    ASS arpPhraseToggle = M3
    BLOCK
    EXIT
  END

  IF M2 == 02
    ASS arpPhraseOnOffToggle = M3
    BLOCK
    EXIT
  END

  IF M2 == 03
    ASS tempoPulse = M3
    IF tempoPulse == 96
      ASS maxValClockNum = maxValClockNumEdge
    ELSE
      ASS maxValClockNum = maxValClockNumNorm
    END
    BLOCK
    EXIT
  END

  IF M2 == 04
    MATH gateTemp = M3 * 100
    MATH gateTemp = gateTemp + M4
    ASS gate = gateTemp
    BLOCK
    EXIT
  END

  IF M2 == 05
    ASS velocity = M3
    BLOCK
    EXIT
  END

  IF M2 == 06
    ASS arpValueModeMod = M3
    BLOCK
    EXIT
  END

  IF M2 == 08
    ASS phraseVal = M3
    BLOCK
    EXIT
  END

  IF M2 == 0A
    ASS phraseLengthPlusOffset = M3
    BLOCK
    EXIT
  END

  IF M2 == 19
    ASS gateOpened = 1
    BLOCK
    EXIT
  END

  IF M2 == 20
    ASS J20 = M3 M4 M5 M6 M7 M8 M9 MA MB M$12 # MC hardcoded incorrectly in sb
    BLOCK
    EXIT
  END

  IF M2 > 29
    # reset phraseValues if we're restarting
    IF M2 == 2A
      ASS J2A = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    END
    MATH phraseTemp = M3 * 100
    MATH phraseTemp = phraseTemp + M4
    ASS JM2 = phraseTemp
    BLOCK
    EXIT
  END

  # reset channel when init sysex received
  IF M2 == 1C 00
    # (re)set sysex variables
    # NOTE could move this also into the init load for completeness (or remove local from init load?)

    ASS numPressed = 0
    ASS arpPhraseToggle = 0
    ASS arpPhraseOnOffToggle = 0
    ASS tempoPulse = 24
    ASS gate = 0
    ASS velocity = 64
    ASS arpValueModeMod = 0
    ASS phraseVal = 0
    ASS phraseLengthPlusOffset = 2A
    ASS gateOpened = 0
    ASS J20 = 00 00 00 00 00 00 00 00 00 00 # arp values (J10 J11 J12 J13 J14 J15 J16 J17 J18 J19)
    ASS J2A = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 # phrase sequence (J2A J2B J2C J2D J2E J2F J30 J31 J32 J33 J34 J35 J36 J37 J38 J39 ETC.)

    # reset necessary local variables
    ASS clockNum = 0
    ASS isOctave = 0
    ASS maxValClockNum = maxValClockNumNorm

    BLOCK
    EXIT
  END
END

# end sysex reception

# if message is clock
# NOTE could likely change order of conditionals here - might be more efficient
IF M0 == F8
  # if gate is open (numPressed is greater than zero)
  IF numPressed > 0
    # if arpPhraseOnOffToggle is on
    IF arpPhraseOnOffToggle == 1
      # process midi clock
      # maxVal = (floor of (ffff / lcm of all possible tempoPulse)) * lcm of all possible tempoPulse
      IF clockNum == maxValClockNum
        ASS clockNum = 0
      END
      IF gateOpened == 1
        ASS clockNum = 0 # NOTE might need to be reconfigured if clock signal is too fast for processing, as this may reset clock inadvertantly
      END
      MATH clockNumMod = clockNum % tempoPulse
      # if clockNum modulo the number set from above is zero, allow clock
      IF clockNumMod == 0
        # if isArp
        IF arpPhraseToggle == 0
          # if value mode is 0 (asc 1)
          IF arpValueModeMod == 0
            # if gateOpened, or if first instance of clock since first key was pressed
            IF gateOpened == 1
              MATH arpIndex = numPressed + arpOffset
              ASS gateOpened = 0
            END
            # arpIndex will initially be set to numPressed + 32, but after it's set to numPressed + 32 - 1, it will be automatically decreased each run through
            # this decrease stops once we go under 32 - at that point it's reset
            MATH arpIndex = arpIndex - 1
            IF arpIndex == 1F
              MATH arpIndex = numPressed + arpOffset
              # NOTE need to subtract one here because subtraction always needs to occur after reset
              MATH arpIndex = arpIndex - 1
            END
            SEND channelNoteOn JI6 velocity
            SEND channelNoteOff JI6 velocity +DJ4
          END
          # if value mode is 1 (asc 2)
          IF arpValueModeMod == 1
            # if gateOpened, or if first instance of clock since first key was pressed
            IF gateOpened == 1
              MATH arpIndex = numPressed + arpOffset
              ASS isOctave = 0
              ASS gateOpened = 0
            END
            # if not isOctave, business as usual
            IF isOctave == 0
              MATH arpIndex = arpIndex - 1
              IF arpIndex == 1F
                MATH arpIndex = numPressed + arpOffset
                # NOTE need to subtract one here because subtraction always needs to occur after reset
                MATH arpIndex = arpIndex - 1
              END
              SEND channelNoteOn JI6 velocity
              SEND channelNoteOff JI6 velocity +DJ4
              ASS isOctave = 1
            # if isOctave, add 12 semitones and send that instead
            ELSE
              MATH arpOctaveValue = JI6 + $12 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
              ASS isOctave = 0
            END
          END
          # if value mode is 2 (asc 3)
          IF arpValueModeMod == 2
            # if gateOpened, or if first instance of clock since first key was pressed
            IF gateOpened == 1
              MATH arpIndex = numPressed + arpOffset
              ASS isOctave = 0
              ASS gateOpened = 0
            END
            MATH isOctaveMod = isOctave % 3
            # if isOctaveMod is 0, business as usual
            IF isOctaveMod == 0
              MATH arpIndex = arpIndex - 1
              IF arpIndex == 1F
                MATH arpIndex = numPressed + arpOffset
                # NOTE need to subtract one here because subtraction always needs to occur after reset
                MATH arpIndex = arpIndex - 1
              END
              SEND channelNoteOn JI6 velocity
              SEND channelNoteOff JI6 velocity +DJ4
              MATH isOctave = isOctave + 1
            END
            # if isOctaveMod is 1, add 12 semitones and send that instead
            IF isOctaveMod == 1
              MATH arpOctaveValue = JI6 + $12 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
              MATH isOctave = isOctave + 1
            END
            # if isOctaveMod is 2, add 24 semitones and send that instead
            IF isOctaveMod == 2
              MATH arpOctaveValue = JI6 + $24 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
              MATH isOctave = isOctave + 1
            END
          END
          # if value mode is 3 (desc 1)
          IF arpValueModeMod == 3
            # if gateOpened, or if first instance of clock since first key was pressed
            IF gateOpened == 1
              ASS arpIndex = 1F
              ASS gateOpened = 0
            END
            # arpIndex will initially be set to 31, but after it's set to 32, it will be automatically increased each run through
            # this increase stops once we go over numPressed - at that point it's reset
            MATH arpIndex = arpIndex + 1
            MATH numPressedOffset = numPressed + arpOffset
            IF arpIndex >= numPressedOffset
              ASS arpIndex = 1F
              # NOTE need to add one here because subtraction always needs to occur after reset
              MATH arpIndex = arpIndex + 1
            END
            SEND channelNoteOn JI6 velocity
            SEND channelNoteOff JI6 velocity +DJ4
          END
          # if value mode is 4 (desc 2)
          IF arpValueModeMod == 4
            # if gateOpened, or if first instance of clock since first key was pressed
            IF gateOpened == 1
              ASS arpIndex = 1F
              ASS isOctave = 0
              ASS gateOpened = 0
            END
            # if not isOctave, business as usual
            IF isOctave == 0
              MATH arpIndex = arpIndex + 1
              MATH numPressedOffset = numPressed + arpOffset
              IF arpIndex >= numPressedOffset
                ASS arpIndex = 1F
                # NOTE need to add one here because subtraction always needs to occur after reset
                MATH arpIndex = arpIndex + 1
              END
              SEND channelNoteOn JI6 velocity
              SEND channelNoteOff JI6 velocity +DJ4
              ASS isOctave = 1
            # if isOctave, add 12 semitones and send that instead
            ELSE
              MATH arpOctaveValue = JI6 + $12 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
              ASS isOctave = 0
            END
          END
          # if value mode is 5 (desc 3)
          IF arpValueModeMod == 5
            # if gateOpened, or if first instance of clock since first key was pressed
            IF gateOpened == 1
              ASS arpIndex = 1F
              ASS isOctave = 0
              ASS gateOpened = 0
            END
            MATH isOctaveMod = isOctave % 3
            # if isOctaveMod is 0, business as usual
            IF isOctaveMod == 0
              MATH arpIndex = arpIndex + 1
              MATH numPressedOffset = numPressed + arpOffset
              IF arpIndex >= numPressedOffset
                ASS arpIndex = 1F
                # NOTE need to add one here because subtraction always needs to occur after reset
                MATH arpIndex = arpIndex + 1
              END
              SEND channelNoteOn JI6 velocity
              SEND channelNoteOff JI6 velocity +DJ4
              ASS isOctave = 1
            END
            # if isOctaveMod is 1, add 12 semitones and send that instead
            IF isOctaveMod == 1
              MATH arpOctaveValue = JI6 + $12 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
              MATH isOctave = isOctave + 1
            END
            # if isOctaveMod is 2, add 24 semitones and send that instead
            IF isOctaveMod == 2
              MATH arpOctaveValue = JI6 + $24 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
              MATH isOctave = isOctave + 1
            END
            # NOTE could use if else here, have chosen not to because I think this is more readable
            # NOTE also might be able to multiply isOctaveMod by 12, add, and always send arpOctaveValue
            # NOTE could make this a subroutine
          END
          # if value mode is 6 (rand 1)
          IF arpValueModeMod == 6
            # if gateOpened, or if first instance of clock since first key was pressed
            IF gateOpened == 1
              ASS gateOpened = 0
            END
            MATH arpIndex = RFF % numPressed
            MATH arpIndex = arpIndex + arpOffset
            SEND channelNoteOn JI6 velocity
            SEND channelNoteOff JI6 velocity +DJ4
          END
          # if value mode is 7 (rand 2)
          IF arpValueModeMod == 7
            # if gateOpened, or if first instance of clock since first key was pressed
            IF gateOpened == 1
              ASS gateOpened = 0
            END
            # NOTE this is completely random - thus ignoring the note played before it - the octave will not necessarily match up with previous note
            MATH arpIndex = RFF % numPressed
            MATH isOctaveMod = RFF % 2
            MATH arpIndex = arpIndex + arpOffset
            # if not isOctaveMod, business as usual
            IF isOctaveMod == 0
              SEND channelNoteOn JI6 velocity
              SEND channelNoteOff JI6 velocity +DJ4
            # if isOctaveMod, add 12 semitones and send that instead
            ELSE
              MATH arpOctaveValue = JI6 + $12 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
            END
          END
          # if value mode is 8 (rand 3)
          IF arpValueModeMod == 8
            # if gateOpened, or if first instance of clock since first key was pressed
            IF gateOpened == 1
              ASS gateOpened = 0
            END
            MATH arpIndex = RFF % numPressed
            MATH isOctaveMod = RFF % 3
            MATH arpIndex = arpIndex + arpOffset
            # if isOctaveMod is 0, business as usual
            IF isOctaveMod == 0
              SEND channelNoteOn JI6 velocity
              SEND channelNoteOff JI6 velocity +DJ4
            END
            # if isOctaveMod is 1, add 12 semitones and send that instead
            IF isOctaveMod == 1
              MATH arpOctaveValue = JI6 + $12 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
            END
            # if isOctaveMod is 2, add 24 semitones and send that instead
            IF isOctaveMod == 2
              MATH arpOctaveValue = JI6 + $24 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
            END
          END
          # NOTE this currently appears the same as the general asc - this is because the way they are sorted will be the same
          # if value mode is 9 (order 1)
          IF arpValueModeMod == 9
            IF gateOpened == 1
              MATH arpIndex = numPressed + arpOffset
              ASS gateOpened = 0
            END
            # arpIndex will initially be set to numPressed + 32, but after it's set to numPressed + 32 - 1, it will be automatically decreased each run through
            # this decrease stops once we go under 32 - at that point it's reset
            MATH arpIndex = arpIndex - 1
            IF arpIndex == 1F
              MATH arpIndex = numPressed + arpOffset
              # NOTE need to subtract one here because subtraction always needs to occur after reset
              MATH arpIndex = arpIndex - 1
            END
            SEND channelNoteOn JI6 velocity
            SEND channelNoteOff JI6 velocity +DJ4
          END
          # if value mode is 10 (order 2)
          IF arpValueModeMod == A
            # if gateOpened, or if first instance of clock since first key was pressed
            IF gateOpened == 1
              MATH arpIndex = numPressed + arpOffset
              ASS isOctave = 0
              ASS gateOpened = 0
            END
            # if not isOctave, business as usual
            IF isOctave == 0
              MATH arpIndex = arpIndex - 1
              IF arpIndex == 1F
                MATH arpIndex = numPressed + arpOffset
                # NOTE need to subtract one here because subtraction always needs to occur after reset
                MATH arpIndex = arpIndex - 1
              END
              SEND channelNoteOn JI6 velocity
              SEND channelNoteOff JI6 velocity +DJ4
              ASS isOctave = 1
            # if isOctave, add 12 semitones and send that instead
            ELSE
              MATH arpOctaveValue = JI6 + $12 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
              ASS isOctave = 0
            END
          END
          # if value mode is 11 (order 3)
          IF arpValueModeMod == B
            # if gateOpened, or if first instance of clock since first key was pressed
            IF gateOpened == 1
              MATH arpIndex = numPressed + arpOffset
              ASS isOctave = 0
              ASS gateOpened = 0
            END
            MATH isOctaveMod = isOctave % 3
            # if isOctaveMod is 0, business as usual
            IF isOctaveMod == 0
              MATH arpIndex = arpIndex - 1
              IF arpIndex == 1F
                MATH arpIndex = numPressed + arpOffset
                # NOTE need to subtract one here because subtraction always needs to occur after reset
                MATH arpIndex = arpIndex - 1
              END
              SEND channelNoteOn JI6 velocity
              SEND channelNoteOff JI6 velocity +DJ4
              MATH isOctave = isOctave + 1
            END
            # if isOctaveMod is 1, add 12 semitones and send that instead
            IF isOctaveMod == 1
              MATH arpOctaveValue = JI6 + $12 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
              MATH isOctave = isOctave + 1
            END
            # if isOctaveMod is 2, add 24 semitones and send that instead
            IF isOctaveMod == 2
              MATH arpOctaveValue = JI6 + $24 # NOTE see if this should be -12 or +12
              SEND channelNoteOn arpOctaveValue velocity
              SEND channelNoteOff arpOctaveValue velocity +DJ4
              MATH isOctave = isOctave + 1
            END
          END
        # else isPhrase
        # because we need the phrase to be relative, we'll need the global array to contain offset, not note value
        # offset will be used in conjunction with note in, also stored in the global array
        # additionally, -1 implies a rest, so nothing will be played
        ELSE
          # if gateOpened, or if first instance of clock since first key was pressed
          IF gateOpened == 1
            ASS phraseIndex = 2A
            ASS gateOpened = 0
          END
          # if phrase offset is not a rest
          IF JIB != 2E57
            MATH phraseValSend = phraseVal + JIB
            SEND channelNoteOn phraseValSend velocity
            SEND channelNoteOff phraseValSend velocity +DJ4
          END
          IF phraseIndex != phraseLengthPlusOffset
            MATH phraseIndex = phraseIndex + 1
          ELSE
            ASS phraseIndex = 2A
          END
        END
        F8 = XX +B
      ELSE
        XX = XX +B
      END
      MATH clockNum = clockNum + 1
    ELSE
      XX = XX +B
    END
  ELSE
    XX = XX +B
  END
ELSE
  XX = XX +B
END
