# xtouch test code

# TEST NOTES










# xtouch mini

# full explanation:
# this file builds out the arpeggiator / drum roll for each channel
# because tempo will be determined by ableton link midi clock, the first knob will determine which clock messages are heeded and which are ignored
# link runs clock at 24 ppqn, or 24 pulses per quarter note / beat
# there are multiple tempos, determined by knob 1 on the xtouch:
#
# 0. full range - this is as many tempos as we can fit
# 8/1 - 48
# 6/1 - 36
# 4/1 - 24
# 3/1 - 18
# 2/1 - 12
# 3/2 - 9
# 1/1 - 6
# 2/3 - 4
# 1/2 - 3
# 1/3 - 2
# 1/6 - 1
#
# 1. beatmaker - based on the default tempos of the drum roll in beatmaker pro - slightly fewer options than full range
# 4/1 - 24
# 2/1 - 12
# 3/2 - 9
# 1/1 - 6
# 2/3 - 4
# 1/2 - 3
#
# 2. factor of two - any tempo that is a factor of 2 of a 4/4 beat
# 16/1 - 96
# 8/1 - 48
# 4/1 - 24
# 2/1 - 12
# 1/1 - 6
# 1/2 - 3
#
# 3. factor of three - any tempo that is a factor of 3 of a 4/4 beat
# 12/1 - 72
# 6/1 - 36
# 3/1 - 18
# 3/2 - 9
# 2/3 - 4
# 1/3 - 2
#
# For the first, we have 11 modes, which translates to around 11.5 per
# 12 11 11 12 12 12 12 12 11 11 12
# For the second, we have 6 modes, which translates to around 21 per
# 22 21 21 21 21 22
# button 1 will decrease arp type / turn on set phrase mode
# button 9 will increase arp type / add rest as part of phrase
# button 2 will toggle arp / phrase
# button 10 will turn arp / phrase on or off

# J is the local storage array (database)

IF LOAD

  # local
  ALIAS I0 tempoMode
  ALIAS I1 arpValueMode
  ALIAS I2 previousDrumVal
  ALIAS I3 gateMode
  ALIAS I4 gateFactor
  ALIAS I5 resetIndex
  ALIAS I6 resetIndexMinusOne
  ALIAS I7 gateTemp # TODO

  ALIAS J0 currentChannel
  ALIAS J2 arpPhraseToggle
  ALIAS J3 arpPhraseOnOffToggle
  ALIAS J4 tempoModeMod
  ALIAS J5 tempoPulse
  ALIAS J6 gateModeMod
  ALIAS J7 gate
  ALIAS J8 velocity
  ALIAS J9 arpValueModeMod
  ALIAS JA setPhrase
  ALIAS JC phraseIndex
  ALIAS JE arpModeSwitched # NOTE gateOpened
  ALIAS JF waveguideToggle
  ALIAS J10 drumParams
  ALIAS J14 isLatch

  # assign local
  # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
  ASS tempoMode = 0
  # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
  ASS gateMode = 0
  # NOTE if this isn't reset on each 'install', then it's technically possible it could decrease/increase to the value min/max
  ASS arpValueMode = 8004
  # NOTE this is set to 'select' on initial load
  ASS previousDrumVal = 04
  ASS gateFactor = 1

END

# sysex reception

IF M0 == F0

  IF M2 == 00
    ASS currentChannel = M3
    # TEST
    # ensure xtouch receives currentChannel
    LOG currentChannel_SYSEX_RECEIVED J0
    # END TEST
    BLOCK
    EXIT
  END

  IF M2 == 0A
    ASS setPhrase = M3
    # TEST
    # ensure xtouch receives setPhrase
    LOG setPhrase_SYSEX_RECEIVED JA
    # END TEST
    # Turn off setPhrase light when sysex received
    IF setPhrase == 0
      SEND 90 00 00
    END
    BLOCK
    EXIT
  END

  IF M2 == 0E
    ASS arpModeSwitched = M3
    # TEST
    # ensure xtouch receives gateOpened
    LOG gateOpened_SYSEX_RECEIVED JE
    # END TEST
    BLOCK
    EXIT
  END

  # Turn off lights when init sysex received
  # NOTE M1 used due to SB limiting comparisons to four indices
  IF M1 == FF FF 00 00
    # reset necessary local variables
    # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
    ASS tempoMode = 0
    # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
    ASS gateMode = 0
    # NOTE if this isn't reset on each 'install', then it's technically possible it could decrease/increase to the value min/max
    ASS arpValueMode = 8004
    # NOTE this is set to 'select' on initial load
    ASS previousDrumVal = 04
    # TEST
    # uncomment to turn on all lights on xtouch
    # IF LOAD
    #   ALIAS I0 resetIndex
    #   ALIAS I1 resetIndexMinusOne
    #   ASS resetIndex = 1
    #   WHILE resetIndex < 11
    #     MATH resetIndexMinusOne = resetIndex - 1
    #     # these should only go up to eight
    #     IF resetIndex < 9
    #       # reset lighting on knobs
    #       SEND BA resetIndex 7F
    #     END
    #     # reset button lighting
    #     SEND 90 resetIndexMinusOne 01
    #     MATH resetIndex = resetIndex + 1
    #   END
    # END
    # END TEST
    ASS resetIndex = 1
    # loop until this is done for all sixteen buttons
    WHILE resetIndex < 11
      MATH resetIndexMinusOne = resetIndex - 1
      # these should only go up to eight
      IF resetIndex < 9
        # reset lighting on knobs
        SEND BA resetIndex 00
        # set lighting to 'pan'
        SEND B0 resetIndex 02
      END
      # reset button lighting
      SEND 90 resetIndexMinusOne 00
      MATH resetIndex = resetIndex + 1
    END
    ASS J0 = 00 # currentChannel
    ASS J1 = 00 # numPressed
    ASS J2 = 00 # arpPhraseToggle
    ASS J3 = 00 # arpPhraseOnOffToggle
    ASS J4 = 00 # tempoModeMod
    ASS J5 = 24 # tempoPulse
    ASS J6 = 00 # gateModeMod
    ASS J7 = 00 # gate
    ASS J8 = 64 # velocity
    ASS J9 = 00 # arpValueModeMod
    ASS JA = 00 # setPhrase
    ASS JB = 3C # phraseVal
    ASS JC = 2A # phraseindex
    ASS JD = 2A # phraseLengthPlusOffset
    ASS JE = 00 # gateOpened
    ASS JF = 00 # waveguideToggle
    ASS J10 = 0E # drumParams (Part 1)
    ASS J11 = 0F # drumParams (Part 2)
    ASS J12 = 10 # drumParams (Part 1+2)
    ASS J13 = 67 # drumParams (wg send) (103)
    ASS J14 = 00 # isLatch
    ASS J20 = 00 00 00 00 00 00 00 00 00 00 # arp values (J10 J11 J12 J13 J14 J15 J16 J17 J18 J19)
    ASS J2A = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 # phrase sequence (J2A J2B J2C J2D J2E J2F J30 J31 J32 J33 J34 J35 J36 J37 J38 J39 ETC.)
    # send init tempo lighting
    SEND BA 01 $26
    # send init velocity lighting
    SEND BA 03 $100
    # send init drum lighting
    SEND 90 04 01
    # TEST
    # ensure lights turn off on init
    LOG LIGHTS_OFF_SYSEX_RECEIVED
    LOG RESET_SYSEX_RECEIVED
    # END TEST
    BLOCK
    EXIT
  END
END

# end sysex reception

# if it is a button push
IF MT == 90
  # if it is a knob 1 button push, increase tempo mode
  # if variable is too high, reset
  IF M1 == 00 7F
    MATH tempoMode = tempoMode + 1
    # set tempo mode to variable modulo 4
    MATH tempoModeMod = tempoMode % 4
    IF tempoModeMod == 0
      ASS tempoPulse = $24
      # SEND SYSEX
      SEND F0 CC 05 tempoPulse F7 +F
      # END SYSEX
      SEND BA 01 $26
    END
    # set each tempoPulse to default value on switching
    # also send data to xtouch to reflect this
    IF tempoModeMod == 1
      ASS tempoPulse = $24
      # SEND SYSEX
      SEND F0 CC 05 tempoPulse F7 +F
      # END SYSEX
      SEND BA 01 00
    END
    IF tempoModeMod == 2
      ASS tempoPulse = $24
      # SEND SYSEX
      SEND F0 CC 05 tempoPulse F7 +F
      # END SYSEX
      SEND BA 01 $50
    END
    IF tempoModeMod == 3
      ASS tempoPulse = $18
      # SEND SYSEX
      SEND F0 CC 05 tempoPulse F7 +F
      # END SYSEX
      SEND BA 01 $50
    END
    # TEST
    # ensure tempoModeMod changes accordingly and tempoPulse correlates
    LOG tempoMode tempoModeMod
    LOG tempoPulse tempoPulse
    # END TEST
  END

  # if it is a knob 2 button push, increase gate mode
  # if variable is too high, reset
  IF M1 == 01 7F
    MATH gateMode = gateMode + 1
    # set tempo mode to variable modulo 6
    # NOTE preventing the light from sending will change the length more quickly, more easily
    # NOTE will be testing with live to see best setup here
    MATH gateModeMod = gateMode % 6
    IF gateModeMod == 0
      ASS gateFactor = 1
      SEND BA 02 00
    END
    IF gateModeMod == 1
      ASS gateFactor = 2
      SEND BA 02 00
    END
    IF gateModeMod == 2
      ASS gateFactor = 5
      SEND BA 02 00
    END
    IF gateModeMod == 3
      ASS gateFactor = 10
      SEND BA 02 00
    END
    IF gateModeMod == 4
      ASS gateFactor = 20
      SEND BA 02 00
    END
    IF gateModeMod == 5
      ASS gateFactor = 40
      SEND BA 02 00
    END
    # TEST
    # ensure gateModeMod changes accordingly and gate correlates
    LOG gateMode gateModeMod
    LOG gate gate
    # END TEST
  END

  # if it is a button 1 push
  IF M0 == 9A 08 7F
    # if arp then increase variable
    IF arpPhraseToggle == 0
      MATH arpValueMode = arpValueMode + 1
      # set value mode to variable modulo 12
      MATH arpValueModeMod = arpValueMode % C
      # SEND SYSEX
      SEND F0 C1 09 arpValueModeMod F7 +F
      # END SYSEX
      # NOTE uncommenting this and adding sysex makes clockNum, isOctave, and arpIndex reset whenever the arpMode changes
      # ASS arpModeSwitched = 1
    # if phrase then toggle setPhrase
    ELSE
      IF setPhrase == 0
        ASS setPhrase = 1
        # SEND SYSEX
        SEND F0 11 0A setPhrase F7 +F
        # END SYSEX
      ELSE
        ASS setPhrase = 0
        # SEND SYSEX
        SEND F0 11 0A setPhrase F7 +F
        # END SYSEX
        ASS phraseIndex = 2A
      END
    END
    # TEST
    # ensure arpValueModeMod changes accordingly or setPhrase changes
    LOG arpValueMode arpValueModeMod
    LOG setPhrase setPhrase
    # END TEST
  END

  # if it is a button 9 push
  IF M0 == 9A 10 7F
    # if arp then decrease variable
    IF arpPhraseToggle == 0
      MATH arpValueMode = arpValueMode - 1
      # set value mode to variable modulo 12
      MATH arpValueModeMod = arpValueMode % C
      # SEND SYSEX
      SEND F0 C1 09 arpValueModeMod F7 +F
      # END SYSEX
    # if phrase then add rest to phrase sequence
    ELSE
      IF setPhrase == 1
        SEND F0 11 FF 2E 57 F7 +F
        # NOTE not currently planning on handling this, but there may is likely a race condition between rest and note that could cause issues
        # TEST
        # ensure rest sent
        LOG REST_SYSEX_SENT
        # END TEST
      END
    END
    # TEST
    # ensure arpValueModeMod changes accordingly
    LOG arpValueMode arpValueModeMod
    # END TEST
  END

  # if it is a button 2 push toggle arp / phrase
  IF M1 == 09 7F
    IF arpPhraseToggle == 0
      ASS arpPhraseToggle = 1
      # SEND SYSEX
      SEND F0 C1 02 arpPhraseToggle F7 +F
      # END SYSEX
    ELSE
      ASS arpPhraseToggle = 0
      # SEND SYSEX
      SEND F0 C1 02 arpPhraseToggle F7 +F
      # END SYSEX
      IF setPhrase == 1
        ASS setPhrase = 0
        # SEND SYSEX
        SEND F0 11 0A setPhrase F7 +F
        # END SYSEX
        ASS phraseIndex = 2A
      END
    END
    # TEST
    # ensure arp and phrase are toggling and setPhrase is turned off (if on) when switched to arp
    IF arpPhraseToggle == 0
      LOG IS_ARP
    END
    IF arpPhraseToggle == 1
      LOG IS_PHRASE
    END
    LOG setPhrase setPhrase
    # END TEST
  END

  # if it is a button 10 push toggle button 2 selection on / off
  IF M1 == 11 7F
    IF arpPhraseOnOffToggle == 0
      ASS arpPhraseOnOffToggle = 1
      # SEND SYSEX
      SEND F0 C1 03 arpPhraseOnOffToggle F7 +F
      # END SYSEX
    ELSE
      ASS arpPhraseOnOffToggle = 0
      # SEND SYSEX
      SEND F0 C1 03 arpPhraseOnOffToggle F7 +F
      # END SYSEX
    END
    # TEST
    # ensure arp/phrase module is turned off or on
    IF arpPhraseOnOffToggle == 0
      LOG MODULE_OFF
    END
    IF arpPhraseOnOffToggle == 1
      LOG MODULE_ON
    END
    # END TEST
  END

  # if it is a button 3 push toggle latch
  IF M1 == 0A 7F
    IF isLatch == 0
      ASS isLatch = 1
      # SEND SYSEX
      SEND F0 11 14 isLatch F7 +F
      # END SYSEX
    ELSE
      ASS isLatch = 0
      # SEND SYSEX
      SEND F0 11 14 isLatch F7 +F
      # END SYSEX
    END
    # TEST
    # ensure latch is toggling
    IF isLatch == 0
      LOG LATCH_OFF
    END
    IF isLatch == 1
      LOG LATCH_ON
    END
    # END TEST
  END

  # if it is channel 1-6
  IF currentChannel < 6
    IF M1 == 07 7F
      IF waveguideToggle == 0
        ASS waveguideToggle = 1
      ELSE
        ASS waveguideToggle = 0
      END
      # TEST
      # ensure waveguide is toggled properly
      IF waveguideToggle == 0
        LOG WAVEGUIDE_STRING
      END
      IF waveguideToggle == 1
        LOG WAVEGUIDE_TUBE
      END
      # END TEST
    END
    # for all except the last, order is part 1, part 2, part 1 and 2
    # if it is button 5 - knobs control 'select'
    IF M1 == 0C 7F
      ASS drumParams = $14 $15 $16
      IF previousDrumVal != 04
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 6 - knobs control 'level'
    IF M1 == 0D 7F
      ASS drumParams = $17 $18 $19
      IF previousDrumVal != 05
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 7 - knobs control 'attack'
    IF M1 == 0E 7F
      ASS drumParams = $20 $21 $22
      IF previousDrumVal != 06
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 8 - knobs control 'release'
    IF M1 == 0F 7F
      ASS drumParams = $23 $24 $25
      IF previousDrumVal != 07
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 13 - knobs control 'pitch'
    IF M1 == 14 7F
      ASS drumParams = $26 $27 $28
      IF previousDrumVal != 0C
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 14 - knobs control 'modAmount'
    IF M1 == 15 7F
      ASS drumParams = $29 $30 $31
      IF previousDrumVal != 0D
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 15 - knobs control 'modRate'
    IF M1 == 16 7F
      ASS drumParams = $46 $47 $48
      IF previousDrumVal != 0E
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # order is decay, body, tune, send
    # if it is button 16 - knobs control 'waveguide'
    IF M1 == 17 7F
      ASS drumParams = $117 $118 $119 $103
      IF previousDrumVal != 0F
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
  END
END

# if it is a button note-off (important for lighting)
IF MT == 80
  IF M1 == 08 00
    IF arpPhraseToggle == 1
      IF setPhrase == 1
        SEND 90 00 01
      END
    END
  END

  IF M1 == 09 00
    IF arpPhraseToggle == 1
      SEND 90 01 01
    ELSE
      # NOTE this sends even when light is off
      IF setPhrase == 0
        SEND 90 00 00
      END
    END
  END

  IF M1 == 0A 00
    IF isLatch == 1
      SEND 90 02 01
    END
  END

  IF M1 == 11 00
    IF arpPhraseOnOffToggle == 1
      SEND 90 09 01
    END
  END

  # if it is channel 1-6
  IF currentChannel < 6
    IF M1 == 0C 00
      SEND 90 04 01
      ASS previousDrumVal = 04
    END
    IF M1 == 0D 00
      SEND 90 05 01
      ASS previousDrumVal = 05
    END
    IF M1 == 0E 00
      SEND 90 06 01
      ASS previousDrumVal = 06
    END
    IF M1 == 0F 00
      SEND 90 07 01
      ASS previousDrumVal = 07
    END
    IF M1 == 14 00
      SEND 90 0C 01
      ASS previousDrumVal = 0C
    END
    IF M1 == 15 00
      SEND 90 0D 01
      ASS previousDrumVal = 0D
    END
    IF M1 == 16 00
      SEND 90 0E 01
      ASS previousDrumVal = 0E
    END
    IF M1 == 17 00
      SEND 90 0F 01
      ASS previousDrumVal = 0F
    END
  END
END

# if it is a knob turn
IF MT == B0
  # TEST
  # ensure tempo lighting functions as expected
  # END TEST
  # if knob is 1 (tempo)
  # knob is sensitive down to one notch
  IF M1 == 1
    # if tempo mode is 0
    IF tempoModeMod == 0
      # NOTE because lighting does actually change the CC value, we need to handle this based on lighting
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= 6
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $13
        END
      END
      # if knob value is 14
      IF M2 >= $14
        IF M2 <= $19
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $26
        END
      END
      # if knob value is 27
      IF M2 >= $27
        IF M2 <= $32
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $39
        END
      END
      # if knob value is 40
      IF M2 >= $40
        IF M2 <= $45
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $52
        END
      END
      # if knob value is 53
      IF M2 >= $53
        IF M2 <= $58
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $65
        END
      END
      # if knob value is 66
      IF M2 >= $66
        IF M2 <= $71
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $78
        END
      END
      # if knob value is 79
      IF M2 >= $79
        IF M2 <= $84
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $91
        END
      END
      # if knob value is 92
      IF M2 >= $92
        IF M2 <= $97
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $104
        END
      END
      # if knob value is 105
      IF M2 >= $105
        IF M2 <= $110
          ASS tempoPulse = 2
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $117
        END
      END
      # if knob value is 118
      IF M2 >= $118
        IF M2 <= $122
          ASS tempoPulse = 1
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $127
        END
      END
      # turning down
      # if knob value is 12
      IF M2 >= 7
        IF M2 <= $12
          ASS tempoPulse = 48
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $0
        END
      END
      # if knob value is 25
      IF M2 >= $20
        IF M2 <= $25
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $13
        END
      END
      # if knob value is 38
      IF M2 >= $33
        IF M2 <= $38
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $26
        END
      END
      # if knob value is 51
      IF M2 >= $46
        IF M2 <= $51
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $39
        END
      END
      # if knob value is 64
      IF M2 >= $59
        IF M2 <= $64
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $52
        END
      END
      # if knob value is 77
      IF M2 >= $72
        IF M2 <= $77
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $65
        END
      END
      # if knob value is 90
      IF M2 >= $85
        IF M2 <= $90
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $78
        END
      END
      # if knob value is 103
      IF M2 >= $98
        IF M2 <= $103
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $91
        END
      END
      # if knob value is 116
      IF M2 >= $111
        IF M2 <= $116
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $104
        END
      END
      # if knob value is 126
      IF M2 >= $123
        IF M2 <= $126
          ASS tempoPulse = 2
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $117
        END
      END
    END

    # if tempo mode is 1
    IF tempoModeMod == 1
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= $12
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $25
        END
      END
      # if knob value is 26
      IF M2 >= $26
        IF M2 <= $37
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $50
        END
      END
      # if knob value is 51
      IF M2 >= $51
        IF M2 <= $62
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $75
        END
      END
      # if knob value is 76
      IF M2 >= $76
        IF M2 <= $87
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $100
        END
      END
      # if knob value is 101
      IF M2 >= $101
        IF M2 <= $112
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $127
        END
      END
      # turning down
      # if knob value is 24
      IF M2 >= $13
        IF M2 <= $24
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 00
        END
      END
      # if knob value is 49
      IF M2 >= $38
        IF M2 <= $49
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $25
        END
      END
      # if knob value is 74
      IF M2 >= $63
        IF M2 <= $74
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $50
        END
      END
      # if knob value is 99
      IF M2 >= $88
        IF M2 <= $99
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $75
        END
      END
      # if knob value is 126
      IF M2 >= $113
        IF M2 <= $126
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $100
        END
      END
    END

    # if tempo mode is 2
    IF tempoModeMod == 2
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= $12
          ASS tempoPulse = 48
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $25
        END
      END
      # if knob value is 26
      IF M2 >= $26
        IF M2 <= $37
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $50
        END
      END
      # if knob value is 51
      IF M2 >= $51
        IF M2 <= $62
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $75
        END
      END
      # if knob value is 76
      IF M2 >= $76
        IF M2 <= $87
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $100
        END
      END
      # if knob value is 101
      IF M2 >= $101
        IF M2 <= $112
          ASS tempoPulse = 3
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $127
        END
      END
      # turning down
      # if knob value is 24
      IF M2 >= $13
        IF M2 <= $24
          ASS tempoPulse = 96
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 00
        END
      END
      # if knob value is 49
      IF M2 >= $38
        IF M2 <= $49
          ASS tempoPulse = 48
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $25
        END
      END
      # if knob value is 74
      IF M2 >= $63
        IF M2 <= $74
          ASS tempoPulse = 24
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $50
        END
      END
      # if knob value is 99
      IF M2 >= $88
        IF M2 <= $99
          ASS tempoPulse = 12
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $75
        END
      END
      # if knob value is 126
      IF M2 >= $113
        IF M2 <= $126
          ASS tempoPulse = 6
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $100
        END
      END
    END

    # if tempo mode is 3
    IF tempoModeMod == 3
      # turning up
      # if knob value is 1
      IF M2 >= 1
        IF M2 <= $12
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $25
        END
      END
      # if knob value is 26
      IF M2 >= $26
        IF M2 <= $37
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $50
        END
      END
      # if knob value is 51
      IF M2 >= $51
        IF M2 <= $62
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $75
        END
      END
      # if knob value is 76
      IF M2 >= $76
        IF M2 <= $87
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $100
        END
      END
      # if knob value is 101
      IF M2 >= $101
        IF M2 <= $112
          ASS tempoPulse = 2
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $127
        END
      END
      # turning down
      # if knob value is 24
      IF M2 >= $13
        IF M2 <= $24
          ASS tempoPulse = 72
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 00
        END
      END
      # if knob value is 49
      IF M2 >= $38
        IF M2 <= $49
          ASS tempoPulse = 36
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $25
        END
      END
      # if knob value is 74
      IF M2 >= $63
        IF M2 <= $74
          ASS tempoPulse = 18
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $50
        END
      END
      # if knob value is 99
      IF M2 >= $88
        IF M2 <= $99
          ASS tempoPulse = 9
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $75
        END
      END
      # if knob value is 126
      IF M2 >= $113
        IF M2 <= $126
          ASS tempoPulse = 4
          BX = XX +B
          # SEND SYSEX
          SEND F0 CC 05 tempoPulse F7 +F
          # END SYSEX
          SEND BA 01 $100
        END
      END
    END
    # TEST
    # ensure tempoPulse aligns with tempoMode
    LOG tempoPulse tempoPulse
    # END TEST
  END
  # if knob is 2 (gate)
  # starting points: max will be ~5 seconds (5000), min will be .1 seconds (100)
  # 2.5 seconds should be enough to handle 96 pulses at 120 bpm,  but slower bpm's can move up to 5 seconds
  # overall: 0-127 (*2) (*5) (*10) (*20) (*40)
  IF M1 == 2
    MATH gate = M2 * gateFactor
    MATH gateTemp = gate / 100
    # SEND SYSEX
    SEND F0 CC 07 gateTemp gate F7 +F
    # END SYSEX
    # TEST
    # ensure gate aligns with gate
    # ensure gateFactor is correct
    LOG gate gate
    LOG gateFactor gateFactor
    # END TEST
  END
  # if knob is 3 (velocity)
  IF M1 == 3
    ASS velocity = M2
    # SEND SYSEX
    SEND F0 C1 08 velocity F7 +F
    # END SYSEX
    # TEST
    # ensure velocity aligns with velocity
    LOG velocity velocity
    # END TEST
  END
END

NX = XX +B
