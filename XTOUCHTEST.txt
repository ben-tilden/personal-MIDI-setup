# xtouch test code

# TEST NOTES
# TODO send lights off on reset
# NOTE address global reset
# TODO will need to handle sysex for lights reset
# TODO will need to eventually handle knobs for drumparams - this might need to be global
# TODO need to add velocity
# TODO add option to make gate longer
# 0-127 (*2) (*5) (*10) (*20) (*40)
# 2.5 seconds should be enough to handle 96 pulses at 120 bpm,  but slower bpm's might be helpful to move up to 5 seconds
# TODO make tempo knobs more sensitive (one notch / two notch - will need to send lighting accordingly)









# xtouch mini

# UPDATE: Reviewing further, the plan will be for this to run as an 'xtouch service', completely separate and distinct from channel
# this means, instead of attempting to store all channel data on here, there will be separate streambyter instances which will communicate with each other
# when the channel is manually changed from launchpad - data will be sent here (via the global array) from an individual 'channel service', with its own storage
# once this receives that data in the form of the global array, it can directly modify the global array
# the channel service will only allow data to pass if the 'channel' of the global array is equal to that channel
# the channel service will save its data in a local array once the channel is manually changed from launchpad

# full explanation:
# this file builds out the arpeggiator / drum roll for each channel
# because tempo will be determined by ableton link midi clock, the first knob will determine which clock messages are heeded and which are ignored
# link runs clock at 24 ppqn, or 24 pulses per quarter note / beat
# there are multiple tempos, determined by knob 1 on the xtouch:
#
# 0. full range - this is as many tempos as we can fit
# 8/1 - 48
# 6/1 - 36
# 4/1 - 24
# 3/1 - 18
# 2/1 - 12
# 3/2 - 9
# 1/1 - 6
# 2/3 - 4
# 1/2 - 3
# 1/3 - 2
# 1/6 - 1
#
# 1. beatmaker - based on the default tempos of the drum roll in beatmaker pro - slightly fewer options than full range
# 4/1 - 24
# 2/1 - 12
# 3/2 - 9
# 1/1 - 6
# 2/3 - 4
# 1/2 - 3
# 
# 2. factor of two - any tempo that is a factor of 2 of a 4/4 beat
# 16/1 - 96
# 8/1 - 48
# 4/1 - 24
# 2/1 - 12
# 1/1 - 6
# 1/2 - 3
#
# 3. factor of three - any tempo that is a factor of 3 of a 4/4 beat
# 12/1 - 72
# 6/1 - 36
# 3/1 - 18
# 3/2 - 9
# 2/3 - 4
# 1/3 - 2
#
# For the first, we have 11 modes, which translates to around 11.5 per
# 12 11 11 12 12 12 12 12 11 11 12
# For the second, we have 6 modes, which translates to around 21 per
# 22 21 21 21 21 22
# button 1 will decrease arp type / turn on set phrase mode
# button 9 will increase arp type / add rest as part of phrase
# button 2 will toggle arp / phrase
# button 10 will turn arp / phrase on or off

# global array will be set in the following way
# G0 - channel
# G1 - numPressed
# G2 - arpPhraseToggle
# G3 - arpPhraseOnOffToggle
# G4 - tempoModeMod
# G5 - tempoPulse
# G6 - gate
# G7 - arpValueModeMod
# G8 - setPhrase
# G9 - waveguideToggle
# GA - drumParams (Part 1)
# GB - drumParams (Part 2)
# GC - drumParams (Part 1+2)
# GD - velocity
# GE - break (null)
# GF - break (null)
# G10 - G19 - arp values        (G10 G11 G12 G13 G14 G15 G16 G17 G18 G19)
# G1A - G23 - arp order pressed (G1A G1B G1C G1D G1E G1F G20 G21 G22 G23)
# G24 - G43 - phrase sequence      (G24 G25 G26 G27 G28 G29 G2A G2B G2C G2D G2E G2F G30 G31 G32 G33 ETC.)

IF LOAD

  # TEST LIVE
  # NOTE dangerous - need to confirm that this is where we want the global reset to occur
  ASS G0 = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  # END TEST LIVE

  # local
  ALIAS I0 tempoMode
  ALIAS I1 arpValueMode
  ALIAS I2 previousDrumVal

  # global
  ALIAS G0 channel
  ALIAS G2 arpPhraseToggle
  ALIAS G3 arpPhraseOnOffToggle
  ALIAS G4 tempoModeMod
  ALIAS G5 tempoPulse
  ALIAS G6 gate
  ALIAS G7 arpValueModeMod
  ALIAS G8 setPhrase
  ALIAS G9 waveguideToggle
  ALIAS GA drumParams
  ALIAS GE arpModeSwitched # NOTE gateOpened
  ALIAS G12 phraseIndex

  # assign local
  # NOTE if this isn't reset on each 'install', then it's technically possible it could increase to the value max
  ASS tempoMode = 0
  # NOTE if this isn't reset on each 'install', then it's technically possible it could decrease/increase to the value min/max
  ASS arpValueMode = 8004
  # NOTE this is set to 'select' on initial load
  ASS previousDrumVal = 04
  # TEST
  LOG phraseIndex phraseIndex
  # END TEST
END

# Turn off setPhrase light when sysex received
IF M0 == F0 90 FF F7
  IF setPhrase == 0
    SEND 90 00 00
  END
  FX = XX +B
END

# if it is a button push
IF MT == 90
  # if it is a knob 1 button push, increase tempo mode
  # if variable is too high, reset
  IF M1 == 00 7F
    MATH tempoMode = tempoMode + 1
    # set tempo mode to variable modulo 3
    MATH tempoModeMod = tempoMode % 4
    IF tempoModeMod == 0
      ASS tempoPulse = $24
      SEND BA 01 $28
    END
    # set each tempoPulse to default value on switching
    # also send data to xtouch to reflect this
    IF tempoModeMod == 1
      ASS tempoPulse = $24
      SEND BA 01 $00
    END
    IF tempoModeMod == 2
      ASS tempoPulse = $24
      SEND BA 01 $53
    END
    IF tempoModeMod == 3
      ASS tempoPulse = $18
      SEND BA 01 $53
    END
    # TEST
    # ensure tempoModeMod changes accordingly and tempoPulse correlates
    LOG tempoMode tempoModeMod
    LOG tempoPulse tempoPulse
    # END TEST
  END

  # if it is a button 1 push
  IF M0 == 9A 08 7F
    # if arp then increase variable
    IF arpPhraseToggle == 0
      MATH arpValueMode = arpValueMode + 1
      # set value mode to variable modulo 12
      MATH arpValueModeMod = arpValueMode % C
      # NOTE uncommenting this makes clockNum, isOctave, and arpIndex reset whenever the arpMode changes
      # ASS arpModeSwitched = 1
    # if phrase then toggle setPhrase
    ELSE
      IF setPhrase == 0
        ASS setPhrase = 1
      ELSE
        ASS setPhrase = 0
        SEND F0 90 FF F7 +F
      END
    END
    # TEST
    # ensure arpValueModeMod changes accordingly or setPhrase changes
    LOG arpValueMode arpValueModeMod
    LOG setPhrase setPhrase
    # END TEST
  END

  # if it is a button 9 push
  IF M0 == 9A 10 7F
    # if arp then decrease variable
    IF arpPhraseToggle == 0
      MATH arpValueMode = arpValueMode - 1
      # set value mode to variable modulo 12
      MATH arpValueModeMod = arpValueMode % C
    # if phrase then add rest to phrase sequence
    ELSE
      IF setPhrase == 1
        SEND F0 2E 57 F7 +F
        # NOTE not currently planning on handling this, but there may is likely a race condition between rest and note that could cause issues
        # TEST
        # ensure rest sent
        LOG REST_SYSEX_SENT
        # END TEST
      END
    END
    # TEST
    # ensure arpValueModeMod changes accordingly
    LOG arpValueMode arpValueModeMod
    # END TEST
  END

  # if it is a button 2 push toggle arp / phrase
  IF M1 == 09 7F
    IF arpPhraseToggle == 0
      ASS arpPhraseToggle = 1
    ELSE
      ASS arpPhraseToggle = 0
      IF setPhrase == 1
        ASS setPhrase = 0
        SEND F0 90 FF F7 +F
      END
    END
    # TEST
    # ensure arp and phrase are toggling and setPhrase is turned off (if on) when switched to arp
    IF arpPhraseToggle == 0
      LOG IS_ARP
    END
    IF arpPhraseToggle == 1
      LOG IS_PHRASE
    END
    LOG setPhrase setPhrase
    # END TEST
  END

  # if it is a button 10 push toggle button 2 selection on / off
  IF M1 == 11 7F
    IF arpPhraseOnOffToggle == 0
      ASS arpPhraseOnOffToggle = 1
    ELSE
      ASS arpPhraseOnOffToggle = 0
    END
    # TEST
    # ensure arp/phrase module is turned off or on
    IF arpPhraseOnOffToggle == 0
      LOG MODULE_OFF
    END
    IF arpPhraseOnOffToggle == 1
      LOG MODULE_ON
    END
    # END TEST
  END

  # if it is channel 1-6
  IF channel < 6
    IF M1 == 07 7F
      IF waveguideToggle == 0
        ASS waveguideToggle = 1
      ELSE
        ASS waveguideToggle = 0
      END
      # TEST
      # ensure waveguide is toggled properly
      IF waveguideToggle == 0
        LOG WAVEGUIDE_STRING
      END
      IF waveguideToggle == 1
        LOG WAVEGUIDE_TUBE
      END
      # END TEST
    END
    # for all except the last, order is part 1, part 2, part 1 and 2
    # if it is button 5 - knobs control 'select'
    IF M1 == 0C 7F
      ASS drumParams = $14 $15 $16
      IF previousDrumVal != 04
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 6 - knobs control 'level'
    IF M1 == 0D 7F
      ASS drumParams = $17 $18 $19
      IF previousDrumVal != 05
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 7 - knobs control 'attack'
    IF M1 == 0E 7F
      ASS drumParams = $20 $21 $22
      IF previousDrumVal != 06
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 8 - knobs control 'release'
    IF M1 == 0F 7F
      ASS drumParams = $23 $24 $25
      IF previousDrumVal != 07
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 13 - knobs control 'pitch'
    IF M1 == 14 7F
      ASS drumParams = $26 $27 $28
      IF previousDrumVal != 0C
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 14 - knobs control 'modAmount'
    IF M1 == 15 7F
      ASS drumParams = $29 $30 $31
      IF previousDrumVal != 0D
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # if it is button 15 - knobs control 'modRate'
    IF M1 == 16 7F
      ASS drumParams = $46 $47 $48
      IF previousDrumVal != 0E
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
    # order is decay, body, tune, send
    # if it is button 16 - knobs control 'waveguide'
    IF M1 == 17 7F
      ASS drumParams = $117 $118 $119 $103
      IF previousDrumVal != 0F
        SEND 90 previousDrumVal 00
      END
      # TEST
      # ensure drumparams are assigned according to correct buttons
      LOG drumParams drumParams
      # END TEST
    END
  END
END

# if it is a button note-off (important for lighting)
IF MT == 80
  IF M1 == 08 00
    IF arpPhraseToggle == 1
      IF setPhrase == 1
        SEND 90 00 01
      END
    END
  END

  IF M1 == 09 00
    IF arpPhraseToggle == 1
      SEND 90 01 01
    ELSE
      # NOTE this sends even when light is off
      IF setPhrase == 0
        SEND 90 00 00
      END
    END
  END

  IF M1 == 11 00
    IF arpPhraseOnOffToggle == 1
      SEND 90 09 01
    END
  END

  IF M1 == 10 00
    IF phraseIndex >= 49 # NOTE 49 because this is the last value for which phraseIndex records
      SEND 90 00 00
    END
  END

  # if it is channel 1-6
  IF channel < 6
    IF M1 == 0C 00
      SEND 90 04 01
      ASS previousDrumVal = 04
    END
    IF M1 == 0D 00
      SEND 90 05 01
      ASS previousDrumVal = 05
    END
    IF M1 == 0E 00
      SEND 90 06 01
      ASS previousDrumVal = 06
    END
    IF M1 == 0F 00
      SEND 90 07 01
      ASS previousDrumVal = 07
    END
    IF M1 == 14 00
      SEND 90 0C 01
      ASS previousDrumVal = 0C
    END
    IF M1 == 15 00
      SEND 90 0D 01
      ASS previousDrumVal = 0D
    END
    IF M1 == 16 00
      SEND 90 0E 01
      ASS previousDrumVal = 0E
    END
    IF M1 == 17 00
      SEND 90 0F 01
      ASS previousDrumVal = 0F
    END
  END
END

# if it is a knob turn
IF MT == B0
  # if knob is 1 (tempo)
  IF M1 == 1
    # if tempo mode is 0
    IF tempoModeMod == 0
      # if knob value is 0-11
      IF M2 < $12
        ASS tempoPulse = $48
      END
      # if knob value is 12-22
      IF M2 >= $12
        IF M2 < $23
          ASS tempoPulse = $36
        END
      END
      # if knob value is 23-33
      IF M2 >= $23
        IF M2 < $34
          ASS tempoPulse = $24
        END
      END
      # if knob value is 34-45
      IF M2 >= $34
        IF M2 < $46
          ASS tempoPulse = $18
        END
      END
      # if knob value is 46-57
      IF M2 >= $46
        IF M2 < $58
          ASS tempoPulse = $12
        END
      END
      # if knob value is 58-69
      IF M2 >= $58
        IF M2 < $70
          ASS tempoPulse = $9
        END
      END
      # if knob value is 70-81
      IF M2 >= $70
        IF M2 < $82
          ASS tempoPulse = $6
        END
      END
      # if knob value is 82-93
      IF M2 >= $82
        IF M2 < $94
          ASS tempoPulse = $4
        END
      END
      # if knob value is 94-104
      IF M2 >= $94
        IF M2 < $105
          ASS tempoPulse = $3
        END
      END
      # if knob value is 105-115
      IF M2 >= $105
        IF M2 < $116
          ASS tempoPulse = $2
        END
      END
      # if knob value is 116-127
      IF M2 >= $116
        ASS tempoPulse = $1
      END
    END
    # if tempo mode is 1
    IF tempoModeMod == 1
      # if knob value is 0-21
      IF M2 < $22
        ASS tempoPulse = $24
      END
      # if knob value is 22-42
      IF M2 >= $22
        IF M2 < $43
          ASS tempoPulse = $12
        END
      END
      # if knob value is 43-63
      IF M2 >= $43
        IF M2 < $64
          ASS tempoPulse = $9
        END
      END
      # if knob value is 64-84
      IF M2 >= $64
        IF M2 < $85
          ASS tempoPulse = $6
        END
      END
      # if knob value is 85-105
      IF M2 >= $85
        IF M2 < $106
          ASS tempoPulse = $4
        END
      END
      # if knob value is 106-127
      IF M2 >= $106
        ASS tempoPulse = $3
      END
    END
    # if tempo mode is 2
    IF tempoModeMod == 2
      # if knob value is 0-21
      IF M2 < $22
        ASS tempoPulse = $96
      END
      # if knob value is 22-42
      IF M2 >= $22
        IF M2 < $43
          ASS tempoPulse = $48
        END
      END
      # if knob value is 43-63
      IF M2 >= $43
        IF M2 < $64
          ASS tempoPulse = $24
        END
      END
      # if knob value is 64-84
      IF M2 >= $64
        IF M2 < $85
          ASS tempoPulse = $12
        END
      END
      # if knob value is 85-105
      IF M2 >= $85
        IF M2 < $106
          ASS tempoPulse = $6
        END
      END
      # if knob value is 106-127
      IF M2 >= $106
        ASS tempoPulse = $3
      END
    END
    # if tempo mode is 3
    IF tempoModeMod == 3
      # if knob value is 0-21
      IF M2 < $22
        ASS tempoPulse = $72
      END
      # if knob value is 22-42
      IF M2 >= $22
        IF M2 < $43
          ASS tempoPulse = $36
        END
      END
      # if knob value is 43-63
      IF M2 >= $43
        IF M2 < $64
          ASS tempoPulse = $18
        END
      END
      # if knob value is 64-84
      IF M2 >= $64
        IF M2 < $85
          ASS tempoPulse = $9
        END
      END
      # if knob value is 85-105
      IF M2 >= $85
        IF M2 < $106
          ASS tempoPulse = $4
        END
      END
      # if knob value is 106-127
      IF M2 >= $106
        ASS tempoPulse = $2
      END
    END
    # TEST
    # ensure tempoPulse aligns with tempoMode
    LOG tempoPulse tempoPulse
    # END TEST
  END
  # if knob is 2 (gate)
  # starting points: max will be ~5 seconds (5000), min will be .1 seconds (100)
  IF M1 == 2
    ASS gate = M2 # could multiply
    # TODO add option for pushing the button here for gate lengthening
    # TEST
    # ensure gate aligns with gate
    LOG gate $G6
    # END TEST
  END
END

NX = XX +B










# SCRAPS: (some of this will necessarily be used)

# if it is a channel notification (internal sysex)
IF MT == F0
#  # if channel sent in sysex does not align with global channel, change global channel
#  IF M1 == 1
#    IF G0 != 1
#      ASS G0 = 1
#    END
#  END
#  IF M1 == 2
#    IF G0 != 2
#      ASS G0 = 2
#    END
#  END
#  IF M1 == 3
#    IF G0 != 3
#      ASS G0 = 3
#    END
#  END
#  IF M1 == 4
#    IF G0 != 4
#      ASS G0 = 4
#    END
#  END
#  IF M1 == 5
#    IF G0 != 5
#      ASS G0 = 5
#    END
#  END
#  IF M1 == 6
#    IF G0 != 6
#      ASS G0 = 6
#    END
#  END
#  IF M1 == 7
#    IF G0 != 7
#      ASS G0 = 7
#    END
#  END
#  IF M1 == 8
#    IF G0 != 8
#      ASS G0 = 8
#    END
#  END
#  IF M1 == 9
#    IF G0 != 9
#      ASS G0 = 9
#    END
#  END
#  IF M1 == A
#    IF G0 != A
#      ASS G0 = A
#    END
#  END
#  IF M1 == B
#    IF G0 != B
#      ASS G0 = B
#    END
#  END
#  IF M1 == C
#    IF G0 != C
#      ASS G0 = C
#    END
#  END
#  # choose local array based on what G0 is
#  # each local array will have sequences of 100
#  IF G0 == 1
#    ASS currentChannelArray = channelOne
#  END
#  IF G0 == 2
#    ASS currentChannelArray = channelTwo
#  END
#  IF G0 == 3
#    ASS currentChannelArray = channelThree
#  END
#  IF G0 == 4
#    ASS currentChannelArray = channelFour
#  END
#  IF G0 == 5
#    ASS currentChannelArray = channelFive
#  END
#  IF G0 == 6
#    ASS currentChannelArray = channelSix
#  END
#  IF G0 == 7
#    ASS currentChannelArray = channelSeven
#  END
#  IF G0 == 8
#    ASS currentChannelArray = channelEight
#  END
#  IF G0 == 9
#    ASS currentChannelArray = channelNine
#  END
#  IF G0 == A
#    ASS currentChannelArray = channelTen
#  END
#  IF G0 == B
#    ASS currentChannelArray = channelEleven
#  END
#  IF G0 == C
#    ASS currentChannelArray = channelTwelve
#  END
END


  # default local array will be the following
  # did not make this perfectly align with G because the array itself won't perfectly align with its 100 offset
  # add current length as Y0, and offset the rest +1
  # Y0 - arpPhraseToggle
  # Y1 - arpPhraseOnOffToggle
  # Y2 - tempoMode
  # Y3 - tempoModeMod
  # Y4 - tempoPulse
  # Y5 - gate
  # Y6 - arpValueMode
  # Y7 - arpValueModeMod
  # Y8 - setPhrase
  # Y9 - waveguideToggle
  # YA - drumParams (Part 1)
  # YB - drumParams (Part 2)
  # YC - drumParams (Part 1+2)
  # YD - phrase sequence

  # we will use W, since it's the wide array, with 2048 slots over 256
  # NOTE unsure if only using one array will have any noticeable 'access' slowness - should be constant, so don't think it'll be an issue

  # currentChannelArray

#  # channelOne
#  ALIAS W0 channelOne
#  # channelTwo
#  ALIAS W$100 channelTwo
#  # channelThree
#  ALIAS W$200 channelThree
#  # channelFour
#  ALIAS W$300 channelFour
#  # channelFive
#  ALIAS W$400 channelFive
#  # channelSix
#  ALIAS W$500 channelSix
#  # channelSeven
#  ALIAS W$600 channelSeven
#  # channelEight
#  ALIAS W$700 channelEight
#  # channelNine
#  ALIAS W$800 channelNine
#  # channelTen
#  ALIAS W$900 channelTen
#  # channelEleven
#  ALIAS W$1000 channelEleven
#  # channelTwelve
#  ALIAS W$1100 channelTwelve
