# xtouch mini pseudocode

# full explanation:
# this file builds out the arpeggiator / drum roll for each channel
# because tempo will be determined by ableton link midi clock, the first knob will determine which clock messages are heeded and which are ignored
# link runs clock at 24 ppqn, or 24 pulses per quarter note / pulses
# there are multiple arp types, determined by knob 1 on the xtouch:
#
# 0. full range - this is as many tempos as we can fit
# 8/1 - 48
# 6/1 - 36
# 4/1 - 24
# 3/1 - 18
# 2/1 - 12
# 3/2 - 9
# 1/1 - 6
# 2/3 - 4
# 1/2 - 3
# 1/3 - 2
# 1/6 - 1
#
# 1. beatmaker - based on the default tempos of the drum roll in beatmaker pro - slightly fewer options than full range
# 4/1 - 24
# 2/1 - 12
# 3/2 - 9
# 1/1 - 6
# 2/3 - 4
# 1/2 - 3
# 
# 2. factor of two - any tempo that is a factor of 2 of a 4/4 beat
# 16/1 - 96
# 8/1 - 48
# 4/1 - 24
# 2/1 - 12
# 1/1 - 6
# 1/2 - 3
#
# 3. factor of three - any tempo that is a factor of 3 of a 4/4 beat
# 12/1 - 72
# 6/1 - 36
# 3/1 - 18
# 3/2 - 9
# 2/3 - 4
# 1/3 - 2
#
# For the first, we have 11 modes, which translates to around 11.5 per
# 12 11 11 12 12 12 12 12 11 11 12
# For the second, we have 6 modes, which translates to around 21 per
# 22 21 21 21 21 22
# button 1 will decrease arp type
# button 9 will increase arp type
# button 2 will turn arp off / on 

IF LOAD
  # set channel to channel (or -1)
  # each channel will have to be a different array
  # each array will need to be long enough to account for all buttons
  # set temp array first, then set channel array at end
  # set tempo variable to default 63
  # set value variable 
  # set arp tempo mode to 0
  # set arp value mode to 0
  # set arp to off

  # arpTempoMode
  # arpTempoModeMod
  # arpValueMode
  # arpValueModeMod
  # arpPhraseToggle
  # arpPhraseToggleMod
  # arpPhraseOnOffToggle
  # arpPhraseOnOffToggleMod
  # waveguideToggle
  # drumParams
  # tempoPulse
  # clockNum
  # clockNumMod
  # randMod
END

# TODO change M0 before any of this so channel is taken into consideration
# TODO make arpPhraseOnOffToggleMod determine
# TODO implement 'Gate' knob

# if it is a button push
IF MT == 90
	# if it is a knob 1 button push, increase arp tempo mode
	# if variable is too high, reset
	IF M1 == 00 7F
		MATH arpTempoMode = arpTempoMode + 1
		IF arpTempoMode == # standinMAXVAL
			ASS arpTempoMode = 0
		END
		# set tempo mode to variable modulo 3
		MATH arpTempoModeMod = arpTempoMode % 3
		# set tempoPulse depending on what the mode is
		# send corresponding lights as well
		# TODO figure out channel routing, since channel 11 will be taken - will likely have to go higher than 16
		IF arpTempoModeMod == 0
			ASS tempoPulse = 24
			SEND BA 01 28
		END
		IF arpTempoModeMod == 1
			ASS tempoPulse = 24
			SEND BA 01 0
		END
		IF arpTempoModeMod == 2
			ASS tempoPulse = 24
			SEND BA 01 53
		END
		IF arpTempoModeMod == 3
			ASS tempoPulse = 18
			SEND BA 01 53
		END
	END
	# if it is a button 1 push, increase variable
	# if variable is too low, reset
	IF M1 == 08 7F
		MATH arpValueMode = arpValueMode + 1
		IF arpValueMode == # standinMAXVAL
			ASS arpValueMode = 0
		END
		# set value mode to variable modulo 8
		MATH arpValueModeMod = arpValueMode % 8
	END

	# if it is a button 9 push, decrease variable
	# if variable is too low, reset
	IF M1 == 10 7F
		MATH arpValueMode = arpValueMode - 1
		IF arpValueMode == # standinMINVAL
			ASS arpValueMode = 0
		END
		# set value mode to variable modulo 8
		MATH arpValueModeMod = arpValueMode % 8
	END

	# if it is a button 2 push toggle arp / phrase
	IF M1 == 09 7F
		MATH arpPhraseToggle = arpPhraseToggle + 1
		IF arpPhraseToggle == # standinMAXVAL
			ASS arpPhraseToggle = 0
		END
		# set arp toggle to variable modulo 2
		MATH arpPhraseToggleMod = arpPhraseToggle % 2
	END

	# if it is a button 10 push toggle button 2 selection on / off
	IF M1 == 11 7F
		MATH arpPhraseOnOffToggle = arpPhraseOnOffToggle + 1
		IF arpPhraseOnOffToggle == # standinMAXVAL
			ASS arpPhraseOnOffToggle = 0
		END
		# set arp toggle to variable modulo 2
		MATH arpPhraseOnOffToggleMod = arpPhraseOnOffToggle % 2
	END

	# if it is channel 1-6
	IF M0 <= 6
		IF M1 == 07 7F
			MATH waveguideToggle = waveguideToggle + 1
			IF waveguideToggle == # standinMAXVAL
				ASS waveguideToggle = 0
			END
			# set arp toggle to variable modulo 2
			MATH waveguideToggleMod = waveguideToggle % 2
		END
		# for all except the last, order is part 1, part 2, part 1 and 2
		# if it is button 5 - knobs control 'select'
		IF M1 == 0C 7F
			ASS drumParams = $14 $15 $16
		END
		# if it is button 6 - knobs control 'level'
		IF M1 == 0D 7F
			ASS drumParams = $17 $18 $19
		END
		# if it is button 7 - knobs control 'attack'
		IF M1 == 0E 7F
			ASS drumParams = $20 $21 $22
		END
		# if it is button 8 - knobs control 'release'
		IF M1 == 0F 7F
			ASS drumParams = $23 $24 $25
		END
		# if it is button 13 - knobs control 'pitch'
		IF M1 == 14 7F
			ASS drumParams = $26 $27 $28
		END
		# if it is button 14 - knobs control 'modAmount'
		IF M1 == 15 7F
			ASS drumParams = $29 $30 $31
		END
		# if it is button 15 - knobs control 'modRate'
		IF M1 == 16 7F
			ASS drumParams = $46 $47 $48
		END
		# order is decay, body, tune, send
		# if it is button 16 - knobs control 'waveguide'
		IF M1 == 17 7F
			ASS drumParams = $17 $18 $19 $103
		END
	END
ELSE
	# if it is a knob turn
	IF MT == B0
		# if knob is < 3
		IF M1 < 3
			# each 'if' will need to assign all four variables, so that if the tempo modes are switched they properly align
			# if arp is on
			IF arpPhraseToggleMod == 0
				IF arpPhraseToggleOnOffMod == 1
					# if arp tempo mode is 0
					IF arpTempoModeMod == 0
						# if knob value is 0-11
						IF M2 < 12
							ASS tempoPulse = $48
						END
						# if knob value is 12-22
						IF M2 >= 12
							IF M2 < 23
								ASS tempoPulse = $36
							END
						END
						# if knob value is 23-33
						IF M2 >= 23
							IF M2 < 34
								ASS tempoPulse = $24
							END
						END
						# if knob value is 34-45
						IF M2 >= 34
							IF M2 < 46
								ASS tempoPulse = $18
							END
						END
						# if knob value is 46-57
						IF M2 >= 46
							IF M2 < 58
								ASS tempoPulse = $12
							END
						END
						# if knob value is 58-69
						IF M2 >= 58
							IF M2 < 70
								ASS tempoPulse = $9
							END
						END
						# if knob value is 70-81
						IF M2 >= 70
							IF M2 < 82
								ASS tempoPulse = $6
							END
						END
						# if knob value is 82-93
						IF M2 >= 82
							IF M2 < 94
								ASS tempoPulse = $4
							END
						END
						# if knob value is 94-104
						IF M2 >= 94
							IF M2 < 105
								ASS tempoPulse = $3
							END
						END
						# if knob value is 105-115
						IF M2 >= 105
							IF M2 < 116
								ASS tempoPulse = $2
							END
						END
						# if knob value is 116-127
						IF M2 >= 116
							ASS tempoPulse = $1
						END
					END
					# if arp tempo mode is 1
					IF arpTempoModeMod == 1
						# if knob value is 0-21
						IF M2 < 22
							ASS tempoPulse = $24
						END
						# if knob value is 22-42
						IF M2 >= 22
							IF M2 < 43
								ASS tempoPulse = $12
							END
						END
						# if knob value is 43-63
						IF M2 >= 43
							IF M2 < 64
								ASS tempoPulse = $9
							END
						END
						# if knob value is 64-84
						IF M2 >= 64
							IF M2 < 85
								ASS tempoPulse = $6
							END
						END
						# if knob value is 85-105
						IF M2 >= 85
							IF M2 < 106
								ASS tempoPulse = $4
							END
						END
						# if knob value is 106-127
						IF M2 >= 106
							ASS tempoPulse = $3
						END
					END
					# if arp tempo mode is 2
					IF arpTempoModeMod == 2
						# if knob value is 0-21
						IF M2 < 22
							ASS tempoPulse = $96
						END
						# if knob value is 22-42
						IF M2 >= 22
							IF M2 < 43
								ASS tempoPulse = $48
							END
						END
						# if knob value is 43-63
						IF M2 >= 43
							IF M2 < 64
								ASS tempoPulse = $24
							END
						END
						# if knob value is 64-84
						IF M2 >= 64
							IF M2 < 85
								ASS tempoPulse = $12
							END
						END
						# if knob value is 85-105
						IF M2 >= 85
							IF M2 < 106
								ASS tempoPulse = $6
							END
						END
						# if knob value is 106-127
						IF M2 >= 106
							ASS tempoPulse = $3
						END
					END
					# if arp tempo mode is 3
					IF arpTempoModeMod == 3
						# if knob value is 0-21
						IF M2 < 22
							ASS tempoPulse = $72
						END
						# if knob value is 22-42
						IF M2 >= 22
							IF M2 < 43
								ASS tempoPulse = $36
							END
						END
						# if knob value is 43-63
						IF M2 >= 43
							IF M2 < 64
								ASS tempoPulse = $18
							END
						END
						# if knob value is 64-84
						IF M2 >= 64
							IF M2 < 85
								ASS tempoPulse = $9
							END
						END
						# if knob value is 85-105
						IF M2 >= 85
							IF M2 < 106
								ASS tempoPulse = $4
							END
						END
						# if knob value is 106-127
						IF M2 >= 106
							ASS tempoPulse = $2
						END
					END
				END
			END
		END
	END
END

# set temp array to channel array here


# if it is a clock input
IF M0 == F8
	IF arpPhraseOnOffToggleMod == 1
		# if arp / phrase is on
		# note that this MAXVAL will be relative to tempoPulse - we can set constant(s?) based on a factor of all tempoPulse options
		IF clockNum == # standinMAXVAL
			ASS clockNum = 0
		END
		MATH clockNumMod = clockNum % tempoPulse
		# if clockNum modulo the number set from above is zero, allow clock
		IF clockNumMod == 0
			# if isArp
			IF arpPhraseToggleMod == 0
				# if value mode is 0 (asc 1)
				IF arpValueModeMod == 0

				END
				# if value mode is 1 (asc 2)
				IF arpValueModeMod == 1

				END
				# if value mode is 2 (asc 3)
				IF arpValueModeMod == 2

				END
				# if value mode is 3 (desc 1)
				IF arpValueModeMod == 3

				END
				# if value mode is 4 (desc 2)
				IF arpValueModeMod == 4

				END
				# if value mode is 5 (desc 3)
				IF arpValueModeMod == 5

				END
				# if value mode is 6 (rand 1)
				IF arpValueModeMod == 6
					# MATH randMod = RFF % numNotes 
				END
				# if value mode is 7 (rand 2)
				IF arpValueModeMod == 7

				END
				# if value mode is 8 (rand 3)
				IF arpValueModeMod == 8

				END
			# else isPhrase
			ELSE
			
			END
		# else block clock
		ELSE

		END

	ELSE
	END

	F8 = XX +B

	# add one to clockNum
	MATH clockNum = clockNum + 1
END