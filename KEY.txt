# key
# this file acts as reference for values in the global array and internal sysex formatting

# add channel to channel information at the end
# testing

# sysex messages do two things here:
# (1) send signal to perform action or change
# (2) send value update

# sysex key for signal messages

# message routing key for signal messages (M1 = FF)
# if multiple, routes positioned left to right lowest value to highest
# 1 - launchkey
# F - xtouch
# C - channels

# F0 11 FF 2E 57 F7 - rest, sent from xtouch to launchkey
# F0 FF FF 00 00 F7 - message sent from launchkey to xtouch to reset lighting
# F0 CC FF 00 00 F7 - message sent from launchkey to channels to reset latch

# sysex key for value updates

# NOTE gateOpened (JE) may not always match up with between the three - seems like it actually could be removed entirely at some point and made local to channel sb  (FF sysex) (TODO)

# TODO Need to be saved, but don't need sysex:
# tempoModeMod
# gateModeMod
# waveguideToggle
# drumParams(Part1)
# drumParams(Part2)
# drumParams(Part1+2)
# drumParams(waveguidesend)
 
name                      | sysex                       | range      | range (hex) | default | xtouch      | launchkey   | channel
----                      | -----                       | -----      | ----------- | ------- | ------      | ---------   | -------
currentChannel            | F0 FC    00    val  F7      | (0-15)     | (0-F)       | 00      | VIEW        | CHANGE      | VIEW
numPressed                | F0 CC    01    val  F7      | (0-10)     | (0-A)       | 00      | -           | VIEW CHANGE | VIEW
arpPhraseToggle           | F0 1C    02    val  F7      | (0-1)      | (0-1)       | 00      | VIEW CHANGE | VIEW        | VIEW
arpPhraseOnOffToggle      | F0 1C    03    val  F7      | (0-1)      | (0-1)       | 00      | VIEW CHANGE | VIEW        | VIEW
tempoModeMod              | F0 00    04    val  F7      | (0-3)      | (0-3)       | 00      | VIEW CHANGE | -           | -
tempoPulse                | F0 CC    05    val  F7      | (1-96)     | (1-60)      | 24      | CHANGE      | -           | VIEW
gateModeMod               | F0 00    06    val  F7      | (0-5)      | (0-5)       | 00      | VIEW CHANGE | -           | -
gate                      | F0 CC    07    val1 val2 F7 | (0-5080)   | (0-13D8)    | 00 00   | CHANGE      | -           | VIEW
velocity                  | F0 CC    08    val  F7      | (0-127)    | (0-7F)      | 64      | CHANGE      | -           | VIEW
arpValueModeMod           | F0 C1    09    val  F7      | (0-11)     | (0-11)      | 00      | CHANGE      | VIEW        | VIEW
setPhrase                 | F0 FF/11 0A    val  F7      | (0-1)      | (0-1)       | 00      | VIEW CHANGE | VIEW CHANGE | -
phraseVal                 | F0 CC    0B    val  F7      | (0-127)    | (1-7F)      | 00      | -           | CHANGE      | VIEW
phraseIndex               | F0 FF    0C    val  F7      | (42-73)    | (2A-49)     | 2A      | VIEW        | VIEW CHANGE | -
phraseLengthPlusOffset    | F0 CC    0D    val  F7      | (42-73)    | (2A-49)     | 2A      | -           | CHANGE      | VIEW
gateOpened                | F0 CC    0E    val  F7      | (0-1)      | (0-1)       | 00      | CHANGE OPT  | CHANGE      | VIEW
waveguideToggle           | F0 00    0F    val  F7      | (0-1)      | (0-1)       | 00      | VIEW CHANGE | -           | -
drumParams(Part1)         | F0 00    10    val  F7      | (0-127)    | (1-7F)      | 0E      | CHANGE      | -           | -
drumParams(Part2)         | F0 00    11    val  F7      | (0-127)    | (1-7F)      | 0F      | CHANGE      | -           | -
drumParams(Part1+2)       | F0 00    12    val  F7      | (0-127)    | (1-7F)      | 10      | CHANGE      | -           | -
drumParams(waveguidesend) | F0 00    13    val  F7      | (0-127)    | (1-7F)      | 67      | CHANGE      | -           | -
phraseVal                 | F0 CC    index val1 val2 F7 | (-127-127) | (1-7F)      | 00 00   | -           | VIEW CHANGE | VIEW

arpValues | F0 CC 20 val1 val2 val3 val4 val5 val6 val7 val8 val9 val10 F7 | (0-127) | (1-7F) | 00 00 00 00 00 00 00 00 00 00 | - | VIEW CHANGE | VIEW

output from files:

xtouch
sysex to launchkey
sysex to channel
CC and note messages to xtouch device

launchkey
sysex to xtouch
sysex to channel
CC and note messages to iConnectMIDI

channel
note messages to iConnectMIDI


# SCRAPS - FOR REFERENCE

# global array key

# global array will be set in the following way
# G0 - currentChannel
# G1 - numPressed
# G2 - arpPhraseToggle
# G3 - arpPhraseOnOffToggle
# G4 - tempoModeMod
# G5 - tempoPulse
# G6 - gateModeMod
# G7 - gate
# G8 - arpValueModeMod
# G9 - setPhrase
# GA - waveguideToggle
# GB - drumParams (Part 1)
# GC - drumParams (Part 2)
# GD - drumParams (Part 1+2)
# GE - drumParams (waveguide send)
# GF - gateOpened
# G10 - phraseVal
# G11 - phraseLengthPlusOffset
# G12 - velocity
# G13 - phraseIndex
# G20 - G29 - arp values (G20 G21 G22 G23 G24 G25 G26 G27 G28 G29)
# G2A - G49 - phrase sequence (G24 G25 G26 G27 G28 G29 G2A G2B G2C G2D G2E G2F G30 G31 G32 G33 ETC.)
# G4A - G59 - channel booleans

# default global channel
# G0 - 00 - currentChannel
# G1 - 00 - numPressed
# G2 - 00 - arpPhraseToggle
# G3 - 00 - arpPhraseOnOffToggle
# G4 - 00 - tempoModeMod
# G5 - 24 - tempoPulse
# G7 - 00 - gate
# G8 - 00 - arpValueModeMod
# G9 - 00 - setPhrase
# GA - 00 - waveguideToggle
# GB - 0E - drumParams (Part 1)
# GC - 0F - drumParams (Part 2)
# GD - 10 - drumParams (Part 1+2)
# GE - 67 - drumParams (wg send) (103)
# GF - 00 - gateOpened
# G10 - 00 - phraseVal
# G11 - 2A - phraseLengthPlusOffset
# G12 - 64 - velocity
# G13 - 2A - phraseindex
# G20 - G29 - 00 00 00 00 00 00 00 00 00 00 - arp values (G10 G11 G12 G13 G14 G15 G16 G17 G18 G19)
# G2A - G49 - 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ETC. - phrase sequence (G2A G2B G2C G2D G2E G2F G30 G31 G32 G33 G34 G35 G36 G37 G38 G39 ETC.)
# G4A - G59 - 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 - channel booleans

# old - remove after testing
# F0 90 FF F7 - message sent from xtouch to launchkey or launchkey to xtouch to signify that setPhrase has been turned off
# F0 2E 57 F7 - rest, sent from xtouch to launchkey

  ASS G0 = 00 # currentChannel
  ASS G1 = 00 # numPressed
  ASS G2 = 00 # arpPhraseToggle
  ASS G3 = 00 # arpPhraseOnOffToggle
  ASS G4 = 00 # tempoModeMod
  ASS G5 = 24 # tempoPulse
  ASS G6 = 00 # gateModeMod
  ASS G7 = 00 # gate
  ASS G8 = 00 # arpValueModeMod
  ASS G9 = 00 # setPhrase
  ASS GA = 00 # waveguideToggle
  ASS GB = 0E # drumParams (Part 1)
  ASS GC = 0F # drumParams (Part 2)
  ASS GD = 10 # drumParams (Part 1+2)
  ASS GE = 67 # drumParams (wg send) (103)
  ASS GF = 00 # gateOpened
  ASS G10 = 00 # phraseVal
  ASS G11 = 2A # phraseLengthPlusOffset
  ASS G12 = 64 # velocity
  ASS G13 = 2A # phraseindex
  ASS G20 = 00 00 00 00 00 00 00 00 00 00 # arp values (G10 G11 G12 G13 G14 G15 G16 G17 G18 G19)
  ASS G2A = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 # phrase sequence (G2A G2B G2C G2D G2E G2F G30 G31 G32 G33 G34 G35 G36 G37 G38 G39 ETC.)


# global array key

# global array will be set in the following way
# G0 - currentChannel
# G1 - numPressed
# G2 - arpPhraseToggle
# G3 - arpPhraseOnOffToggle
# G4 - tempoModeMod
# G5 - tempoPulse
# G6 - gateModeMod
# G7 - gate
# G8 - arpValueModeMod
# G9 - setPhrase
# GA - waveguideToggle
# GB - drumParams (Part 1)
# GC - drumParams (Part 2)
# GD - drumParams (Part 1+2)
# GE - drumParams (waveguide send)
# GF - gateOpened
# G10 - phraseVal
# G11 - phraseLengthPlusOffset
# G12 - velocity
# G13 - phraseIndex
# G20 - G29 - arp values (G20 G21 G22 G23 G24 G25 G26 G27 G28 G29)
# G2A - G49 - phrase sequence (G24 G25 G26 G27 G28 G29 G2A G2B G2C G2D G2E G2F G30 G31 G32 G33 ETC.)
# G4A - G59 - channel booleans

# default global channel
# G0 - 00 - currentChannel
# G1 - 00 - numPressed
# G2 - 00 - arpPhraseToggle
# G3 - 00 - arpPhraseOnOffToggle
# G4 - 00 - tempoModeMod
# G5 - 24 - tempoPulse
# G7 - 00 - gate
# G8 - 00 - arpValueModeMod
# G9 - 00 - setPhrase
# GA - 00 - waveguideToggle
# GB - 0E - drumParams (Part 1)
# GC - 0F - drumParams (Part 2)
# GD - 10 - drumParams (Part 1+2)
# GE - 67 - drumParams (wg send) (103)
# GF - 00 - gateOpened
# G10 - 00 - phraseVal
# G11 - 2A - phraseLengthPlusOffset
# G12 - 64 - velocity
# G13 - 2A - phraseindex
# G20 - G29 - 00 00 00 00 00 00 00 00 00 00 - arp values (G10 G11 G12 G13 G14 G15 G16 G17 G18 G19)
# G2A - G49 - 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ETC. - phrase sequence (G2A G2B G2C G2D G2E G2F G30 G31 G32 G33 G34 G35 G36 G37 G38 G39 ETC.)
# G4A - G59 - 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 - channel booleans

# sysex message key
# First set of contents indicate how many paths are routed, then actual routes are listed, then a four digit identification
# 1 - launchkey
# F - xtouch
# C - channels

# F0 01 F1 2E 57 F7 - rest, sent from xtouch to launchkey
# F0 02 1F F1 90 FF F7 - message sent from xtouch to launchkey or launchkey to xtouch to signify that setPhrase has been turned off
# F0 01 1F 00 00 F7 - message sent from launchkey to xtouch to reset lighting
# F0 01 1C 00 00 F7 - message sent from launchkey to channels to reset latch

# old - remove after testing
# F0 90 FF F7 - message sent from xtouch to launchkey or launchkey to xtouch to signify that setPhrase has been turned off
# F0 2E 57 F7 - rest, sent from xtouch to launchkey









# NOTE view receives the sysex, change sends
# can remove variables that are only sent - only viewed variables need to be defined
# this includes setPhrase - some fixing can be done here

xtouch
------
G0 currentChannel            VIEW
G2 arpPhraseToggle           VIEW CHANGE

G3 arpPhraseOnOffToggle      VIEW CHANGE
G4 tempoModeMod              VIEW CHANGE
G5 tempoPulse                CHANGE
G6 gateModeMod               VIEW CHANGE
G7 gate                      CHANGE
G8 arpValueModeMod           CHANGE
G9 setPhrase                 VIEW CHANGE
GA waveguideToggle           VIEW CHANGE
GB drumParams                CHANGE
GF gateOpened                VIEW CHANGE OPT
G12 velocity                 CHANGE
G13 phraseIndex              VIEW



launchkey
---------
G0 currentChannel            CHANGE
G1 numPressed                VIEW CHANGE
G2 arpPhraseToggle           VIEW
G3 arpPhraseOnOffToggle      VIEW
G8 arpValueModeMod           VIEW
G9 setPhrase                 VIEW CHANGE
GF gateOpened                CHANGE
G10 phraseVal                CHANGE
G11 phraseLengthPlusOffset   CHANGE
G13 phraseIndex              VIEW CHANGE

channel
-------
G0 currentChannel            VIEW
G1 numPressed                VIEW
G2 arpPhraseToggle           VIEW
G3 arpPhraseOnOffToggle      VIEW
G5 tempoPulse                VIEW
G7 gate                      VIEW
G8 arpValueModeMod           VIEW
GF gateOpened                VIEW CHANGE
G10 phraseVal                VIEW
G11 phraseLengthPlusOffset   VIEW
G12 velocity                 VIEW

NOT INCLUDED: ARP VALUES, PHRASE VALUES



name                        
----                        
currentChannel            00
numPressed                01
arpPhraseToggle           02
arpPhraseOnOffToggle      03
tempoModeMod              04
tempoPulse                05
gateModeMod               06
gate                      07
velocity                  08
arpValueModeMod           09
setPhrase                 0A
phraseVal                 0B
phraseIndex               0C
phraseLengthPlusOffset    0D
gateOpened                0E
waveguideToggle           0F
drumParams(Part1)         10
drumParams(Part2)         11
drumParams(Part1+2)       12
drumParams(waveguidesend) 13

add sysex message contents

review setphrase / other current sysex functionality

figure out how phrase and arpvalues are stored
2a 2b 2c 2d 2e 2f 30 31 32 33
34 35 36 37 38 39 3a 3b 3c 3d
3e 3f 40 41 42 43 44 45 46 47
48 49

20 21 22 23 24 25 26 27 28 29


# F0 02 1F F1 90 FF F7 - message sent from xtouch to launchkey or launchkey to xtouch to signify that setPhrase has been turned off

# F0 01 F1 2E 57 F7 - rest, sent from xtouch to launchkey
# F0 01 1F 00 00 F7 - message sent from launchkey to xtouch to reset lighting
# F0 01 1C 00 00 F7 - message sent from launchkey to channels to reset latch

deleted lines from xtouch

# SEND F0 02 1F F1 90 FF F7 +F # TODO delete

## Turn off setPhrase light when sysex received
#IF M0 == F0 02 1F F1 90 FF F7
#  IF setPhrase == 0
#    SEND 90 00 00
#  END
#  FX = XX +B
#END










# SCRAPS: (some of this will necessarily be used)

# if it is a channel notification (internal sysex)
IF MT == F0
#  # if channel sent in sysex does not align with global channel, change global channel
#  IF M1 == 1
#    IF G0 != 1
#      ASS G0 = 1
#    END
#  END
#  IF M1 == 2
#    IF G0 != 2
#      ASS G0 = 2
#    END
#  END
#  IF M1 == 3
#    IF G0 != 3
#      ASS G0 = 3
#    END
#  END
#  IF M1 == 4
#    IF G0 != 4
#      ASS G0 = 4
#    END
#  END
#  IF M1 == 5
#    IF G0 != 5
#      ASS G0 = 5
#    END
#  END
#  IF M1 == 6
#    IF G0 != 6
#      ASS G0 = 6
#    END
#  END
#  IF M1 == 7
#    IF G0 != 7
#      ASS G0 = 7
#    END
#  END
#  IF M1 == 8
#    IF G0 != 8
#      ASS G0 = 8
#    END
#  END
#  IF M1 == 9
#    IF G0 != 9
#      ASS G0 = 9
#    END
#  END
#  IF M1 == A
#    IF G0 != A
#      ASS G0 = A
#    END
#  END
#  IF M1 == B
#    IF G0 != B
#      ASS G0 = B
#    END
#  END
#  IF M1 == C
#    IF G0 != C
#      ASS G0 = C
#    END
#  END
#  # choose local array based on what G0 is
#  # each local array will have sequences of 100
#  IF G0 == 1
#    ASS currentChannelArray = channelOne
#  END
#  IF G0 == 2
#    ASS currentChannelArray = channelTwo
#  END
#  IF G0 == 3
#    ASS currentChannelArray = channelThree
#  END
#  IF G0 == 4
#    ASS currentChannelArray = channelFour
#  END
#  IF G0 == 5
#    ASS currentChannelArray = channelFive
#  END
#  IF G0 == 6
#    ASS currentChannelArray = channelSix
#  END
#  IF G0 == 7
#    ASS currentChannelArray = channelSeven
#  END
#  IF G0 == 8
#    ASS currentChannelArray = channelEight
#  END
#  IF G0 == 9
#    ASS currentChannelArray = channelNine
#  END
#  IF G0 == A
#    ASS currentChannelArray = channelTen
#  END
#  IF G0 == B
#    ASS currentChannelArray = channelEleven
#  END
#  IF G0 == C
#    ASS currentChannelArray = channelTwelve
#  END
END


  # default local array will be the following
  # did not make this perfectly align with G because the array itself won't perfectly align with its 100 offset
  # add current length as Y0, and offset the rest +1
  # Y0 - arpPhraseToggle
  # Y1 - arpPhraseOnOffToggle
  # Y2 - tempoMode
  # Y3 - tempoModeMod
  # Y4 - tempoPulse
  # Y5 - gate
  # Y6 - arpValueMode
  # Y7 - arpValueModeMod
  # Y8 - setPhrase
  # Y9 - waveguideToggle
  # YA - drumParams (Part 1)
  # YB - drumParams (Part 2)
  # YC - drumParams (Part 1+2)
  # YD - phrase sequence

  # we will use W, since it's the wide array, with 2048 slots over 256
  # NOTE unsure if only using one array will have any noticeable 'access' slowness - should be constant, so don't think it'll be an issue

  # currentChannelArray

#  # channelOne
#  ALIAS W0 channelOne
#  # channelTwo
#  ALIAS W$100 channelTwo
#  # channelThree
#  ALIAS W$200 channelThree
#  # channelFour
#  ALIAS W$300 channelFour
#  # channelFive
#  ALIAS W$400 channelFive
#  # channelSix
#  ALIAS W$500 channelSix
#  # channelSeven
#  ALIAS W$600 channelSeven
#  # channelEight
#  ALIAS W$700 channelEight
#  # channelNine
#  ALIAS W$800 channelNine
#  # channelTen
#  ALIAS W$900 channelTen
#  # channelEleven
#  ALIAS W$1000 channelEleven
#  # channelTwelve
#  ALIAS W$1100 channelTwelve

#    # if tempo mode is 0
#    IF tempoModeMod == 0
#      # if knob value is 0-11
#      IF M2 < $12
#        ASS tempoPulse = $48
#      END
#      # if knob value is 12-22
#      IF M2 >= $12
#        IF M2 < $23
#          ASS tempoPulse = $36
#        END
#      END
#      # if knob value is 23-33
#      IF M2 >= $23
#        IF M2 < $34
#          ASS tempoPulse = $24
#        END
#      END
#      # if knob value is 34-45
#      IF M2 >= $34
#        IF M2 < $46
#          ASS tempoPulse = $18
#        END
#      END
#      # if knob value is 46-57
#      IF M2 >= $46
#        IF M2 < $58
#          ASS tempoPulse = $12
#        END
#      END
#      # if knob value is 58-69
#      IF M2 >= $58
#        IF M2 < $70
#          ASS tempoPulse = $9
#        END
#      END
#      # if knob value is 70-81
#      IF M2 >= $70
#        IF M2 < $82
#          ASS tempoPulse = $6
#        END
#      END
#      # if knob value is 82-93
#      IF M2 >= $82
#        IF M2 < $94
#          ASS tempoPulse = $4
#        END
#      END
#      # if knob value is 94-104
#      IF M2 >= $94
#        IF M2 < $105
#          ASS tempoPulse = $3
#        END
#      END
#      # if knob value is 105-115
#      IF M2 >= $105
#        IF M2 < $116
#          ASS tempoPulse = $2
#        END
#      END
#      # if knob value is 116-127
#      IF M2 >= $116
#        ASS tempoPulse = $1
#      END
#    END
#    # if tempo mode is 1
#    IF tempoModeMod == 1
#      # if knob value is 0-21
#      IF M2 < $22
#        ASS tempoPulse = $24
#      END
#      # if knob value is 22-42
#      IF M2 >= $22
#        IF M2 < $43
#          ASS tempoPulse = $12
#        END
#      END
#      # if knob value is 43-63
#      IF M2 >= $43
#        IF M2 < $64
#          ASS tempoPulse = $9
#        END
#      END
#      # if knob value is 64-84
#      IF M2 >= $64
#        IF M2 < $85
#          ASS tempoPulse = $6
#        END
#      END
#      # if knob value is 85-105
#      IF M2 >= $85
#        IF M2 < $106
#          ASS tempoPulse = $4
#        END
#      END
#      # if knob value is 106-127
#      IF M2 >= $106
#        ASS tempoPulse = $3
#      END
#    END
#    # if tempo mode is 2
#    IF tempoModeMod == 2
#      # if knob value is 0-21
#      IF M2 < $22
#        ASS tempoPulse = $96
#      END
#      # if knob value is 22-42
#      IF M2 >= $22
#        IF M2 < $43
#          ASS tempoPulse = $48
#        END
#      END
#      # if knob value is 43-63
#      IF M2 >= $43
#        IF M2 < $64
#          ASS tempoPulse = $24
#        END
#      END
#      # if knob value is 64-84
#      IF M2 >= $64
#        IF M2 < $85
#          ASS tempoPulse = $12
#        END
#      END
#      # if knob value is 85-105
#      IF M2 >= $85
#        IF M2 < $106
#          ASS tempoPulse = $6
#        END
#      END
#      # if knob value is 106-127
#      IF M2 >= $106
#        ASS tempoPulse = $3
#      END
#    END
#    # if tempo mode is 3
#    IF tempoModeMod == 3
#      # if knob value is 0-21
#      IF M2 < $22
#        ASS tempoPulse = $72
#      END
#      # if knob value is 22-42
#      IF M2 >= $22
#        IF M2 < $43
#          ASS tempoPulse = $36
#        END
#      END
#      # if knob value is 43-63
#      IF M2 >= $43
#        IF M2 < $64
#          ASS tempoPulse = $18
#        END
#      END
#      # if knob value is 64-84
#      IF M2 >= $64
#        IF M2 < $85
#          ASS tempoPulse = $9
#        END
#      END
#      # if knob value is 85-105
#      IF M2 >= $85
#        IF M2 < $106
#          ASS tempoPulse = $4
#        END
#      END
#      # if knob value is 106-127
#      IF M2 >= $106
#        ASS tempoPulse = $2
#      END
#    END
#    # TEST
#    # ensure tempoPulse aligns with tempoMode
#    LOG tempoPulse tempoPulse
#    # END TEST



# update local array when sysex received
#IF M0 =
#  ASS J0 = M0 M1 M2 M3 M4 M5 M6 M7 M8 M9 MA MB MC MD ME MF
#  ASS J10 = M10 M11 M12 M13 M14 M15 M16 M17 M18 M19 M1A M1B M1C M1D M1E M1F
#  ASS J20 = M20 M21 M22 M23 M24 M25 M26 M27 M28 M29 M2A M2B M2C M2D M2E M2F
#  ASS J30 = M30 M31 M32 M33 M34 M35 M36 M37 M38 M39 M3A M3B M3C M3D M3E M3F
#  ASS J40 = M40 M41 M42 M43 M44 M45 M46 M47 M48 M49 M4A M4B M4C M4D M4E M4F
#  ASS J50 = M50 M51 M52 M53 M54 M55 M56 M57 M58 M59 M5A M5B M5C M5D M5E M5F
#  BLOCK
#  EXIT
#END
#
#SEND F0 J10 J11 J12 J13 J14 J15 J16 J17 J18 J19 J1A J1B J1C J1D J1E J1F
#SEND J20 J21 J22 J23 J24 J25 J26 J27 J28 J29 J2A J2B J2C J2D J2E J2F
#SEND J30 J31 J32 J33 J34 J35 J36 J37 J38 J39 J3A J3B J3C J3D J3E J3F
#SEND J40 J41 J42 J43 J44 J45 J46 J47 J48 J49 J4A J4B J4C J4D J4E J4F
#SEND J50 J51 J52 J53 J54 J55 J56 J57 J58 J59 J5A J5B J5C J5D J5E J5F F7
#
#issues will occur if you adjust two parameters from different processes at the same time launchkey / xtouch
#this might need to be addressed with note on / off timing (mostly lighting)
#
## move this to end
#IF arrayContentsPrevious != arrayContents
#ASS arrayContents =
#SEND F0 arrayContents F7
#
#use mod to get different places
#282 mod 256
#this will only be necessary for gate
#(1282 - (1282 mod 256)) / 256 to get fourth place

# UPDATE: Reviewing further, the plan will be for this to run as an 'xtouch service', completely separate and distinct from channel
# this means, instead of attempting to store all channel data on here, there will be separate streambyter instances which will communicate with each other
# when the channel is manually changed from launchpad - data will be sent here (via the global array) from an individual 'channel service', with its own storage
# once this receives that data in the form of the global array, it can directly modify the global array
# the channel service will only allow data to pass if the 'channel' of the global array is equal to that channel
# the channel service will save its data in a local array once the channel is manually changed from launchpad

deleted lines from launchkey

# TODO:
# NEXT STEPS need to test, and then organize in terms of multiple channels
# NOTE: this will definitely run into issues with single note arp, since the note off can possibly come after multiple clock sent

ELSE
  # TODO review if this is necessary or not
  # ensure phraseIndex is reset when setPhrase is turned off from xtouch
#  IF M0 == F0 02 1F F1 90 FF F7
#    ASS phraseIndex = 2A
#    # SEND SYSEX
#    SEND F0 0C phraseIndex F7
#    # END SYSEX
#    ASS tempPhraseVal = AAAA
#    FX = XX +B
#    # TEST
#    # ensure sysex resets phraseIndex when setPhrase is turned off
#    LOG phraseIndex phraseIndex
#    # END TEST
#  END
  FX = XX +B

deleted lines from channel


# before anything is read, we need to ensure that the local array matches with the global array, if the global array is currently controlling
#IF currentChannel == 0
#  # TODO IF keypressed here? can that prevent extra work?
#  ASS J0 = J0 J1 J2 J3 J4 J5 J6 J7 J8 J9 JA JB JC JD JE GF
#  ASS J10 = J10 J11 J12 J13 J14 J15 J16 J17 J18 J19 J1A J1B J1C J1D J1E G1F
#  ASS J20 = J20 J21 J22 J23 J24 J25 J26 J27 J28 J29 J2A J2B J2C J2D J2E G2F
#  ASS J30 = J30 J31 J32 J33 J34 J35 J36 J37 J38 J39 J3A J3B J3C J3D J3E G3F
#  ASS J40 = J40 J41 J42 J43 J44 J45 J46 J47 J48 J49 J4A J4B J4C J4D J4E G4F
#  ASS J50 = J50 J51 J52 J53 J54 J55 J56 J57 J58 G59
#END

# SEND F0 C4 MC G0 F7 +F
#IF M0 == F0 C4
#  IF M2 == thisChannel
#    # delay?
#    # load velocity from local
#    # update channel
#    # NOTE race condition
#    # NOTE other data will need to be stored locally for latch
#  ELSE
#    IF M3 == thisChannel
#      # NOTE save other data for latch
#    END
#  END
#END

# NOTE above should not matter without latch, since clock is only considered when channel is this file's channel

# check currentChannel first, channelOne based off that
# if currentChannel is 1 and channelOne is true - draw globally
# if currentChannel is not 1 and channelOne is true - draw locally
# if latch is on turn on channelOne (#)
# if latch is on ignore note off from launchkey
# store note on values and send note off for all when latch is turned off
# when channel is switched, first save global values into local values
