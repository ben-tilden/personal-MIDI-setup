# key
# this file acts as reference for values in the global array and internal sysex formatting

# sysex messages do two things here:
# (1) send signal to perform action or change
# (2) send value update

# sysex key for signal messages

# message routing key for signal messages (M1 = FF)
# if multiple, routes positioned left to right lowest value to highest
# 1 - launchkey
# F - xtouch
# C - channels

# F0 11 FF 2E 57 F7 - rest, sent from xtouch to launchkey
# F0 FF FF 00 00 F7 - message sent from launchkey to xtouch to reset lighting
# F0 CC FF 00 00 F7 - message sent from launchkey to channels to reset latch

# sysex key for value updates

# NOTE gateOpened (JE) may not always match up with between the three - seems like it actually could be removed entirely at some point and made local to channel sb  (FF sysex) (TODO)

# TODO Need to be saved, but don't need sysex:
# tempoModeMod
# gateModeMod
# waveguideToggle
# drumParams(Part1)
# drumParams(Part2)
# drumParams(Part1+2)
# drumParams(waveguidesend) # TODO remove this value from global array
# drumParams from K array in xtouch # TODO
# pitchQuantize # TODO have not added this anywhere yet due to the expectation that this implementation might change

name                      | sysex                       | range      | range (hex) | default | xtouch      | launchkey   | channel
----                      | -----                       | -----      | ----------- | ------- | ------      | ---------   | -------
currentChannel            | F0 FC    00    val  F7      | (0-15)     | (0-F)       | 00      | VIEW        | CHANGE      | VIEW
numPressed                | F0 CC    01    val  F7      | (0-10)     | (0-A)       | 00      | -           | VIEW CHANGE | VIEW
arpPhraseToggle           | F0 C1    02    val  F7      | (0-1)      | (0-1)       | 00      | VIEW CHANGE | VIEW        | VIEW
arpPhraseOnOffToggle      | F0 C1    03    val  F7      | (0-1)      | (0-1)       | 00      | VIEW CHANGE | VIEW        | VIEW
tempoModeMod              | F0 00    04    val  F7      | (0-3)      | (0-3)       | 00      | VIEW CHANGE | -           | -
tempoPulse                | F0 CC    05    val  F7      | (1-96)     | (1-60)      | 24      | CHANGE      | -           | VIEW
gateModeMod               | F0 00    06    val  F7      | (0-5)      | (0-5)       | 00      | VIEW CHANGE | -           | -
gate                      | F0 CC    07    val1 val2 F7 | (0-5080)   | (0-13D8)    | 00 00   | CHANGE      | -           | VIEW
velocity                  | F0 C1    08    val  F7      | (0-127)    | (0-7F)      | 64      | CHANGE      | VIEW        | VIEW
arpValueModeMod           | F0 C1    09    val  F7      | (0-11)     | (0-11)      | 00      | CHANGE      | VIEW        | VIEW
setPhrase                 | F0 FF/11 0A    val  F7      | (0-1)      | (0-1)       | 00      | VIEW CHANGE | VIEW CHANGE | -
phraseVal                 | F0 CC    0B    val  F7      | (0-127)    | (1-7F)      | 00      | -           | CHANGE      | VIEW
phraseIndex               | F0 FF    0C    val  F7      | (42-73)    | (2A-49)     | 2A      | VIEW        | VIEW CHANGE | -
phraseLengthPlusOffset    | F0 CC    0D    val  F7      | (42-73)    | (2A-49)     | 2A      | -           | CHANGE      | VIEW
gateOpened                | F0 CC/FF 0E    val  F7      | (0-1)      | (0-1)       | 00      | CHANGE OPT  | CHANGE      | VIEW
waveguideToggle           | F0 00    0F    val  F7      | (0-1)      | (0-1)       | 00      | VIEW CHANGE | -           | -
drumParams(Part1)         | F0 00    10    val  F7      | (0-127)    | (1-7F)      | 0E      | CHANGE      | -           | -
drumParams(Part2)         | F0 00    11    val  F7      | (0-127)    | (1-7F)      | 0F      | CHANGE      | -           | -
drumParams(Part1+2)       | F0 00    12    val  F7      | (0-127)    | (1-7F)      | 10      | CHANGE      | -           | -
drumParams(waveguidesend) | F0 00    13    val  F7      | (0-127)    | (1-7F)      | 67      | CHANGE      | -           | -       | # TODO
isLatch                   | F0 11    14    val  F7      | (0-1)      | (0-1)       | 00      | VIEW CHANGE | VIEW        | -       | # TODO
pitchQuantize             |                             |            |             |         |             |             |         | # TODO
padMode                   |                             |            |             |         |             |             |         | # TODO
phraseVal                 | F0 CC    index val1 val2 F7 | (-127-127) | (1-7F)      | 00 00   | -           | VIEW CHANGE | VIEW

arpValues | F0 CC 20 val1 val2 val3 val4 val5 val6 val7 val8 val9 val10 F7 | (0-127) | (1-7F) | 00 00 00 00 00 00 00 00 00 00 | - | VIEW CHANGE | VIEW

output from files:

xtouch
sysex to launchkey
sysex to channel
CC and note messages to xtouch device
TODO CC to iConnectMIDI (drumParams)

launchkey
sysex to xtouch
sysex to channel
sysex to launchkey
CC and note messages to iConnectMIDI

channel
note messages to iConnectMIDI

drumParams:
select $14 $15 $16
level $17 $18 $19
attack $20 $21 $22
release $23 $24 $25
pitch $26 $27 $28
modAmount $29 $30 $31
modRate $46 $47 $48
waveguide $117 $118 $119 ($103) # TODO remove this value from global array

when adding new passable value:
1. add key entry
2. add sysex reception
3. add ALIAS
4. add init set
5. add testing

rules for push control
1. when a knob is set without turning, L should automatically be set to whatever is sent to the knob, otherwise it should be set to the current knob value
NOTE tempo is an exception here because when the lighting is sent from xtouch, it does not loop back to the code until the knob is turned from the hardware - there is no opportunity to change the L value otherwise, so it must (unfortunately) manually be changed when the lighting is sent
2. if a knob is turning, L should only be set if knobPush is false
3. lighting should only be sent at knob release if the knob which is being turned does not already have code in xtouch that sends lighting for it (i.e. tempo) (the lighting change will be blocked otherwise)

# SCRAPS

# launchkey

# F0 11 FF 1A val F7 - message sent from launchkey to launchkey to signal note release

# TODO latch messes with numPressed and arp
IF isLatch == 1
  IF MT == 90
    ASS latchTiming = T0
    # TEST
    LOG latchTiming latchTiming
    LOG latchInterval latchInterval
    # END TEST
    # initLatch essentially performs timer reset, since timer is only reset on scene load
    # it prevents the overly large timer from being relevant on first set
    IF initLatch == 0
      IF latchTiming > latchInterval
        ASS latchIter = 30
        WHILE latchIter < latchLengthPlusOffset
          # send note release - injected because this is the only file that would process the note release
          SEND F0 11 FF 1A II1D F7 +I +F
          # remove from latchValues # NOTE probably unnecessary
          ASS II1D = 00
          MATH latchIter = latchIter + 1
        END
        ASS latchLengthPlusOffset = 30
      END
    ELSE
      ASS initLatch = 0
    END
    ASS II1B = M1
    # TEST
    # ensure latchValues are storing correctly on note press
    # ensure latchValues are reset if timing between notes is >=.2 second
    # ensure latchValues are added to if timing between notes <.2 second
    LOG latchValues
    LOG I30 I30
    LOG I31 I31
    LOG I32 I32
    LOG I33 I33
    LOG I34 I34
    LOG I35 I35
    LOG I36 I36
    LOG I37 I37
    LOG I38 I38
    LOG I39 I39
    # END TEST
    MATH latchLengthPlusOffset = latchLengthPlusOffset + 1
    # TEST
    LOG latchLengthPlusOffset latchLengthPlusOffset
    # END TEST
  END
  IF MT == 80
    # TEST
    # ensure note releases are blocked if latch is on
    LOG NOTE_RELEASE_BLOCKED
    # END TEST
    BLOCK
  END
  # using sysex as a trojan horse to sneak in note release
  IF M0 == F0 11 FF 1A
    ASS M0 = 80 M4 00 00 00 00
  END
END

# if arp / phrase is on
IF arpPhraseOnOffToggle == 1
  # if arp / phrase is arp
  IF arpPhraseToggle == 0
    # if key is pressed
    IF MT == 90

      # if reset (key pressed limit exceeded), handle differently
      IF resetArp == 1
        MATH numPressed = numPressed + 1
        # SEND SYSEX
        SEND F0 CC 01 numPressed F7 +F
        # END SYSEX
        BLOCK
        EXIT
      END

      # setting arbitrary limit on number of keys pressed at a time to 10 (using 10 as comparator here because numPressed has not yet been increased)
      IF numPressed == A
        ASS J20 = 00 00 00 00 00 00 00 00 00 00
        # SEND SYSEX
        SEND F0 CC 20 J20 J21 J22 J23 J24 J25 J26 J27 J28 J29 F7 +F
        # END SYSEX
        ASS I20 = 00 00 00 00 00 00 00 00 00 00
        ASS resetArp = 1
        ASS numPressedTotal = 0
        # necessary so that numPressed does not go past zero by mistake, as we have not yet incremented for this key press
        MATH numPressed = numPressed + 1
        # SEND SYSEX
        SEND F0 CC 01 numPressed F7 +F
        # END SYSEX
        # TEST
        # ensure J array contains correct key values pressed on reset (0)
        # ensure I array contains correct order of keys pressed on reset (0)
        # ensure numPressed aligns with number of keys pressed on reset (0)
        # ensure numPressedTotal aligns with number of keys pressed total on reset (0)
        LOG isArp
        LOG J19 J19 # should always be 0, unless globalkey is updated
        LOG J20 J20
        LOG J21 J21
        LOG J22 J22
        LOG J23 J23
        LOG J24 J24
        LOG J25 J25
        LOG J26 J26
        LOG J27 J27
        LOG J28 J28
        LOG J29 J29
        LOG J2A J2A # should always be first value of phrase
        LOG ~~~~~~~~~~BREAK~~~~~~~~~~
        LOG I19 I19 # should always be 0
        LOG I20 I20
        LOG I21 I21
        LOG I22 I22
        LOG I23 I23
        LOG I24 I24
        LOG I25 I25
        LOG I26 I26
        LOG I27 I27
        LOG I28 I28
        LOG I29 I29
        LOG I2A I2A # should always be 0
        LOG ~~~~~~~~~~BREAK~~~~~~~~~~
        LOG numPressed numPressed
        LOG numPressedTotal numPressedTotal
        # END TEST
        BLOCK
        EXIT
      END

      # add one to notes overall pressed
      MATH numPressedTotal = numPressedTotal + 1

      # store note value in first open spot in array
      MATH arpIndex = arpIndexOffset + numPressed
      ASS JI2 = M1
      ASS II2 = numPressedTotal

      # add one to current notes pressed
      # NOTE this is done before sorting to make sure proper length is parsed
      MATH numPressed = numPressed + 1
      # SEND SYSEX
      SEND F0 CC 01 numPressed F7 +F
      # END SYSEX

      # sort array / hashmap according to ascending, descending, order pressed
      IF arpValueModeMod < 6
        INSERTION_SORT 0 numPressed
      END
      IF arpValueModeMod > 8
        INSERTION_SORT 1 numPressed
      END
      # SEND SYSEX
      SEND F0 CC 20 J20 J21 J22 J23 J24 J25 J26 J27 J28 J29 F7 +F
      # END SYSEX

      IF numPressed == 1
        ASS gateOpened = 1
        # SEND SYSEX
        SEND F0 CC 0E gateOpened F7 +F
        # END SYSEX
      END
      # TEST TRY
      #IF numPressed > 1
      #  ASS gateOpened = 2
      #END
      # END TEST TRY
      # TEST
      # ensure J array contains correct key values pressed on key press
      # ensure I array contains correct order of keys pressed on key press
      # ensure numPressed aligns with number of keys pressed on key press
      # ensure numPressedTotal aligns with number of keys pressed total on key press
      # ensure gateOpened aligns with number of keys pressed total on key press
      LOG isArp
      LOG J19 J19 # should always be 0, unless globalkey is updated
      LOG J20 J20
      LOG J21 J21
      LOG J22 J22
      LOG J23 J23
      LOG J24 J24
      LOG J25 J25
      LOG J26 J26
      LOG J27 J27
      LOG J28 J28
      LOG J29 J29
      LOG J2A J2A # should always be first value of phrase
      LOG ~~~~~~~~~~BREAK~~~~~~~~~~
      LOG I19 I19 # should always be 0
      LOG I20 I20
      LOG I21 I21
      LOG I22 I22
      LOG I23 I23
      LOG I24 I24
      LOG I25 I25
      LOG I26 I26
      LOG I27 I27
      LOG I28 I28
      LOG I29 I29
      LOG I2A I2A # should always be 0
      LOG ~~~~~~~~~~BREAK~~~~~~~~~~
      LOG numPressed numPressed
      LOG numPressedTotal numPressedTotal
      LOG gateOpened gateOpened
      # END TEST

      NX = XX +B

    END

    IF MT == 80

      # if reset (key pressed limit exceeded), handle differently
      IF resetArp == 1
        MATH numPressed = numPressed - 1
        # SEND SYSEX
        SEND F0 CC 01 numPressed F7 +F
        # END SYSEX
        IF numPressed == 0
          ASS resetArp = 0
        END
        BLOCK
        EXIT
      END

      # remove note value from array
      # decrease number of notes that need to be iterated through
      ASS iter = arpIndexOffset
      ASS isSet = 0
      WHILE isSet != 1
        # if iter is the note value, remove values
        IF JI0 == M1
          ASS JI0 = 0
          ASS II0 = 0
          ASS isSet = 1
        END
        MATH iter = iter + 1
        IF iter == numPressed
          ASS isSet = 1
        END
      END

      # sort array / hashmap according to ascending, descending, order pressed
      IF arpValueModeMod < 6
        INSERTION_SORT 0 numPressed
      END
      IF arpValueModeMod > 8
        INSERTION_SORT 1 numPressed
      END
      # SEND SYSEX
      SEND F0 CC 20 J20 J21 J22 J23 J24 J25 J26 J27 J28 J29 F7 +F
      # END SYSEX

      # subract one from current notes pressed
      # NOTE this is done after sorting to make sure any removed values are pushed out
      MATH numPressed = numPressed - 1
      # SEND SYSEX
      SEND F0 CC 01 numPressed F7 +F
      # END SYSEX
      IF numPressed == 0
        ASS J20 = 00 00 00 00 00 00 00 00 00 00
        # SEND SYSEX
        SEND F0 CC 20 J20 J21 J22 J23 J24 J25 J26 J27 J28 J29 F7 +F
        # END SYSEX
        ASS I20 = 00 00 00 00 00 00 00 00 00 00
        ASS numPressedTotal = 0
      END
      # TEST
      # ensure J array contains correct key values pressed on key release
      # ensure I array contains correct order of keys pressed on key release
      # ensure numPressed aligns with number of keys pressed on key release
      # ensure numPressedTotal aligns with number of keys pressed total on key release
      # ensure gateOpened aligns with number of keys pressed total on key release
      LOG isArp
      LOG J19 J19 # should always be 0, unless globalkey is updated
      LOG J20 J20
      LOG J21 J21
      LOG J22 J22
      LOG J23 J23
      LOG J24 J24
      LOG J25 J25
      LOG J26 J26
      LOG J27 J27
      LOG J28 J28
      LOG J29 J29
      LOG J2A J2A # should always be first value of phrase
      LOG ~~~~~~~~~~BREAK~~~~~~~~~~
      LOG I19 I19 # should always be 0
      LOG I20 I20
      LOG I21 I21
      LOG I22 I22
      LOG I23 I23
      LOG I24 I24
      LOG I25 I25
      LOG I26 I26
      LOG I27 I27
      LOG I28 I28
      LOG I29 I29
      LOG I2A I2A # should always be 0
      LOG ~~~~~~~~~~BREAK~~~~~~~~~~
      LOG numPressed numPressed
      LOG numPressedTotal numPressedTotal
      LOG gateOpened gateOpened
      # END TEST

      NX = XX +B

    END
  # else isPhrase
  ELSE
    # if key pressed
    IF MT == 90

      # ASS gateOpened = 1 # NOTE uncommenting this and adding sysex would restart phrase whenever key pressed

      # if reset (key pressed limit exceeded), handle differently
      IF resetPhrase == 1
        MATH numPressed = numPressed + 1
        # SEND SYSEX
        SEND F0 CC 01 numPressed F7 +F
        # END SYSEX
        BLOCK
        EXIT
      END

      # setting arbitrary limit on number of keys pressed at a time to 5
      IF numPressed == 5
        ASS L1 = 00 00 00 00 00
        ASS resetPhrase = 1
        ASS numPressedTotal = 0
        # necessary so that numPressed does not go past zero by mistake, as we have not yet incremented for this key press
        MATH numPressed = numPressed + 1
        # SEND SYSEX
        SEND F0 CC 01 numPressed F7 +F
        # END SYSEX
        # TEST
        # ensure K array contains correct key values pressed on reset (0)
        # ensure L array contains correct order of keys pressed on reset (0)
        # ensure numPressed aligns with number of keys pressed on reset (0)
        # ensure numPressedTotal aligns with number of keys pressed total on reset (0)
        LOG isPhrase
        LOG K0 K0 should always be zero
        LOG K1 K1
        LOG K2 K2
        LOG K3 K3
        LOG K4 K4
        LOG K5 K5
        LOG K6 K6 # should always be zero
        LOG ~~~~~~~~~~BREAK~~~~~~~~~~
        LOG L0 L0 # should always be zero
        LOG L1 L1
        LOG L2 L2
        LOG L3 L3
        LOG L4 L4
        LOG L5 L5
        LOG L6 L6 # should always be zero
        LOG ~~~~~~~~~~BREAK~~~~~~~~~~
        LOG numPressed numPressed
        LOG numPressedTotal numPressedTotal
        # END TEST
        BLOCK
        EXIT
      END

      # set initial note to calculate offset
      ASS phraseVal = M1
      # SEND SYSEX
      SEND F0 CC 0B phraseVal F7 +F
      # END SYSEX

      # add to number of keys pressed
      MATH numPressed = numPressed + 1
      # SEND SYSEX
      SEND F0 CC 01 numPressed F7 +F
      # END SYSEX
      MATH numPressedTotal = numPressedTotal + 1

      # we need to have a while loop here to account for the user pressing and releasing keys in different orders
      # say user presses A, B, C, then lifts up B
      # this sets numPressed to 2, but when another key is pressed it will overwrite C if we continue linearly
      ASS iter = 1
      ASS isSet = 0
      WHILE isSet != 1
        IF LI0 == 0
          # add note value into K - this array's indices will all be >= 1
          ASS KI0 = M1
          # add note index in L to show it is pressed - this array's indices will all be >= 1
          ASS LI0 = numPressedTotal
          ASS isSet = 1
        END
        MATH iter = iter + 1
      END

      IF numPressed == 1
        ASS gateOpened = 1
        # SEND SYSEX
        SEND F0 CC 0E gateOpened F7 +F
        # END SYSEX
      END
      # TEST
      # ensure K array contains correct key values pressed on key press
      # ensure L array contains correct order of keys pressed on key press
      # ensure numPressed aligns with number of keys pressed on key press
      # ensure numPressedTotal aligns with number of keys pressed total on key press
      # ensure gateOpened aligns with number of keys pressed total on key press
      LOG isPhrase
      LOG K0 K0 should always be zero
      LOG K1 K1
      LOG K2 K2
      LOG K3 K3
      LOG K4 K4
      LOG K5 K5
      LOG K6 K6 # should always be zero
      LOG ~~~~~~~~~~BREAK~~~~~~~~~~
      LOG L0 L0 # should always be zero
      LOG L1 L1
      LOG L2 L2
      LOG L3 L3
      LOG L4 L4
      LOG L5 L5
      LOG L6 L6 # should always be zero
      LOG ~~~~~~~~~~BREAK~~~~~~~~~~
      LOG numPressed numPressed
      LOG numPressedTotal numPressedTotal
      LOG gateOpened gateOpened
      LOG phraseVal phraseVal
      # END TEST

    END

    IF MT == 80

      # if reset (key pressed limit exceeded), handle differently
      IF resetPhrase == 1
        MATH numPressed = numPressed - 1
        # SEND SYSEX
        SEND F0 CC 01 numPressed F7 +F
        # END SYSEX
        IF numPressed == 0
          ASS resetPhrase = 0
        END
        BLOCK
        EXIT
      END

      # stop if no keys pressed
      MATH numPressed = numPressed - 1
      # SEND SYSEX
      SEND F0 CC 01 numPressed F7 +F
      # END SYSEX
      IF numPressed < 1
        ASS L1 = 00 00 00 00 00
        ASS numPressedTotal = 0
      END

      # find the max l value, or the most recent key pressed
      # if the k value, or note value of that max is M1, we need to change the phrase offset
      # while we are iterating, we need to set the l value of whichever key is released to zero so we can reuse that index
      ASS max = 0
      ASS maxIndex = 0
      ASS secondMax = 0
      ASS secondMaxIndex = 0
      ASS iter = 1
      WHILE iter <= 5
        IF LI0 > max
          ASS secondMax = max
          ASS max = LI0
          ASS secondMaxIndex = maxIndex
          ASS maxIndex = iter
        ELSE
          IF LI0 > secondMax
            ASS secondMax = LI0
            ASS secondMaxIndex = iter
          END
        END
        IF KI0 == M1
          ASS LI0 = 0
        END
        MATH iter = iter + 1
      END
      IF KI5 == M1
        # set value equal to second most recent key pressed
        # ASS gateOpened = 1 # NOTE uncommenting this and sending sysex would restart phrase whenever key lifted
        ASS phraseVal = KI7
        # SEND SYSEX
        SEND F0 CC 0B phraseVal F7 +F
        # END SYSEX
      END
      # TEST
      # ensure K array contains correct key values pressed on key release
      # ensure L array contains correct order of keys pressed on key release
      # ensure numPressed aligns with number of keys pressed on key release
      # ensure numPressedTotal aligns with number of keys pressed total on key release
      # ensure gateOpened aligns with number of keys pressed total on key release
      LOG isPhrase
      LOG K0 K0 should always be zero
      LOG K1 K1
      LOG K2 K2
      LOG K3 K3
      LOG K4 K4
      LOG K5 K5
      LOG K6 K6 # should always be zero
      LOG ~~~~~~~~~~BREAK~~~~~~~~~~
      LOG L0 L0 # should always be zero
      LOG L1 L1
      LOG L2 L2
      LOG L3 L3
      LOG L4 L4
      LOG L5 L5
      LOG L6 L6 # should always be zero
      LOG ~~~~~~~~~~BREAK~~~~~~~~~~
      LOG numPressed numPressed
      LOG numPressedTotal numPressedTotal
      LOG gateOpened gateOpened
      LOG phraseVal phraseVal
      # END TEST
    END
    # only block notes if setPhrase is zero - if it's one, we need the next if statement to process the note
    IF setPhrase == 0
      NX = XX +B
    END
  END
END