# test plan
# regex for code:( +# TEST\n(.+\n)+? +# END TEST\n)|( +# TEST LIVE\n(.+\n)+? +# END TEST LIVE\n)


###
# filters
###

# ensure hardware messages only send to the correct modules

# ensure that hardware input filtering happening correctly # TODO hardware filter

###
# x touch
###

# ensure lights turn off on init - both xtouch modes

# ensure xtouch lighting changes properly when channel changed
  # ensure setPhrase, arpPhraseToggle, arpPhraseToggleOnOff, latch, lfo, padMode, groupKnobPush, lfo (4 vars) lighting resets
  # ensure knob lighting resets
# ensure xtouch receives setPhrase
# ensure xtouch receives gateOpened # optional implementation not exercised yet # TODO channel change

# button push

  # ensure knobPush turned on accordingly
  # ensure modulated knobs not included # TODO

  # ensure push control does not work when setLfo is on

  # ensure arpValueModeMod changes accordingly or setPhrase changes

  # ensure arp and phrase are toggling and setPhrase is turned off (if on) when switched to arp

  # ensure rest sent

  # ensure arp/phrase module is turned off or on

  # ensure latch is toggling

  # ensure setLfo is toggling
  # ensure setLfo unable to be toggled if push control active # TODO

  # ensure padMode is toggling

  # ensure lfos are toggling

  # ensure lfoMuteAll is toggling

  # ensure lfos restart accordingly on lfoReset

  # ensure all lfos restart on lfoResetAll

  # ensure lfoSync's are toggling

  # ensure lfoBase's are toggling

  # ensure lfoInvert's are toggling

  # ensure groupKnobPush is toggling

  # ensure 'pan' lighting reset

  # ensure drumParams can't be changed when groupKnobPush on
  # ensure drumParams can't be changed when knob9Push on
  # ensure drumParams can't be changed when knob10Push on
  # ensure drumParams can't be changed when knob11Push on
  # (ensure that if a drum param button is pressed while drum param push control is occuring that nothing happens)

  # ensure drumparams are assigned according to correct buttons

  # ensure 'select' lighting sent to knobs
  # ensure 'level' lighting sent to knobs
  # ensure 'attack' lighting sent to knobs
  # ensure 'release' lighting sent to knobs
  # ensure 'pitch' lighting sent to knobs
  # ensure 'modAmount' lighting sent to knobs
  # ensure 'modRate' lighting sent to knobs
  # ensure 'waveguide' lighting sent to knobs

# button release

  # ensure lfoKnob is correctly set for any knob that's pressed, and that nothing is negatively impacted by it
    # ensure sequence setLfo on, then groupKnobPush on causes no issues
    # ensure sequence groupKnobPush on, then setLfo on causes no issues

    # ensure attempting to chain modulate from lfo 1 exits gracefully # TODO
    # ensure attempting to modulate with two lfos at once exits gracefully (aside from knobs 3 and 4) # TODO

  # ensure push control release handled correctly
    # ensure lighting matches with L array
    # ensure L array matches with previous value
    # ensure parameter associated with knob lighting also changed
    # tempoPulse, gate, velocity, drumParam1, drumParam2, drumParam3, lfoRate, lfoDepth, channel specific (unassigned) (6-8, 12-16)
    # ensure knobPush reset if no knob has been turned
    # ensure modulated knobs not included # TODO

  # ensure tempoModeMod changes accordingly and tempoPulse correlates

  # ensure tempo lighting functions as expected

  # ensure gateModeMod changes accordingly and gate correlates

  # ensure lfoSync sent correctly (for each lfoNum)
  # ensure lfoBase sent correctly (for each lfoNum)
  # ensure lfoInvert sent correctly (for each lfoNum)
  # ensure lfoType changes accordingly
  # ensure lfoNum changes accordingly and lighting corresponds (including buttons)
  # ensure lfoNum restarts accordingly
  # ensure all lfos restart accordingly

  # ensure groupKnobPush turned on accordingly

  # ensure groupKnobPush release handled correctly
    # ensure lighting matches with L array
    # ensure L array matches with previous value
    # ensure parameter associated with knob lighting also changed
    # tempoPulse, gate, velocity, drumParam1, drumParam2, drumParam3, lfoRate, lfoDepth, channel specific (unassigned) (6-8, 12-16)
    # ensure knobPush reset if no knob has been turned
    # ensure modulated knobs not included # TODO

  # ensure waveguide is toggled properly
  # ensure pitchQuantize is toggled properly

# knob turn

  # ensure that if knob is turned while knob is pressed, knob turn is set to true

  # ensure tempo lighting functions as expected

  # ensure tempoPulse aligns with tempoMode

  # ensure gate aligns with gate
  # ensure gateFactor is correct

  # ensure velocity aligns with velocity

  # ensure lfoRate aligns with lfoRate

  # ensure lfoDepth aligns with lfoDepth

  # ensure correct drumParam sent on knob turn
  # ensure drumParam changed to the correct value

# misc

  # confirm the following:
    # groupPushKnob and pushKnob:
      # with groupPushKnob on, pushKnob will not do anything
      # with pushKnob on, groupPushKnob will prevent knob release from doing anything
    # groupPushKnob / pushKnob and drumParams
      # with either on (knob # 6, 7, and 8 for pushKnob), drumParams will not be able to be changed
    # groupPushKnob / pushKnob and lfoNum
      # with either on (knob # 4 for pushKnob), lfoNum will not be able to be changed

###
# launchkey mini
###

# ensure launchkey receives arpPhraseToggle
# ensure launchkey receives arpPhraseOnOffToggle
# ensure launchkey receives velocity
# ensure launchkey receives arpValueModeMod
# ensure launchkey receives setPhrase
# ensure launchkey receives latch

# ensure global array reset (with locals)
# ensure xtouch reset (with locals)
# ensure channel information reset

# ensure channel reset button properly resets the channel
# ensure channel change properly affects filters
  # ensure latch, etc. stay on for channel switched

# ensure J array contains correct key values pressed on reset (0)
# ensure K array contains correct order of keys pressed on reset (0)
# ensure numPressed aligns with number of keys pressed on reset (0)
# ensure numPressedTotal aligns with number of keys pressed total on reset (0)
# ensure phraseVal reset to 3C on reset

# ensure J array contains correct key values pressed on key press
# ensure K array contains correct order of keys pressed on key press
# ensure numPressed aligns with number of keys pressed on key press
# ensure numPressedTotal aligns with number of keys pressed total on key press
# ensure gateOpened aligns with number of keys pressed total on key press
# ensure phraseVal aligns with correct phraseVal on key press

# ensure J array contains correct key values pressed on key release
# ensure K array contains correct order of keys pressed on key release
# ensure numPressed aligns with number of keys pressed on key release
# ensure numPressedTotal aligns with number of keys pressed total on key release
# ensure gateOpened aligns with number of keys pressed total on key release
# ensure phraseVal aligns with correct phraseVal on key release

# ensure phrase is being correctly set
# ensure setPhrase is 0 if max limit reached, otherwise 1
# ensure tempPhraseVal is the previous value
# ensure phraseIndex is the previous index plus one

# ensure sysex resets phraseIndex when setPhrase is turned off

# ensure latchValues are storing correctly on note press
# ensure latchValues are reset if timing between notes is >=.1 second
# ensure latchValues are added to if timing between notes <.1 second

# ensure note releases are blocked if latch is on

# ensure transition between arp and phrase is smooth if module is on
# ensure note release properly sent when arp/phrase turned on
# ensure general transition with latch on to arp/phrase on is smooth
# ensure note press properly sent when arp/phrase turned off
# ensure general transition with latch on to arp/phrase off is smooth
# ensure note release properly sent when latch turned off

###
# channel #
###

# ensure channel receives numPressed
# ensure channel receives arpPhraseToggle
# ensure channel receives arpPhraseOnOffToggle
# ensure channel receives tempoPulse
# ensure channel receives gate
# ensure channel receives velocity
# ensure channel receives arpValueModeMod
# ensure channel receives phraseVal
# ensure channel receives phraseLengthPlusOffset
# ensure channel receives gateOpened
# ensure channel receives arpValues
# ensure channel receives phraseValues

# ensure maxValClockNum mod any possible tempoPulse is equal to 0 mod the same tempoPulse

# ensure gateOpened resets clockNum

# ensure notes are processed if clockNumMod is zero

# ensure arp only goes to arp

  # mode 0
  # ensure arpValueMode is correct
  # ensure gateOpened resets arpIndex

  # mode 1
  # ensure arpValueMode is correct
  # ensure gateOpened resets arpIndex
  # ensure isOctave is cycling through correctly

  # mode 2
  # ensure arpValueMode is correct
  # ensure gateOpened resets arpIndex
  # ensure isOctave is cycling through correctly

  # mode 3
  # ensure arpValueMode is correct
  # ensure gateOpened resets arpIndex

  # mode 4
  # ensure arpValueMode is correct
  # ensure gateOpened resets arpIndex
  # ensure isOctave is cycling through correctly

  # mode 5
  # ensure arpValueMode is correct
  # ensure gateOpened resets arpIndex
  # ensure isOctave is cycling through correctly

  # mode 6
  # ensure arpValueMode is correct
  # ensure random is random

  # mode 7
  # ensure arpValueMode is correct
  # ensure random is random

  # mode 8
  # ensure arpValueMode is correct
  # ensure random is random

  # mode 9
  # ensure arpValueMode is correct
  # ensure gateOpened resets arpIndex

  # mode A
  # ensure arpValueMode is correct
  # ensure gateOpened resets arpIndex
  # ensure isOctave is cycling through correctly

  # mode B
  # ensure arpValueMode is correct
  # ensure gateOpened resets arpIndex
  # ensure isOctave is cycling through correctly

# ensure phrase only goes to phrase

  # ensure gateOpened resets phraseIndex
  # ensure correct offset is sending 
  # ensure rest functionality is working
  # ensure phraseIndex is reset at the end of the phrase
