# notes

---

possible future updates:
* addings 'reverse' and 'bounce' for phrase (stochastic etc. whatever)
* lfo restart on key press
* consolidate channels 10, 11, and 12 into one processing file, since neither gate nor trackingMode are necessary for them (would require removal of infiniteGate from channel as well)

---

# message routing key for signal messages (sysexData[0] = ##)
# 11, C1 - launchkey
# FF - xtouch
# CC, C1 - channel
# 0F - xtouch filter
# 01 - lfo
# NOTE mapping filter and processing filter, because they were implemented later and required less specificity, may also accept other routing keys
# 3F - mapping filter
# 9F - processing filter

# see document for full sysex key

# 61 sysex messages are sent from xtouch on init
# the first is an 01 message, to init lfo, the rest are EE messages sent to xtouch hardware
# this tends to overload the auv3's initially, but is inconsequential because they have no need to interpret this data
# this is, however, the reason xtoxfilter exists as an instance of sb

---

# output from non-filter files:

# xtouch
# sysex and CC to launchkey
# sysex to channel
# sysex to lfo auv3
# CC and note messages to xtouch device

# launchkey
# sysex to xtouch
# sysex to channel
# sysex to launchkey
# CC and note messages to iConnectMIDI

# channel
# note messages to iConnectMIDI

# lfo
# CC messages to xtouch

---

# drumParams:
# select $14 $15 $16
# level $17 $18 $19
# attack $20 $21 $22
# release $23 $24 $25
# pitch $26 $27 $28
# modAmount $29 $30 $31
# modRate $46 $47 $48
# waveguide $117 $118 $119

---

// differences between files:

channel specific contents:

channel:
change channel

xtouch / launchkey:
change channel
remove drum parameter constants
*change pushReset variables (e.g. pan)
*update knobCurrentVal so that drum knobs are not 0xFFFF and update defaults for specific CC's (e.g. pan)
remove channel specific variables from InitVariables
remove channel specific lighting from init and channel change
*update knobSendVals to channel specific CC's

drum:
knobSendVals:
[0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0A, 0x34, 0x33, 0x0E, 0x0F, 0x10, 0x67, 0x31, 0x32, 0xFFFF, 0xFFFF]
CC's with init other than 0: pan

fm:
knobSendVals:
[0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2E, 0x2F, 0x30, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x31, 0x32]
CC's with init other than 0:

bass:
knobSendVals:
[0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x05, 0x0B, 0x31, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x3F, 0x30]
CC's with init other than 0:

sample:
knobSendVals:
[0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2F, 0x30, 0x07, 0x2A, 0x28, 0x29, 0x2B, 0x2C, 0x2D, 0x2E, 0x0A]
CC's with init other than 0: pan

beats:
knobSendVals:
[0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x32, 0x33, 0x34, 0x35, 0x28]
CC's with init other than 0:

remove drum specific sysex variables
*update init to send lighting for channel specific knobs (e.g. pan)
remove drum specific contents in HandleNoteOn
remove drum specific contents in HandleNoteOff
change channel specific knob send values in HandleKnobTurn

lfo:
change channel

processing filter:
change channel
remove drum specific sysex reception
remove drum specific variables from InitVariables
remove interval setting and chromaticization for channels 7-12
add velocity modification for channel 7

---

// xtouch mini tempo explanation
// because tempo will be determined by ableton link midi clock, the first knob will determine which clock messages are heeded and which are ignored
// link runs clock at 24 ppqn, or 24 pulses per quarter note / beat
// there are multiple tempos, determined by knob 1 on the xtouch:

// 0. full range - this is as many tempos as we can fit
// 8/1 - 48
// 6/1 - 36
// 4/1 - 24
// 3/1 - 18
// 2/1 - 12
// 3/2 - 9
// 1/1 - 6
// 2/3 - 4
// 1/2 - 3
// 1/3 - 2
// 1/6 - 1

// 1. beatmaker - based on the default tempos of the drum roll in beatmaker pro - slightly fewer options than full range
// 4/1 - 24
// 2/1 - 12
// 3/2 - 9
// 1/1 - 6
// 2/3 - 4
// 1/2 - 3

// 2. factor of two - any tempo that is a factor of 2 of a 4/4 beat
// 16/1 - 96
// 8/1 - 48
// 4/1 - 24
// 2/1 - 12
// 1/1 - 6
// 1/2 - 3

// 3. factor of three - any tempo that is a factor of 3 of a 4/4 beat
// 12/1 - 72
// 6/1 - 36
// 3/1 - 18
// 3/2 - 9
// 2/3 - 4
// 1/3 - 2

// NOTE compatible and incompatible functionality
// groupPushKnob and pushKnob:
  // with groupPushKnob on, pushKnob will not do anything
  // with pushKnob on, groupPushKnob will prevent knob release from doing anything
// groupPushKnob / pushKnob and drumParams
  // with either on (knob // 6, 7, and 8 for pushKnob), drumParams will not be able to be changed
// groupPushKnob / pushKnob and lfoNum
  // with either on (knob // 4 for pushKnob), lfoNum will not be able to be changed

---

// arpTypes
// 1: ascending one octave
// 2: ascending two octave
// 3: ascending three octave
// 4: descending one octave
// 5: descending two octave
// 6: descending three octave
// 7: random one octave
// 8: random two octave
// 9: random three octave
// 10: order pressed one octave
// 11: order pressed two octave
// 12: order pressed three octave

---

Other notes:
------------
ARP can be used as a drum roll for any instrument by changing tempo accordingly
ARP can be used with different values for channel 10 / 11 - see what combinations of percussion work
Try using ARP and PHRASE at the same time for a channel
Try using ARP or PHRASE with the FM (and the FM's ARP)
Might be interesting to have ARP and PHRASE sync options to try ARP and PHRASE where it doesn't match Ableton link
if you pass a variable into a recursive function by reference is will almost always change mid function
Midifire can remain open in front of modstep, but modstep will be doing most of the sequencing
Fugue Machine can be used to reverse, invert, bounce phrase
Could map modstep to other buttons
